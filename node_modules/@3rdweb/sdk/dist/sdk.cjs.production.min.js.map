{"version":3,"file":"sdk.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/common/error.ts","../src/common/ipfs.ts","../src/common/contract.ts","../src/common/chain.ts","../src/common/currency.ts","../src/common/module-type.ts","../src/common/chainlink.ts","../src/common/nft.ts","../src/common/role.ts","../src/common/gas-price.ts","../src/common/address.ts","../src/common/invariant.ts","../src/utils/blockTimeEstimator.ts","../src/common/forwarder.ts","../src/core/module.ts","../src/types/module-deployments/CommonModuleMetadata.ts","../src/types/module-deployments/BundleModuleMetadata.ts","../src/types/module-deployments/CurrencyModuleMetadata.ts","../src/types/module-deployments/DatastoreModuleMetadata.ts","../src/types/module-deployments/DropModuleMetadata.ts","../src/types/module-deployments/MarketModuleMetadata.ts","../src/types/module-deployments/NftModuleMetadata.ts","../src/types/module-deployments/PackModuleMetadata.ts","../src/types/module-deployments/SplitsModuleMetadata.ts","../src/types/module-deployments/VoteModuleMetadata.ts","../src/modules/token.ts","../src/modules/app.ts","../src/modules/bundle.ts","../src/factories/ClaimConditionPhase.ts","../src/factories/ClaimConditionFactory.ts","../src/types/snapshots/ClaimProof.ts","../src/types/snapshots/Snapshot.ts","../src/modules/bundleDrop.ts","../src/modules/datastore.ts","../src/modules/drop.ts","../src/types/QueryParams.ts","../src/modules/market.ts","../src/modules/nft.ts","../src/modules/pack.ts","../src/enums/ClaimConditionType.ts","../src/enums/vote/ProposalState.ts","../src/enums/vote/Vote.ts","../src/modules/royalty.ts","../src/modules/vote.ts","../src/storage/IpfsStorage.ts","../src/core/registry.ts","../src/core/index.ts","../src/index.ts","../src/utils/merkle/generateRoot.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @public\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @public\n */\nexport class InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address?: string) {\n    super(\n      address ? `'${address}' is an invalid address` : \"Invalid address passed\",\n    );\n  }\n}\n\nexport class UploadError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n */\nexport class FetchError extends Error {\n  public innerError?: Error;\n\n  /** @internal */\n  constructor(message: string, innerError?: Error) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n */\nexport class DuplicateLeafsError extends Error {\n  constructor(message?: string) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n","import { MetadataURIOrObject } from \"../core/types\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport { UploadError } from \"./error\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\nif (!globalThis.File) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.File = require(\"@web-std/file\").File;\n}\n\n/**\n *\n * @param ipfsUrl - the ipfs:// uri\n * @param gatewayUrl - the gateway url\n * @returns the fully formed IPFS url\n * @internal\n */\nexport function replaceIpfsWithGateway(ipfsUrl: string, gatewayUrl: string) {\n  if (!ipfsUrl || typeof ipfsUrl !== \"string\") {\n    return \"\";\n  }\n  if (!gatewayUrl.endsWith(\"/\")) {\n    gatewayUrl = `${gatewayUrl}/`;\n  }\n  return ipfsUrl.replace(\"ipfs://\", gatewayUrl);\n}\n\n/**\n * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.\n * @param data - stringified JSON || File\n * @param contractAddress - (Optional) the contract address to associate the data with\n * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file\n * @returns The `ipfs://<hash>` uri of the uploaded file\n * @public\n */\nexport async function uploadToIPFS(\n  data: string | File | FileOrBuffer,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  const headers = {\n    \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    \"X-Public-Address\": signerAddress || \"\",\n  };\n  const formData = new FormData();\n  formData.append(\"file\", data as any);\n  const res = await fetch(\"https://upload.nftlabs.co/upload\", {\n    method: \"POST\",\n    body: formData as any,\n    headers,\n  });\n  try {\n    const body = await res.json();\n    return body.IpfsUri;\n  } catch (e) {\n    throw new UploadError(`Failed to upload to IPFS: ${e}`);\n  }\n}\n\n/**\n * @internal\n */\nexport async function uploadMetadata(\n  metadata: MetadataURIOrObject,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  }\n  async function _fileHandler(object: any) {\n    const keys = Object.keys(object);\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const shouldUpload = val instanceof File || val instanceof Buffer;\n\n      if (shouldUpload) {\n        object[keys[key]] = await uploadToIPFS(\n          object[keys[key]],\n          contractAddress,\n          signerAddress,\n        );\n      }\n      if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n        throw new Error(\"Upload to IPFS failed\");\n      }\n      if (typeof val === \"object\") {\n        object[keys[key]] = await _fileHandler(object[keys[key]]);\n      }\n    }\n    return object;\n  }\n\n  metadata = await _fileHandler(metadata);\n\n  return await uploadToIPFS(\n    JSON.stringify(metadata),\n    contractAddress,\n    signerAddress,\n  );\n}\n","import { arrayify } from \"@ethersproject/bytes\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { replaceIpfsWithGateway } from \"./ipfs\";\n\n/**\n * The typical contract metadata found on the modules.\n * @public\n */\nexport interface ContractMetadata {\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_link?: string;\n  seller_fee_basis_points?: number;\n  fee_recipient?: string;\n  [key: string]: any;\n}\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = arrayify(\"0xd9b67a26\");\n\nconst contractUriABI = [\n  {\n    inputs: [] as [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nexport async function getContractMetadata(\n  provider: ProviderOrSigner,\n  address: string,\n  ipfsGatewayUrl: string,\n): Promise<ContractMetadata> {\n  const contract = new Contract(address, contractUriABI, provider);\n  const uri = await contract.contractURI();\n  const gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);\n  const meta = await fetch(gatewayUrl);\n  try {\n    const metadata = await meta.json();\n    const entity: ContractMetadata = {\n      ...metadata,\n      uri,\n      image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl),\n    };\n    return entity;\n  } catch (e) {\n    throw new Error(\n      `Gateway did not return metadata, instead returned:\\n ${await meta.text()}`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport async function isContract(\n  provider: Provider,\n  address: string,\n): Promise<boolean> {\n  return (await provider.getCode(address)) !== \"0x\";\n}\n","export enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","import { ERC20__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumberish } from \"ethers\";\nimport { ProviderOrSigner } from \"../core/types\";\n\n/**\n * Currency metadata.\n * @public\n */\nexport interface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n}\n\n/**\n * Currency metadata & value.\n * @public\n */\nexport interface CurrencyValue extends Currency {\n  value: string;\n  displayValue: string;\n}\n\n/**\n * @internal\n */\nexport const NATIVE_TOKEN_ADDRESS =\n  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @internal\n */\nexport async function getCurrencyMetadata(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n): Promise<Currency> {\n  try {\n    if (\n      asset.toLowerCase() === NATIVE_TOKEN_ADDRESS ||\n      asset.toLowerCase() === AddressZero\n    ) {\n      return {\n        name: \"\",\n        symbol: \"\",\n        decimals: 18,\n      };\n    } else if (asset.toLowerCase() !== AddressZero) {\n      const erc20 = ERC20__factory.connect(asset, providerOrSigner);\n      const [name, symbol, decimals] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.decimals(),\n      ]);\n      return {\n        name,\n        symbol,\n        decimals,\n      };\n    }\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  return {\n    name: \"\",\n    symbol: \"\",\n    decimals: 0,\n  };\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyValue(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n  price: BigNumberish,\n): Promise<CurrencyValue> {\n  const metadata = await getCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: price.toString(),\n    displayValue: formatUnits(price, metadata.decimals),\n  };\n}\n","import { $enum } from \"ts-enum-util\";\n\n/**\n * The type of Modules that are available.\n * @public\n */\nexport enum ModuleType {\n  CURRENCY = 0,\n  TOKEN = 0,\n  COLLECTION = 1,\n  BUNDLE = 1,\n  NFT = 2,\n  DYNAMIC_NFT = 3,\n  ACCESS_NFT = 4,\n  PACK = 5,\n  MARKET = 6,\n  DROP = 7,\n  DATASTORE = 8,\n  SPLITS = 9,\n  VOTE = 10,\n  BUNDLE_DROP = 11,\n}\n/**\n *\n * @param moduleName - a supported module name\n * @returns The {@link ModuleType} or undefined\n * @public\n */\n\nexport function convertNameToModuleType(\n  moduleName?: string,\n): ModuleType | undefined {\n  return $enum(ModuleType).getValueOrDefault(\n    moduleName?.toUpperCase(),\n    undefined,\n  );\n}\n\n/**\n *\n * @param moduleType - A {@link ModuleType}\n * @returns The name of the given {@link ModuleType} or undefined\n * @public\n */\nexport function convertModuleTypeToName(\n  moduleType: ModuleType,\n): keyof typeof ModuleType | undefined {\n  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chain\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n  [ChainId.Hardhat]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n};\n","import {\n  LazyMintERC1155,\n  LazyNFT,\n  NFT,\n  NFTCollection,\n} from \"@3rdweb/contracts\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { JSONValue, ProviderOrSigner } from \"../core/types\";\nimport { NotFoundError } from \"./error\";\nimport { replaceIpfsWithGateway } from \"./ipfs\";\n\n// support erc721 and erc1155\nconst tokenUriABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"uri\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * The shared NFT metadata.\n * @public\n */\nexport interface NFTMetadata {\n  id: string;\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_url?: string;\n  animation_url?: string;\n  properties?: Record<string, JSONValue>;\n}\n\n/**\n * The shared NFT metadata, including the current owner address.\n * @public\n */\nexport interface NFTMetadataOwner {\n  owner: string;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nexport type NFTContractTypes = NFT | NFTCollection | LazyNFT | LazyMintERC1155;\n\n/**\n/* @internal\n */\nexport async function getMetadataWithoutContract(\n  provider: ProviderOrSigner,\n  contractAddress: string,\n  tokenId: string,\n  ipfsGatewayUrl: string,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n  return getTokenMetadata(contract, tokenId, ipfsGatewayUrl);\n}\n\n/**\n/* @internal\n */\nexport async function getTokenMetadata(\n  contract: NFTContractTypes,\n  tokenId: string,\n  ipfsGatewayUrl: string,\n): Promise<NFTMetadata> {\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  const gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);\n  try {\n    const meta = await fetch(gatewayUrl);\n    const metadata = await meta.json();\n    const entity: NFTMetadata = {\n      ...metadata,\n      id: tokenId,\n      uri,\n      image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl),\n    };\n    return entity;\n  } catch (e) {\n    console.error(\"failed to fetch nft\", e);\n    return {\n      id: tokenId,\n      uri,\n    };\n  }\n}\n\n/**\n/* @internal\n */\nexport async function getTokenUri(\n  contract: NFTContractTypes,\n  tokenId: string,\n): Promise<string> {\n  let uri = \"\";\n  try {\n    uri = await contract.tokenURI(tokenId);\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (!uri) {\n    try {\n      uri = await (contract as NFTCollection).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n  return uri;\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n * Roles are used to handle permissions on modules that extend {@link ModuleWithRoles}.\n * @public\n */\nexport interface IRoles {\n  /**\n   * This admin role allows the wallet to modify contract metadata and {@link ModuleWithRoles.grantRole | grant} and {@link ModuleWithRoles.revokeRole | revoke} Roles.\n   * @public\n   */\n  admin: \"admin\";\n  /**\n   * The minter role allows the wallet to mint new assets.\n   * ({@link NFTModule.mint | NFTs}, {@link CurrencyModule.mint | Tokens}, {@link PackModule.create | Packs}, etc)\n   * @public\n   */\n  minter: \"minter\";\n  /**\n   * The pauser role allows the wallet to pause all external contract interactions.\n   * @public\n   */\n  pauser: \"pauser\";\n  /**\n   * The transfer role allows the wallet to transfer and receive assets\n   * **even** when the module is set to be non-transferrable.\n   * @public\n   */\n  transfer: \"transfer\";\n  /**\n   * The editor role allows the wallet to edit data in the {@link DatastoreModule}.\n   * @alpha\n   */\n  editor: \"editor\";\n  /**\n   * The lister role allows the wallet to list assets on the {@link MarketModule}.\n   * @public\n   */\n  lister: \"lister\";\n}\n\n/**\n * {@inheritDoc IRoles}\n * @public\n */\nexport type Role = keyof IRoles;\n\nexport type SetAllRoles = {\n  [key in keyof IRoles]?: string[];\n};\n\n/**\n *\n * @internal\n */\nexport const RolesMap: IRoles = {\n  admin: \"admin\",\n  minter: \"minter\",\n  pauser: \"pauser\",\n  transfer: \"transfer\",\n  editor: \"editor\",\n  lister: \"lister\",\n} as const;\n\n/**\n *\n * @internal\n */\nconst _role: Record<Role, string> = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n};\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.id(_role[role]);\n}\n","import { ChainId } from \"./chain\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId?: number): string | null {\n  if (!chainId) {\n    return null;\n  }\n\n  if (chainId === ChainId.Polygon) {\n    return \"https://gasstation-mainnet.matic.network\";\n  }\n\n  return null;\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getGasPriceForChain(\n  chainId: number,\n  speed: string,\n  maxGasPrice: number,\n): Promise<number | null> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  if (!gasStationUrl) {\n    return null;\n  }\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    const gas = data[speed];\n    if (gas > 0) {\n      return Math.min(gas, maxGasPrice);\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return null;\n}\n","import { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\nimport { Currency } from \"./currency\";\n\nexport interface NativeToken extends Currency {\n  wrapped: {\n    address: string;\n    name: string;\n    symbol: string;\n  };\n}\n\nexport const FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  Record<\"registry\", string>\n> = {\n  [ChainId.Mainnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Rinkeby]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Polygon]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Mumbai]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Avalanche]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Fantom]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.FantomTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n  [ChainId.Hardhat]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n  },\n};\n\nconst NATIVE_TOKENS: Record<SUPPORTED_CHAIN_ID | ChainId.Hardhat, NativeToken> =\n  {\n    [ChainId.Mainnet]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n    [ChainId.Rinkeby]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n    [ChainId.Polygon]: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n        name: \"Wrapped Matic\",\n        symbol: \"WMATIC\",\n      },\n    },\n    [ChainId.Mumbai]: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\",\n        name: \"Wrapped Matic\",\n        symbol: \"WMATIC\",\n      },\n    },\n    [ChainId.Avalanche]: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n        name: \"Wrapped AVAX\",\n        symbol: \"WAVAX\",\n      },\n    },\n    [ChainId.AvalancheFujiTestnet]: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n        name: \"Wrapped AVAX\",\n        symbol: \"WAVAX\",\n      },\n    },\n    [ChainId.Fantom]: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n        name: \"Wrapped Fantom\",\n        symbol: \"WFTM\",\n      },\n    },\n    [ChainId.FantomTestnet]: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n        name: \"Wrapped Fantom\",\n        symbol: \"WFTM\",\n      },\n    },\n    [ChainId.Hardhat]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n  };\n\nexport function getContractAddressByChainId(\n  chainId: ChainId,\n): string | undefined {\n  return CONTRACT_ADDRESSES[chainId as SUPPORTED_CHAIN_ID][\"registry\"];\n}\n\nexport function getNativeTokenByChainId(chainId: ChainId): NativeToken {\n  return NATIVE_TOKENS[chainId as SUPPORTED_CHAIN_ID];\n}\n","const genericMessage = \"Invariant Violation\";\n\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\n/**\n * Error that may get thrown when an invariant assummption fails.\n * @public\n */\nexport class InvariantError extends Error {\n  /**\n   * @internal\n   */\n  framesToPop = 1;\n  /**\n   * @internal\n   */\n  name = genericMessage;\n  /**\n   * @internal\n   */\n  constructor(message: string = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message,\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n/**\n * @internal\n * @param condition - any truthy condition to assert\n * @param message  - optional message to use if the condition is falsy\n */\nexport function invariant(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n","import { Provider } from \"@ethersproject/providers\";\nimport {\n  ChainId,\n  SUPPORTED_CHAIN_ID,\n  SUPPORTED_CHAIN_IDS,\n} from \"../common/chain\";\nimport { invariant } from \"../common/invariant\";\n\n/**\n * Fallback map of default block mining times in seconds.\n\n */\nexport const DEFAULT_BLOCK_TIMES_FALLBACK: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  { secondsBetweenBlocks: number; synced: boolean }\n> = {\n  [ChainId.Mainnet]: {\n    secondsBetweenBlocks: 15,\n    synced: false,\n  },\n  [ChainId.Rinkeby]: {\n    secondsBetweenBlocks: 15,\n    synced: false,\n  },\n  [ChainId.Polygon]: {\n    secondsBetweenBlocks: 2.5,\n    synced: false,\n  },\n  [ChainId.Mumbai]: {\n    secondsBetweenBlocks: 2.5,\n    synced: false,\n  },\n  [ChainId.Fantom]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.FantomTestnet]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.Avalanche]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.Hardhat]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n};\n\n/**\n * Given a time in second, return the block number that the time is in.\n *\n * @param timeInEpochSeconds - The time in seconds.\n * @param chainId - The chain id.\n * @returns - The block number.\n */\nexport async function estimateBlockAtTime(\n  timeInEpochSeconds: number,\n  provider: Provider,\n): Promise<number> {\n  const secondsUntil = Math.floor(timeInEpochSeconds - Date.now() / 1000);\n\n  const chainId = (await provider.getNetwork()).chainId as SUPPORTED_CHAIN_ID;\n  invariant(\n    SUPPORTED_CHAIN_IDS.includes(chainId),\n    `Chain id ${chainId} is not supported`,\n  );\n\n  invariant(\n    timeInEpochSeconds >= Date.now() / 1000,\n    \"This function should not be used to estimate past block times\",\n  );\n\n  const estimateSecondsBetweenBlocks = async (): Promise<number> => {\n    const blockTimes = [];\n\n    const latest = await provider.getBlock(\"latest\");\n    for (let i = 0; i < 5; i++) {\n      const current = await provider.getBlock(latest.number - i);\n      const previous = await provider.getBlock(latest.number - i - 1);\n\n      const diff = current.timestamp - previous.timestamp;\n      blockTimes.push(diff);\n    }\n\n    const sum = blockTimes.reduce((result, a) => result + a, 0);\n    return sum / blockTimes.length;\n  };\n\n  if (DEFAULT_BLOCK_TIMES_FALLBACK[chainId].synced) {\n    return DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n  }\n\n  const latestBlock = await provider.getBlock(\"latest\");\n\n  let secondsBetweenBlocks: number;\n  try {\n    secondsBetweenBlocks = await estimateSecondsBetweenBlocks();\n    DEFAULT_BLOCK_TIMES_FALLBACK[chainId] = {\n      synced: true,\n      secondsBetweenBlocks,\n    };\n  } catch (err) {\n    secondsBetweenBlocks =\n      DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n  }\n\n  console.log(\"Seconds until block\", secondsUntil);\n  const blocksUntil = Math.ceil(secondsUntil / secondsBetweenBlocks);\n  return latestBlock.number + blocksUntil;\n}\n","import { Forwarder } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\nconst _noncesSyncTimestamp: Record<string, number> = {};\n\nexport async function getAndIncrementNonce(\n  forwarder: Forwarder,\n  address: string,\n): Promise<BigNumber> {\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n\n  if (!(address in _nonces) || shouldSync) {\n    _nonces[address] = await forwarder.getNonce(address);\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","import { AccessControlEnumerable, Forwarder__factory } from \"@3rdweb/contracts\";\nimport {\n  ExternalProvider,\n  JsonRpcProvider,\n  JsonRpcSigner,\n  Log,\n  TransactionReceipt,\n  Web3Provider,\n} from \"@ethersproject/providers\";\nimport { signERC2612Permit } from \"eth-permit\";\nimport {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  ethers,\n  Signer,\n} from \"ethers\";\nimport { getContractMetadata, isContract } from \"../common/contract\";\nimport { ForwardRequest, getAndIncrementNonce } from \"../common/forwarder\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleType } from \"../common/module-type\";\nimport { getRoleHash, Role, SetAllRoles } from \"../common/role\";\nimport { ISDKOptions } from \"../interfaces/ISdkOptions\";\nimport { ModuleMetadata } from \"../types/ModuleMetadata\";\nimport { ThirdwebSDK } from \"./index\";\nimport type {\n  ForwardRequestMessage,\n  MetadataURIOrObject,\n  PermitRequestMessage,\n  ProviderOrSigner,\n} from \"./types\";\n\n/**\n * The root Module class. All other Modules extend this.\n * @remarks This should never be instantiated directly.\n * @public\n */\nexport class Module<TContract extends BaseContract = BaseContract> {\n  /**\n   * @readonly\n   */\n  public readonly address: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly ipfsGatewayUrl: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly options: ISDKOptions;\n\n  protected readonly sdk: ThirdwebSDK;\n\n  /**\n   * @internal\n   */\n  private _providerOrSigner: ProviderOrSigner | null = null;\n  /**\n   * @internal\n   */\n  protected get providerOrSigner(): ProviderOrSigner {\n    return this.signer || this._providerOrSigner || this.getProviderOrSigner();\n  }\n\n  private set providerOrSigner(value: ProviderOrSigner) {\n    this._providerOrSigner = value;\n  }\n\n  /**\n   * @internal\n   */\n  private _signer: Signer | null = null;\n  /**\n   * @internal\n   */\n  protected get signer(): Signer | null {\n    return this._signer;\n  }\n\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  /**\n   * Contract connects to the SDK signer or provider\n   * @internal\n   */\n  public contract: TContract;\n  /**\n   * Contract connects to the {@link ISDKOptions.readOnlyRpcUrl} if provided, otherwise connect to signer or provider\n   * @internal\n   */\n  public readOnlyContract: TContract;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    this.address = address;\n    this.options = options;\n    this.ipfsGatewayUrl = options.ipfsGatewayUrl;\n    this.setProviderOrSigner(providerOrSigner);\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n    this.sdk = sdk;\n  }\n\n  /**\n   * @public\n   * @returns whether the given contract exists on-chain\n   */\n  public async exists(): Promise<boolean> {\n    const provider = await this.getProvider();\n    invariant(provider, \"exists() -- No Provider\");\n    return isContract(provider, this.address);\n  }\n\n  /**\n   * @public\n   * Get the metadata of the contract.\n   */\n  public async getMetadata(): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const contract = this.connectContract();\n    const type = this.getModuleType();\n\n    return {\n      metadata: await getContractMetadata(\n        await this.getProvider(),\n        contract.address,\n        this.options.ipfsGatewayUrl,\n      ),\n      address: contract.address,\n      type,\n    };\n  }\n\n  /**\n   * @public\n   * Set new metadata on the contract and return it if successful.\n   * @param metadata - The metadata to set.\n   */\n  public async setMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n    return this.getMetadata();\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    this.providerOrSigner = providerOrSigner;\n    if (Signer.isSigner(providerOrSigner)) {\n      this.signer = providerOrSigner;\n    }\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n  }\n\n  /**\n   * @internal\n   */\n  public clearSigner(): void {\n    this.signer = null;\n  }\n\n  /**\n   * @internal\n   */\n  private getProviderOrSigner(): ProviderOrSigner {\n    return this.signer || this.providerOrSigner;\n  }\n\n  /**\n   * @internal\n   */\n  protected getSigner(): Signer | null {\n    if (Signer.isSigner(this.signer)) {\n      return this.signer;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  protected hasValidSigner(): boolean {\n    return Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot get signer address without valid signer\");\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  private async getProvider() {\n    return this.readOnlyContract.provider;\n  }\n\n  /**\n   * @internal\n   */\n  protected async getChainID(): Promise<number> {\n    const provider = await this.getProvider();\n    invariant(provider, \"getChainID() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected connectContract(): TContract {\n    throw new Error(\"connectContract has to be implemented\");\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    throw new Error(\"getModuleType has to be implemented\");\n  }\n\n  /**\n   * @internal\n   */\n  protected async getCallOverrides(): Promise<CallOverrides> {\n    const chainId = await this.getChainID();\n    const speed = this.options.gasSpeed;\n    const maxGasPrice = this.options.maxGasPriceInGwei;\n    const gasPriceChain = await getGasPriceForChain(\n      chainId,\n      speed,\n      maxGasPrice,\n    );\n    if (!gasPriceChain) {\n      return {};\n    }\n    // TODO: support EIP-1559 by try-catch, provider.getFeeData();\n    return {\n      gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), \"gwei\"),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendTransaction(\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    return this.sendContractTransaction(this.contract, fn, args, callOverrides);\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendContractTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    if (this.options.transactionRelayerUrl) {\n      return await this.sendGaslessTransaction(\n        contract,\n        fn,\n        args,\n        callOverrides,\n      );\n    } else {\n      return await this.sendAndWaitForTransaction(\n        contract,\n        fn,\n        args,\n        callOverrides,\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendAndWaitForTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    const tx = await contract.functions[fn](...args, callOverrides);\n    if (tx.wait) {\n      return await tx.wait();\n    }\n    return tx;\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n    const provider = await this.getProvider();\n    invariant(provider, \"no provider to execute transaction\");\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.address;\n    const value = callOverrides?.value || 0;\n    const data = contract.interface.encodeFunctionData(fn, args);\n    const forwarderAddress = this.options.transactionRelayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n\n    const gasEstimate = await contract.estimateGas[fn](...args);\n    let gas = gasEstimate.mul(2);\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // it'd estimate ~21740 on polygon.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gasEstimate.lt(25000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    const nonce = await getAndIncrementNonce(forwarder, from);\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    let message: ForwardRequestMessage | PermitRequestMessage = {\n      from,\n      to,\n      value: BigNumber.from(value).toString(),\n      gas: BigNumber.from(gas).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data,\n    };\n\n    let signature: BytesLike;\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (\n      fn === \"approve\" &&\n      args.length === 2 &&\n      contract.interface.functions[\"approve(address,uint256)\"] &&\n      contract.interface.functions[\n        \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n      ]\n    ) {\n      const spender = args[0];\n      const amount = args[1];\n      const permit = await signERC2612Permit(\n        signer,\n        contract.address,\n        from,\n        spender,\n        amount,\n      );\n      message = { to: contract.address, ...permit };\n      signature = `${permit.r}${permit.s.substring(2)}${permit.v.toString(16)}`;\n    } else {\n      // wallet connect special 🦋\n      if (\n        (\n          (signer?.provider as Web3Provider)?.provider as ExternalProvider & {\n            isWalletConnect?: boolean;\n          }\n        )?.isWalletConnect\n      ) {\n        const payload = ethers.utils._TypedDataEncoder.getPayload(\n          domain,\n          types,\n          message,\n        );\n        signature = await (signer?.provider as JsonRpcProvider).send(\n          \"eth_signTypedData\",\n          [from.toLowerCase(), JSON.stringify(payload)],\n        );\n      } else {\n        signature = await (signer as JsonRpcSigner)._signTypedData(\n          domain,\n          types,\n          message,\n        );\n      }\n    }\n\n    // await forwarder.verify(message, signature);\n    const txHash = await this.options.transactionRelayerSendFunction(\n      message,\n      signature,\n    );\n\n    return await provider.waitForTransaction(txHash);\n  }\n\n  protected parseEventLogs(eventName: string, logs?: Log[]): any {\n    if (!logs) {\n      return null;\n    }\n    const contract = this.contract;\n    for (const log of logs) {\n      try {\n        const event = contract.interface.decodeEventLog(\n          eventName,\n          log.data,\n          log.topics,\n        );\n        return event;\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n    return null;\n  }\n}\n\n/**\n * Extends the {@link Module} class to add {@link Role} functionality.\n *\n * @public\n */\nexport class ModuleWithRoles<\n  TContract extends AccessControlEnumerable = AccessControlEnumerable,\n> extends Module<TContract> {\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    throw new Error(\"getModuleRoles has to be implemented by a subclass\");\n  }\n\n  /**\n   * @internal\n   */\n  private get roles() {\n    return this.getModuleRoles();\n  }\n\n  /** @internal */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @param role - The {@link IRoles | role} to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.\n   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async getRoleMembers(role: Role): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const contract = this.contract;\n    const roleHash = getRoleHash(role);\n    const count = (await contract.getRoleMemberCount(roleHash)).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        contract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the module.\n   *\n   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the module does not support roles this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async getAllRoleMembers(): Promise<Partial<Record<Role, string[]>>> {\n    invariant(this.roles.length, \"this module has no support for roles\");\n    const roles: Partial<Record<Role, string[]>> = {};\n    for (const role of this.roles) {\n      roles[role] = await this.getRoleMembers(role);\n    }\n    return roles;\n  }\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ModuleWithRoles.grantRole | grantRole} and {@link ModuleWithRoles.grantRole | revokeRole} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @example Say you want to overwrite the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * await module.setAllRoleMembers({\n   *  minter: []\n   * });\n   * console.log(await module.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   *\n   * */\n  public async setAllRoleMembers(\n    rolesWithAddresses: SetAllRoles,\n  ): Promise<any> {\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(\n      roles.every((role) => this.roles.includes(role as Role)),\n      \"this module does not support the given role\",\n    );\n    const currentRoles = await this.getAllRoleMembers();\n    const encoded: string[] = [];\n    // add / rmove admin role at the end so we don't revoke admin then grant\n    roles\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        const addresses = rolesWithAddresses[role as Role] || [];\n        const currentAddresses = currentRoles[role as Role] || [];\n        const toAdd = addresses.filter(\n          (address) => !currentAddresses.includes(address),\n        );\n        const toRemove = currentAddresses.filter(\n          (address) => !addresses.includes(address),\n        );\n        if (toAdd.length) {\n          toAdd.forEach((address) => {\n            encoded.push(\n              this.contract.interface.encodeFunctionData(\"grantRole\", [\n                getRoleHash(role as Role),\n                address,\n              ]),\n            );\n          });\n        }\n        if (toRemove.length) {\n          toRemove.forEach(async (address) => {\n            const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n              address,\n            )) as any;\n            encoded.push(\n              this.contract.interface.encodeFunctionData(revokeFunctionName, [\n                getRoleHash(role as Role),\n                address,\n              ]),\n            );\n          });\n        }\n      });\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  /**\n   *\n   * Call this to revoke all roles given to a specific address.\n   * @param address - The address to revoke all roles for.\n   * @returns A list of roles that were revoked.\n   *\n   * @public\n   *\n   */\n\n  public async revokeAllRolesFromAddress(address: string): Promise<Role[]> {\n    const currentRoles = await this.getAllRoleMembers();\n    const encoded: string[] = [];\n    const rolesRemoved: Role[] = [];\n    // revoke / renounce admin role at the end\n    Object.keys(currentRoles)\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        if (currentRoles[role as Role]?.includes(address)) {\n          const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n            address,\n          )) as any;\n          encoded.push(\n            this.contract.interface.encodeFunctionData(revokeFunctionName, [\n              getRoleHash(role as Role),\n              address,\n            ]),\n          );\n          rolesRemoved.push(role as Role);\n        }\n      });\n    await this.sendTransaction(\"multicall\", [encoded]);\n    return rolesRemoved;\n  }\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link IRoles | role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async grantRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    return await this.sendTransaction(\"grantRole\", [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link IRoles | role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async revokeRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return await this.sendTransaction(revokeFunctionName, [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  private async getRevokeRoleFunctionName(address: string): Promise<string> {\n    const signerAddress = await this.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n\n  /**\n   * Prepares any set of metadata for uploading by recursively converting all Buffer|Blob|File objects\n   * into a hash of the object after its been uploaded to distributed storage (e.g. IPFS). After uploading\n   * any File|Buffer|Blob, the metadata is serialized to a string.\n   *\n   * @param metadata - The list of metadata to prepare for upload.\n   * @returns - The serialized metadata object.\n   */\n  public async prepareMetadata(metadata: MetadataURIOrObject): Promise<string> {\n    if (typeof metadata === \"string\") {\n      return metadata;\n    }\n\n    const _fileHandler = async (object: any) => {\n      const keys = Object.keys(object);\n      for (const key in keys) {\n        const val = object[keys[key]];\n        const shouldUpload = val instanceof File || val instanceof Buffer;\n        if (shouldUpload) {\n          object[keys[key]] = await this.sdk\n            .getStorage()\n            .upload(object[keys[key]]);\n        }\n        if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n          throw new Error(\"Upload to IPFS failed\");\n        }\n        if (typeof val === \"object\") {\n          object[keys[key]] = await _fileHandler(object[keys[key]]);\n        }\n      }\n      return object;\n    };\n\n    metadata = await _fileHandler(metadata);\n    // TODO: use json2typescript to convert metadata to string\n    return JSON.stringify(metadata);\n  }\n\n  /**\n   * Prepares a list of metadata for uploading.\n   *\n   * @param metadata - List of metadata to prepare for upload.\n   * @returns - List of metadata prepared for upload.\n   */\n  public async prepareBatchMetadata(\n    metadata: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    return await Promise.all(\n      metadata.map(async (m) => await this.prepareMetadata(m)),\n    );\n  }\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport FileOrBuffer from \"../FileOrBuffer\";\n\n/**\n * CommonModuleMetadata defines the common properties of a module deployment.\n */\n@JsonObject(\"CommonModuleMetadata\")\nexport default class CommonModuleMetadata {\n  /**\n   * The name of the module.\n   */\n  @JsonProperty(\"name\", String)\n  name = \"\";\n\n  /**\n   * The description of the module.\n   */\n  @JsonProperty(\"description\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  description?: string = undefined;\n\n  /**\n   * An image for the module.\n   *\n   * If the image is a File or Buffer, it will be uploaded to IPFS.\n   * If the image is a string, it will be used as-is (in case you already uploaded it to IPFS\n   * and the property is the IPFS hash uri).\n   */\n  @JsonProperty(\"image\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  image?: string | FileOrBuffer = undefined;\n\n  /**\n   * An external link for the module.\n   */\n  @JsonProperty(\"external_link\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  externalLink?: string = undefined;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CollectionModuleMetadata\")\nexport default class BundleModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CurrencyModuleMetadata\")\nexport default class CurrencyModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n","import { JsonObject } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DatastoreModuleMetadata\")\nexport default class DatastoreModuleMetadata extends CommonModuleMetadata {}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DropModuleMetadata\")\nexport default class DropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints? = 0;\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"primary_sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the Drop Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The max supply (required)\n   */\n  @JsonProperty(\"max_supply\", Number, PropertyConvertingMode.IGNORE_NULLABLE)\n  maxSupply = 1;\n\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\"primary_sale_recipient_address\", String)\n  primarySaleRecipientAddress = \"\";\n\n  /**\n   * The IPFS base URI thats prepended to all token URIs. This allows\n   * you to batch upload all the metadata for the tokens ahead of time\n   * so they can be lazy minted later\n   *\n   * e.g. if a Drop Collection has a token URI of /ipfs/BOREDAPES/TOKEN1, then the IPFS base URI is /BOREDAPES/\n   */\n  @JsonProperty(\n    \"base_token_uri\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  baseTokenUri? = \"\";\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketModuleMetadata\")\nexport default class MarketModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"NftModuleMetadata\")\nexport default class NftModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the NFT Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"PackModuleMetadata\")\nexport default class PackModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n","import { JsonObject } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\nimport { NewSplitRecipient } from \"./NewSplitRecipient\";\n\n@JsonObject(\"SplitsModuleMetadata\")\nexport default class SplitsModuleMetadata extends CommonModuleMetadata {\n  recipientSplits: NewSplitRecipient[] = [];\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"VoteModuleMetadata\")\nexport default class VoteModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The wait time before a proposal can begin being voted on (seconds).\n   */\n  @JsonProperty(\"proposal_start_time_in_seconds\", Number)\n  proposalStartWaitTimeInSeconds = 0;\n\n  /**\n   * How long a proposal is open for voting (seconds).\n   */\n  @JsonProperty(\"proposal_voting_time_in_seconds\", Number)\n  proposalVotingTimeInSeconds = 0;\n\n  /**\n   * **Do not set this property directly. It will be set by the SDK. Unless you know what you're doing.**\n   *\n   * Every proposal will wait `votingDelay` number of blocks before it can be voted on.\n   */\n  @JsonProperty(\"voting_delay\", Number)\n  votingDelay? = 0;\n\n  /**\n   * **Do not set this property directly. It will be set by the SDK. Unless you know what you're doing.**\n   *\n   * The voting period is the number of blocks that a proposal will be open for voting.\n   * This varies by chain.\n   */\n  @JsonProperty(\"voting_period\", Number)\n  votingPeriod? = 0;\n\n  /**\n   * The ERC20 token address that is used in the voting process.\n   */\n  @JsonProperty(\"voting_token_address\", String)\n  votingTokenAddress = \"\";\n\n  /**\n   * Quorum required for a proposal to be successful. This value should be between 0-100 and represents a percentage.\n   *\n   * By default it is set to 0.\n   */\n  @JsonProperty(\"voting_quorum_fraction\", Number)\n  votingQuorumFraction = 0;\n\n  /**\n   * The minimum number of tokens required to propose a proposal.\n   */\n  @JsonProperty(\"proposal_token_threshold\", String)\n  minimumNumberOfTokensNeededToPropose = \"0\";\n}\n","import { Coin, Coin__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\nexport interface ITokenMintArgs {\n  address: string;\n  amount: BigNumberish;\n}\n\nexport interface ITokenMintFromArgs extends ITokenMintArgs {\n  fromAddress: string;\n}\n\n/**\n *\n * Access this module by calling {@link ThirdwebSDK.getTokenModule}\n * @public\n */\nexport class TokenModule extends ModuleWithRoles<Coin> {\n  public static moduleType: ModuleType = ModuleType.CURRENCY as const;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return TokenModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Coin {\n    return Coin__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return TokenModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      this.address,\n      BigNumber.from(value),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return await this.getValue(await this.readOnlyContract.balanceOf(address));\n  }\n\n  public async allowance(spender: string): Promise<BigNumber> {\n    return await this.allowanceOf(await this.getSignerAddress(), spender);\n  }\n\n  public async allowanceOf(owner: string, spender: string): Promise<BigNumber> {\n    return await this.readOnlyContract.allowance(owner, spender);\n  }\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<BigNumber> {\n    return await this.getVoteBalanceOf(await this.getSignerAddress());\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<BigNumber> {\n    return await this.readOnlyContract.getVotes(account);\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(await this.getSignerAddress());\n  }\n\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.readOnlyContract.delegates(account);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"delegate\", [delegateeAddress]);\n  }\n\n  // write functions\n  public async transfer(\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transfer\", [to, amount]);\n  }\n\n  public async setAllowance(\n    spender: string,\n    amount: BigNumber,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"approve\", [spender, amount]);\n  }\n\n  // owner functions\n  public async mint(amount: BigNumberish) {\n    await this.mintTo(await this.getSignerAddress(), amount);\n  }\n\n  public async mintTo(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"mint\", [to, amount]);\n  }\n\n  public async mintBatchTo(args: ITokenMintArgs[]) {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"mint\", [\n          arg.address,\n          arg.amount,\n        ]),\n      );\n    }\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Lets you get a all token holders and their corresponding balances\n   * @beta - This can be very slow for large numbers of token holders\n   * @param queryParams - Optional query params\n   * @returns - A JSON object of all token holders and their corresponding balances\n   */\n  public async getAllHolderBalances(): Promise<Record<string, BigNumber>> {\n    const a = await this.contract.queryFilter(this.contract.filters.Transfer());\n    const txns = a.map((b) => b.args);\n    const balances: {\n      [key: string]: BigNumber;\n    } = {};\n    txns.forEach((item) => {\n      const from = item.from;\n      const to = item.to;\n      const amount = item.value;\n\n      if (!(from === AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return balances;\n  }\n\n  public async burn(amount: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [amount]);\n  }\n\n  public async burnFrom(\n    from: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burnFrom\", [from, amount]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async transferBatch(args: ITokenMintArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transfer\", [\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async transferFromBatch(args: ITokenMintFromArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transferFrom\", [\n        arg.fromAddress,\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n}\n\n/**\n * @deprecated - see {@link TokenModule}\n */\nexport class CurrencyModule extends TokenModule {}\n","import {\n  Coin__factory,\n  DataStore__factory,\n  ERC20__factory,\n  LazyMintERC1155__factory,\n  LazyNFT__factory,\n  Market__factory,\n  NFTCollection__factory,\n  NFT__factory,\n  Pack__factory,\n  ProtocolControl,\n  ProtocolControl__factory,\n  Royalty__factory,\n  VotingGovernor__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, ethers, Signer } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { JsonConvert } from \"json2typescript\";\nimport { DEFAULT_BLOCK_TIMES_FALLBACK } from \"../utils/blockTimeEstimator\";\nimport {\n  ChainlinkVrf,\n  CurrencyValue,\n  getCurrencyValue,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { getNativeTokenByChainId } from \"../common/address\";\nimport { getContractMetadata } from \"../common/contract\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleType } from \"../common/module-type\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport IAppModule from \"../interfaces/IAppModule\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport BundleDropModuleMetadata from \"../types/module-deployments/BundleDropModuleMetadata\";\nimport BundleModuleMetadata from \"../types/module-deployments/BundleModuleMetadata\";\nimport CommonModuleMetadata from \"../types/module-deployments/CommonModuleMetadata\";\nimport CurrencyModuleMetadata from \"../types/module-deployments/CurrencyModuleMetadata\";\nimport DatastoreModuleMetadata from \"../types/module-deployments/DatastoreModuleMetadata\";\nimport DropModuleMetadata from \"../types/module-deployments/DropModuleMetadata\";\nimport MarketModuleMetadata from \"../types/module-deployments/MarketModuleMetadata\";\nimport NftModuleMetadata from \"../types/module-deployments/NftModuleMetadata\";\nimport PackModuleMetadata from \"../types/module-deployments/PackModuleMetadata\";\nimport SplitsModuleMetadata from \"../types/module-deployments/SplitsModuleMetadata\";\nimport VoteModuleMetadata from \"../types/module-deployments/VoteModuleMetadata\";\nimport TokenModuleMetadata from \"../types/module-deployments/TokenModuleMetadata\";\nimport { ModuleMetadata, ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { BundleDropModule } from \"./bundleDrop\";\nimport { CollectionModule } from \"./collection\";\nimport { DatastoreModule } from \"./datastore\";\nimport { DropModule } from \"./drop\";\nimport { MarketModule } from \"./market\";\nimport { NFTModule } from \"./nft\";\nimport { PackModule } from \"./pack\";\nimport { SplitsModule } from \"./royalty\";\nimport { CurrencyModule, TokenModule } from \"./token\";\nimport { VoteModule } from \"./vote\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getAppModule}\n * @public\n */\nexport class AppModule\n  extends ModuleWithRoles<ProtocolControl>\n  implements IAppModule\n{\n  private jsonConvert = new JsonConvert();\n\n  public static roles = [RolesMap.admin] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * The internal module type for the app module.\n   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.\n   * @internal\n   * @readonly\n   */\n  private moduleType: ModuleType = -1;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): ProtocolControl {\n    return ProtocolControl__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return this.moduleType;\n  }\n\n  /**\n   * @internal\n   *\n   */\n  private async getModuleAddress(moduleType: ModuleType): Promise<string[]> {\n    return await this.readOnlyContract.getAllModulesOfType(moduleType);\n  }\n\n  private async getNFTAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.NFT);\n  }\n\n  private async getBundleAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.BUNDLE);\n  }\n\n  private async getPackAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.PACK);\n  }\n\n  private async getCurrencyAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.CURRENCY);\n  }\n\n  private async getMarketAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.MARKET);\n  }\n\n  private async getDropAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DROP);\n  }\n\n  private async getDatastoreAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DATASTORE);\n  }\n\n  public async getRoyaltyTreasury(address?: string): Promise<string> {\n    return await this.readOnlyContract.getRoyaltyTreasury(\n      address || AddressZero,\n    );\n  }\n\n  /**\n   * @internal\n   * @param addresses - The addresses of the modules to get metadata for.\n   */\n  public async getAllContractMetadata(\n    addresses: string[],\n  ): Promise<ModuleMetadataNoType[]> {\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n    return addresses\n      .filter((d) => d)\n      .map((address, i) => {\n        return {\n          address,\n          metadata: metadatas[i],\n        };\n      });\n  }\n\n  /**\n   * Method to get a list of pack module metadata.\n   * @returns A promise of an array of Pack modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getPackModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getPackAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.PACK,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of NFT module metadata.\n   * @returns A promise of an array of NFT modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getNFTModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getNFTAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.NFT,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of Bundle module metadata.\n   * @returns A promise of an array of Bundle modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCollectionModules(): Promise<ModuleMetadata[]> {\n    return await this.getBundleModules();\n  }\n\n  public async getBundleModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getBundleAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.BUNDLE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Currency module metadata.\n   * @returns A promise of an array of Currency modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCurrencyModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getCurrencyAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.CURRENCY,\n    }));\n  }\n\n  /**\n   * Method to get a list of Datastore module metadata.\n   * @alpha\n   * @returns A promise of an array of Datastore modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDatastoreModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getDatastoreAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.DATASTORE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Market module metadata.\n   * @returns A promise of an array of Market modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getMarketModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getMarketAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.MARKET,\n    }));\n  }\n\n  /**\n   * Method to get a list of Drop module metadata.\n   * @returns A promise of an array of Drop modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDropModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getDropAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.DROP,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of all module metadata on a given app.\n   * @public\n   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.\n   * @returns Array of module metadata\n   */\n  public async getAllModuleMetadata(\n    filterByModuleType?: ModuleType[],\n  ): Promise<ModuleMetadata[]> {\n    const moduleTypesToGet = filterByModuleType || [\n      ModuleType.NFT,\n      ModuleType.BUNDLE,\n      ModuleType.PACK,\n      ModuleType.TOKEN,\n      ModuleType.MARKET,\n      ModuleType.DATASTORE,\n      ModuleType.DROP,\n      ModuleType.BUNDLE_DROP,\n      ModuleType.VOTE,\n    ];\n    return (\n      await Promise.all(\n        moduleTypesToGet.map(async (moduleType) => {\n          const moduleAddresses = await this.getModuleAddress(moduleType);\n          return (await this.getAllContractMetadata(moduleAddresses)).map(\n            (m) => ({\n              ...m,\n              type: moduleType,\n            }),\n          );\n        }),\n      )\n    ).reduce((acc, curr) => acc.concat(curr), []);\n  }\n\n  // owner functions\n  /**\n   * @deprecated - Use setMetadata() instead\n   */\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyTreasury(\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyTreasury\", [treasury]);\n  }\n\n  public async setModuleRoyaltyTreasury(\n    moduleAddress: string,\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setModuleRoyaltyTreasury\", [\n      moduleAddress,\n      treasury,\n    ]);\n  }\n\n  public async withdrawFunds(\n    to: string,\n    currency: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"withdrawFunds\", [to, currency]);\n  }\n\n  /**\n   * Helper method that handles `image` property uploads if its a file\n   *\n   * @param metadata - The metadata of the module to be deployed\n   * @returns - The sanitized metadata with an uploaded image ipfs hash\n   */\n  private async _prepareMetadata(metadata: CommonModuleMetadata): Promise<any> {\n    if (typeof metadata.image === \"string\") {\n      return Promise.resolve(metadata);\n    }\n    if (metadata.image === undefined) {\n      return Promise.resolve(metadata);\n    }\n\n    metadata.image = await this.sdk\n      .getStorage()\n      .upload(\n        metadata.image as FileOrBuffer,\n        this.address,\n        await this.getSignerAddress(),\n      );\n    return Promise.resolve(metadata);\n  }\n\n  /**\n   * Helper method that deploys a module and returns its address\n   *\n   * @internal\n   *\n   * @param moduleType - The ModuleType to deploy\n   * @param args - Constructor arguments for the module\n   * @param factory - The ABI factory used to call the `deploy` method\n   * @returns The address of the deployed module\n   */\n  private async _deployModule<T extends ModuleType>(\n    moduleType: T,\n    args: any[],\n    factory: any,\n  ): Promise<string> {\n    const gasPrice = await this.sdk.getGasPrice();\n    const txOpts = gasPrice\n      ? { gasPrice: ethers.utils.parseUnits(gasPrice.toString(), \"gwei\") }\n      : {};\n\n    const tx = await new ethers.ContractFactory(factory.abi, factory.bytecode)\n      .connect(this.signer as Signer)\n      .deploy(...args, txOpts);\n\n    await tx.deployed();\n    const contractAddress = tx.address;\n\n    const addModuleTx = await this.contract.addModule(\n      contractAddress,\n      moduleType,\n      txOpts,\n    );\n    await addModuleTx.wait();\n    return contractAddress;\n  }\n\n  /**\n   * Deploys a collection module.\n   *\n   * @param metadata - Metadata about the module.\n   * @returns A promise with the newly created module.\n   */\n  public async deployBundleModule(\n    metadata: BundleModuleMetadata,\n  ): Promise<CollectionModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      BundleModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.COLLECTION,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        BigNumber.from(\n          metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        ),\n      ],\n      NFTCollection__factory,\n    );\n\n    return this.sdk.getCollectionModule(address);\n  }\n\n  /**\n   * Deploys a Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deploySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      Royalty__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a NFT module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed NFT module\n   */\n  public async deployNftModule(\n    metadata: NftModuleMetadata,\n  ): Promise<NFTModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      NftModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.NFT,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.sellerFeeBasisPoints,\n      ],\n      NFT__factory,\n    );\n\n    return this.sdk.getNFTModule(address);\n  }\n\n  /**\n   * Deploys a currency module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployCurrencyModule(\n    metadata: CurrencyModuleMetadata,\n  ): Promise<CurrencyModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getCurrencyModule(address);\n  }\n\n  /**\n   * Deploys a token module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployTokenModule(\n    metadata: TokenModuleMetadata,\n  ): Promise<TokenModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getTokenModule(address);\n  }\n\n  /**\n   * Deploys a Marketplace module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Marketplace module\n   */\n  public async deployMarketModule(\n    metadata: MarketModuleMetadata,\n  ): Promise<MarketModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      MarketModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.MARKET,\n      [\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0,\n      ],\n      Market__factory,\n    );\n\n    return this.sdk.getMarketModule(address);\n  }\n\n  /**\n   * Deploys a Pack module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Pack module\n   */\n  public async deployPackModule(\n    metadata: PackModuleMetadata,\n  ): Promise<PackModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      PackModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const chainId = await this.getChainID();\n    const { vrfCoordinator, linkTokenAddress, keyHash, fees } =\n      ChainlinkVrf[chainId as keyof typeof ChainlinkVrf];\n\n    const address = await this._deployModule(\n      ModuleType.PACK,\n      [\n        this.address,\n        metadataUri,\n        vrfCoordinator,\n        linkTokenAddress,\n        keyHash,\n        fees,\n        await this.sdk.getForwarderAddress(),\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n      ],\n      Pack__factory,\n    );\n\n    return this.sdk.getPackModule(address);\n  }\n\n  /**\n   * Deploys a Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Drop module\n   */\n  public async deployDropModule(\n    metadata: DropModuleMetadata,\n  ): Promise<DropModule> {\n    invariant(metadata.maxSupply !== undefined, \"Max supply must be specified\");\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.DROP,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n        metadata.baseTokenUri ? metadata.baseTokenUri : \"\",\n        metadata.maxSupply,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n        metadata.primarySaleRecipientAddress,\n      ],\n      LazyNFT__factory,\n    );\n\n    return this.sdk.getDropModule(address);\n  }\n\n  /**\n   * Deploys a Bundle Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Bundle Drop module\n   */\n  public async deployBundleDropModule(\n    metadata: BundleDropModuleMetadata,\n  ): Promise<BundleDropModule> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.BUNDLE_DROP,\n      [\n        metadataUri,\n        this.address,\n        await this.sdk.getForwarderAddress(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      LazyMintERC1155__factory,\n    );\n\n    return this.sdk.getBundleDropModule(address);\n  }\n\n  /**\n   * Deploys a Datastore module\n   *\n   * @alpha\n   * @param metadata - The module metadata\n   * @returns - The deployed Datastore module\n   */\n  public async deployDatastoreModule(\n    metadata: DatastoreModuleMetadata,\n  ): Promise<DatastoreModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DatastoreModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.DATASTORE,\n      [this.address, await this.sdk.getForwarderAddress(), metadataUri],\n      DataStore__factory,\n    );\n\n    return this.sdk.getDatastoreModule(address);\n  }\n\n  /**\n   * Deploys a Vote module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed vote module\n   */\n  public async deployVoteModule(\n    metadata: VoteModuleMetadata,\n  ): Promise<VoteModule> {\n    invariant(\n      metadata.votingTokenAddress !== \"\" &&\n        isAddress(metadata.votingTokenAddress),\n      \"Voting Token Address must be a valid address\",\n    );\n    invariant(\n      metadata.votingQuorumFraction >= 0 &&\n        metadata.votingQuorumFraction <= 100,\n      \"Quofrum Fraction must be in the range of 0-100 representing percentage\",\n    );\n\n    const chainId = await this.getChainID();\n    const timeBetweenBlocks =\n      DEFAULT_BLOCK_TIMES_FALLBACK[chainId as SUPPORTED_CHAIN_ID];\n\n    const waitTimeInBlocks =\n      metadata.proposalStartWaitTimeInSeconds /\n      timeBetweenBlocks.secondsBetweenBlocks;\n    const votingTimeInBlocks =\n      metadata.proposalVotingTimeInSeconds /\n      timeBetweenBlocks.secondsBetweenBlocks;\n\n    metadata.votingDelay = waitTimeInBlocks;\n    metadata.votingPeriod = votingTimeInBlocks;\n\n    // verify making sure that the voting token address is valid\n    try {\n      await Coin__factory.connect(\n        metadata.votingTokenAddress,\n        this.readOnlyContract.provider,\n      ).callStatic.getPastTotalSupply(0);\n    } catch (e) {\n      invariant(false, \"Token is not compatible with the vote module\");\n    }\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      VoteModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.VOTE,\n      [\n        metadata.name,\n        metadata.votingTokenAddress,\n        metadata.votingDelay,\n        metadata.votingPeriod,\n        metadata.minimumNumberOfTokensNeededToPropose,\n        metadata.votingQuorumFraction,\n        await this.sdk.getForwarderAddress(),\n        metadataUri,\n      ],\n      VotingGovernor__factory,\n    );\n\n    return this.sdk.getVoteModule(address);\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<BigNumber> {\n    const walletBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    return walletBalance;\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      tokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n}\n","import {\n  ERC20__factory,\n  ERC721__factory,\n  NFTCollection as NFTBundleContract,\n  NFTCollection__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\n\nexport interface BundleMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: number;\n}\nexport interface CollectionMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: number;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTBundleCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\nexport interface INFTCollectionCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTCollectionBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\nexport interface INFTBundleBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getBundleModule}\n * @beta\n */\nexport class BundleModule extends ModuleWithRoles<NFTBundleContract> {\n  public static moduleType: ModuleType = ModuleType.BUNDLE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFTBundleContract {\n    return NFTCollection__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleModule.moduleType;\n  }\n\n  /**\n   *\n   * Get a single bundle item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `BundleMetadata`.\n   */\n  public async get(tokenId: string, address?: string): Promise<BundleMetadata> {\n    const [metadata, creator, supply, ownedByAddress] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl),\n      this.readOnlyContract.creator(tokenId),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n    ]);\n    return {\n      creator,\n      supply,\n      metadata,\n      ownedByAddress,\n    };\n  }\n\n  /**\n   * Return all items in the bundle.\n   * @returns An array of `INFTBundle`.\n   */\n  public async getAll(address?: string): Promise<BundleMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(\n    address: string,\n    operator: string,\n    assetContract?: string,\n    assetId?: BigNumberish,\n  ): Promise<boolean> {\n    if (!assetContract) {\n      return await this.readOnlyContract.isApprovedForAll(address, operator);\n    }\n    if (!assetId) {\n      throw new Error(\"tokenId is required\");\n    }\n    const contract = ERC721__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n    const approved = await contract.isApprovedForAll(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    const isTokenApproved =\n      (await contract.getApproved(assetId)).toLowerCase() ===\n      this.address.toLowerCase();\n    return approved || isTokenApproved;\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  // owner functions\n  public async create(metadata: MetadataURIOrObject): Promise<BundleMetadata> {\n    return (await this.createBatch([metadata]))[0];\n  }\n\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleMetadata[]> {\n    const metadataWithSupply = metadatas.map((m) => ({\n      metadata: m,\n      supply: 0,\n    }));\n    return this.createAndMintBatch(metadataWithSupply);\n  }\n\n  public async createAndMint(\n    metadataWithSupply: INFTBundleCreateArgs,\n  ): Promise<BundleMetadata> {\n    return (await this.createAndMintBatch([metadataWithSupply]))[0];\n  }\n\n  public async createAndMintBatch(\n    metadataWithSupply: INFTBundleCreateArgs[],\n  ): Promise<BundleMetadata[]> {\n    const uris = await Promise.all(\n      metadataWithSupply\n        .map((a) => a.metadata)\n        .map((a) => this.sdk.getStorage().uploadMetadata(a)),\n    );\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const to = await this.getSignerAddress();\n    const receipt = await this.sendTransaction(\"createNativeTokens\", [\n      to,\n      uris,\n      supplies,\n      [0],\n    ]);\n    const event = this.parseEventLogs(\"NativeTokens\", receipt?.logs);\n    const tokenIds = event?.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async createWithToken(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    const token = ERC20__factory.connect(tokenContract, this.providerOrSigner);\n    const allowance = await token.allowance(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    if (allowance < tokenAmount) {\n      await token.increaseAllowance(this.address, tokenAmount);\n    }\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n    await this.sendTransaction(\"wrapERC20\", [\n      tokenContract,\n      tokenAmount,\n      args.supply,\n      uri,\n    ]);\n  }\n  public async createWithErc20(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    return this.createWithToken(tokenContract, tokenAmount, args);\n  }\n\n  public async createWithNFT(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    const asset = ERC721__factory.connect(tokenContract, this.providerOrSigner);\n\n    if (\n      !(await asset.isApprovedForAll(\n        await this.getSignerAddress(),\n        this.address,\n      ))\n    ) {\n      const isTokenApproved =\n        (await asset.getApproved(tokenId)).toLowerCase() ===\n        this.address.toLowerCase();\n      if (!isTokenApproved) {\n        await asset.setApprovalForAll(this.address, true);\n      }\n    }\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    await this.sendTransaction(\"wrapERC721\", [tokenContract, tokenId, uri]);\n  }\n  public async createWithERC721(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    return this.createWithNFT(tokenContract, tokenId, metadata);\n  }\n\n  public async mint(args: INFTBundleBatchArgs) {\n    await this.mintTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintTo(\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"mint\", [to, args.tokenId, args.amount, data]);\n  }\n\n  public async mintBatch(args: INFTBundleBatchArgs[]) {\n    await this.mintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"mintBatch\", [to, ids, amounts, data]);\n  }\n\n  public async burn(args: INFTBundleBatchArgs): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: INFTBundleBatchArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => await this.get(b.tokenId.toString())),\n    );\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport { BytesLike, hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { InvalidAddressError } from \"../common/error\";\nimport { invariant } from \"../common/invariant\";\nimport { PublicMintCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { SnapshotInfo } from \"../types/snapshots/SnapshotInfo\";\n\nexport default class ClaimConditionPhase {\n  // TODO: Should this be in seconds? Or milliseconds? [seconds, please update]\n  private _conditionStartTime = Date.now();\n\n  private _currencyAddress = \"\";\n\n  private _price: BigNumberish = 0;\n\n  private _maxQuantity: BigNumberish = BigNumber.from(0);\n\n  private _quantityLimitPerTransaction: BigNumberish =\n    ethers.constants.MaxUint256;\n\n  private _merkleRootHash: BytesLike = hexZeroPad([0], 32);\n\n  private _merkleCondition?: SnapshotInfo = undefined;\n\n  private createSnapshot: (leafs: string[]) => Promise<SnapshotInfo>;\n\n  private _waitInSeconds: BigNumberish = 0;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(createSnapshotFunc: (leafs: string[]) => Promise<SnapshotInfo>) {\n    this.createSnapshot = createSnapshotFunc;\n  }\n\n  /**\n   * Set the price claim condition for the drop.\n   *\n   * @param price - The price of the currency in wei. Must be >= 0.\n   * @param tokenAddress - The address of an ERC20 contract to use as the currency for the claim. By default this is the native currency address which is 0x0000000000000000000000000000000000000000 address.\n   */\n  public setPrice(\n    price: BigNumberish,\n    tokenAddress: string = AddressZero,\n  ): ClaimConditionPhase {\n    if (!isAddress(tokenAddress)) {\n      throw new InvalidAddressError(tokenAddress);\n    }\n    invariant(price >= 0, \"Price cannot be negative\");\n\n    this._price = price;\n    this._currencyAddress = tokenAddress;\n    return this;\n  }\n\n  /**\n   * Set the start time for the claim condition.\n   *\n   * @param startTime - The start time for the claim condition. Can be a Date object or a number of seconds since the epoch.\n   */\n  public setConditionStartTime(when: Date | number): ClaimConditionPhase {\n    if (typeof when === \"number\") {\n      this._conditionStartTime = Math.floor(when);\n    } else {\n      const secondsUntil = Math.floor((when.getTime() - Date.now()) / 1000);\n      // if its starting in the past, just set it to now\n      this._conditionStartTime = secondsUntil >= 0 ? secondsUntil : 0;\n    }\n    return this;\n  }\n\n  /**\n   * Override the maxQuantity for the claim condition after creating the phase.\n   *\n   * @param maxQuantity - The max quantity NFTs that can be claimed in this phase.\n   */\n  public setMaxQuantity(maxQuantity: BigNumberish): ClaimConditionPhase {\n    this._maxQuantity = maxQuantity;\n    return this;\n  }\n\n  /**\n   * The max quantity of NFTs that can be claimed in a single transaction.\n   *\n   * @param max - The max quantity NFTs that can be claimed in a single transaction.\n   */\n  public setMaxQuantityPerTransaction(max: BigNumberish): ClaimConditionPhase {\n    const maxQuantity = BigNumber.from(max);\n    invariant(maxQuantity.gte(1), \"Max quantity per transaction must be > 0\");\n    this._quantityLimitPerTransaction = maxQuantity;\n    return this;\n  }\n\n  /**\n   * Sets a merkle root hash for the claim condition.\n   *\n   * @param root - The merkle root hash\n   */\n  public setMerkleRoot(root: string): ClaimConditionPhase {\n    this._merkleRootHash = root;\n    return this;\n  }\n\n  /**\n   * Sets a snapshot for the claim condition. You can use a snapshot\n   * to verify a merkle tree condition.\n   *\n   * @param root - The merkle root hash\n   */\n  public async setSnapshot(addresses: string[]): Promise<ClaimConditionPhase> {\n    this._merkleCondition = await this.createSnapshot(addresses);\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public getSnapshot(): SnapshotInfo | undefined {\n    return this._merkleCondition;\n  }\n\n  /**\n   * Helper method that provides defaults for each claim condition.\n   * @internal\n   */\n  public buildPublicClaimCondition(): PublicMintCondition {\n    return {\n      startTimestamp: BigNumber.from(this._conditionStartTime.toString()),\n      pricePerToken: this._price,\n      currency: this._currencyAddress || AddressZero,\n      maxMintSupply: this._maxQuantity,\n\n      waitTimeSecondsLimitPerTransaction: this._waitInSeconds,\n\n      // TODO: I don't understand this default value\n      quantityLimitPerTransaction: this._quantityLimitPerTransaction,\n      currentMintSupply: 0,\n      merkleRoot: this._merkleCondition?.merkleRoot\n        ? this._merkleCondition.merkleRoot\n        : this._merkleRootHash,\n    };\n  }\n\n  /**\n   * Wait time enforced after calling `claim` before the next `claim` can be called.\n   *\n   * @param waitInSeconds - The wait time in seconds.\n   */\n  public setWaitTimeBetweenClaims(\n    waitInSeconds: BigNumberish,\n  ): ClaimConditionPhase {\n    this._waitInSeconds = waitInSeconds;\n    return this;\n  }\n}\n","import { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { PublicClaimCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { SnapshotInfo } from \"../types/snapshots/SnapshotInfo\";\nimport ClaimConditionPhase from \"./ClaimConditionPhase\";\n\nclass ClaimConditionFactory {\n  private phases: ClaimConditionPhase[] = [];\n  private createSnapshot: (leafs: string[]) => Promise<SnapshotInfo>;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(createSnapshotFunc: (leafs: string[]) => Promise<SnapshotInfo>) {\n    this.createSnapshot = createSnapshotFunc;\n  }\n\n  /**\n   * Used internally when creating a drop module/updating\n   * the claim conditions of a drop module.\n   *\n   * @internal\n   *\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\n   */\n  public buildConditions(): PublicClaimCondition[] {\n    const publicClaimConditions = this.phases.map((c) =>\n      c.buildPublicClaimCondition(),\n    );\n\n    // TODO: write test to ensure they're sorted by start time, earliest first\n    const sorted = publicClaimConditions.sort((a, b) => {\n      if (a.startTimestamp.eq(b.startTimestamp)) {\n        return 0;\n      } else if (a.startTimestamp.gt(b.startTimestamp)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Converts a set of generic `PublicClaimCondition`s into a `ClaimConditionFactory`\n   *\n   * @param conditions - The conditions to load, should be returned directly from the contract.\n   * @returns - The loaded claim condition factory.\n   */\n  public fromPublicClaimConditions(conditions: PublicClaimCondition[]) {\n    const phases = [];\n    for (const condition of conditions) {\n      const phase = new ClaimConditionPhase(this.createSnapshot);\n\n      // If there's a price, there must also be an associated currency\n      if (condition.currency) {\n        phase.setPrice(condition.pricePerToken, condition.currency);\n      }\n\n      if (condition.maxMintSupply) {\n        phase.setMaxQuantity(condition.maxMintSupply);\n      }\n\n      phase.setConditionStartTime(\n        new Date(condition.startTimestamp.toNumber() * 1000),\n      );\n      phases.push(phase);\n    }\n    this.phases = phases;\n    return this;\n  }\n\n  /**\n   * Creates a new claim 'phase' with its own set of claim conditions\n   *\n   * @param startTime - The start time of the phase in epoch seconds or a `Date` object.\n   * @param maxQuantity - The max quantity of the phase. By default, this is set to be infinite. In most cases, if your drop only\n   has a single phase, you don't need to override this value. If your drop has multiple phases, you should override this value and specify how many tokens are available for each specific phase.\n    * @param maxQuantityPerTransaction - The maximum number of claims that can be made in a single transaction. By default, this is set to infinite which means that there is no limit.\n   *\n   * @returns - The claim condition builder.\n   */\n  public newClaimPhase({\n    startTime,\n    maxQuantity = ethers.constants.MaxUint256,\n    maxQuantityPerTransaction = ethers.constants.MaxUint256,\n  }: {\n    startTime: Date | number;\n    maxQuantity?: BigNumberish;\n    maxQuantityPerTransaction?: BigNumberish;\n  }): ClaimConditionPhase {\n    const condition = new ClaimConditionPhase(this.createSnapshot);\n\n    condition.setConditionStartTime(startTime);\n    condition.setMaxQuantity(BigNumber.from(maxQuantity));\n    condition.setMaxQuantityPerTransaction(\n      BigNumber.from(maxQuantityPerTransaction),\n    );\n\n    this.phases.push(condition);\n    return condition;\n  }\n\n  /**\n   * Removes a claim condition phase from the factory.\n   *\n   * @param phase - The phase to remove\n   */\n  public removeClaimPhase(index: number): void {\n    if (index < 0 || index >= this.phases.length) {\n      return;\n    }\n\n    const sorted = this.buildConditions();\n    const cleared = sorted.splice(index - 1, 1);\n    this.fromPublicClaimConditions(cleared);\n  }\n\n  /**\n   * Helper method fetches all snapshots from a factory.\n   *\n   * @returns - All snapshots in the condition factory.\n   */\n  public allSnapshots(): SnapshotInfo[] {\n    return this.phases\n      .filter((p) => p.getSnapshot() !== undefined)\n      .map((p) => p.getSnapshot() as SnapshotInfo);\n  }\n}\n\nexport default ClaimConditionFactory;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\n\n/**\n * The model for a claim proof. Currently we support only an address\n * in the leaf of the merkle tree.\n */\n@JsonObject(\"ClaimProof\")\nexport class ClaimProof {\n  /**\n   * The address of the account that owns the claim.\n   */\n  @JsonProperty(\"address\", String)\n  address = \"\";\n\n  /**\n   * The proof of the claim (an array of hashes, depending on tree depth)\n   */\n  @JsonProperty(\"proof\", [String])\n  proof: string[] = [];\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport { ClaimProof } from \"./ClaimProof\";\n\n@JsonObject(\"Snapshot\")\nexport class Snapshot {\n  @JsonProperty(\"merkleRoot\", String)\n  merkleRoot = \"\";\n\n  @JsonProperty(\"claims\", [ClaimProof])\n  claims: ClaimProof[] = [];\n}\n","import {\n  ERC20__factory,\n  LazyMintERC1155 as BundleDrop,\n  LazyMintERC1155__factory as BundleDrop__factory,\n} from \"@3rdweb/contracts\";\nimport { ClaimConditionStruct } from \"@3rdweb/contracts/dist/LazyMintERC1155\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  getCurrencyValue,\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport ClaimConditionFactory from \"../factories/ClaimConditionFactory\";\nimport { ClaimCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { Snapshot } from \"../types/snapshots\";\n\n/**\n * @beta\n */\nexport interface BundleDropCreateClaimCondition {\n  startTimestamp?: BigNumberish;\n  maxClaimableSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeInSecondsBetweenClaims?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @beta\n */\nexport interface BundleDropMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getBundleDropModule}\n * @beta\n */\nexport class BundleDropModule extends ModuleWithRoles<BundleDrop> {\n  public static moduleType: ModuleType = ModuleType.BUNDLE_DROP;\n  storage = this.sdk.getStorage();\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleDropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): BundleDrop {\n    return BundleDrop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleDropModule.moduleType;\n  }\n\n  private async transformResultToClaimCondition(\n    pm: ClaimConditionStruct,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxClaimableSupply.toString(),\n      currentMintSupply: pm.supplyClaimed.toString(),\n      availableSupply: BigNumber.from(pm.maxClaimableSupply)\n        .sub(pm.supplyClaimed)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeInSecondsBetweenClaims.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.ipfsGatewayUrl,\n    );\n  }\n\n  public async get(tokenId: string): Promise<BundleDropMetadata> {\n    const [supply, metadata] = await Promise.all([\n      this.readOnlyContract.totalSupply(tokenId).catch(() => BigNumber.from(0)),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return {\n      supply,\n      metadata,\n    };\n  }\n\n  public async getAll(): Promise<BundleDropMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleDropMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenIdToMint();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => await this.get(b.tokenId.toString())),\n    );\n  }\n\n  public async getActiveClaimCondition(\n    tokenId: BigNumberish,\n  ): Promise<ClaimCondition> {\n    const index = await this.readOnlyContract.getIndexOfActiveCondition(\n      tokenId,\n    );\n    return this.transformResultToClaimCondition(\n      await this.readOnlyContract.getClaimConditionAtIndex(tokenId, index),\n    );\n  }\n\n  public async getAllClaimConditions(\n    tokenId: BigNumberish,\n  ): Promise<ClaimCondition[]> {\n    const claimCondition = await this.readOnlyContract.claimConditions(tokenId);\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n    for (let i = 0; i < count; i++) {\n      conditions.push(\n        await this.readOnlyContract.getClaimConditionAtIndex(tokenId, i),\n      );\n    }\n    return Promise.all(\n      conditions.map((c) => this.transformResultToClaimCondition(c)),\n    );\n  }\n\n  public async getSaleRecipient(tokenId: BigNumberish): Promise<string> {\n    const saleRecipient = await this.readOnlyContract.saleRecipient(tokenId);\n    if (saleRecipient === AddressZero) {\n      return this.readOnlyContract.defaultSaleRecipient();\n    }\n    return saleRecipient;\n  }\n\n  public async balanceOf(\n    address: string,\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n\n  /*\n   *\n   * @deprecated - {@link BundleDropModule.mintBatch}\n   */\n  public async lazyMintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleDropMetadata[]> {\n    const tokenIds = await this.createBatch(metadatas);\n    return await Promise.all(tokenIds.map((t) => this.get(t.toString())));\n  }\n\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const baseUri = await this.storage.uploadMetadataBatch(\n      metadatas,\n      this.address,\n      startFileNumber.toNumber(),\n    );\n    const receipt = await this.sendTransaction(\"lazyMint\", [\n      metadatas.length,\n      baseUri,\n    ]);\n    const event = this.parseEventLogs(\"LazyMintedTokens\", receipt?.logs);\n    const [startingIndex, endingIndex]: BigNumber[] = event;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  public async setSaleRecipient(\n    tokenId: BigNumberish,\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"setSaleRecipient\", [tokenId, recipient]);\n  }\n\n  public async setDefaultSaleRecipient(\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n  }\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      tokenId,\n      amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Sets public claim conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(\n    tokenId: BigNumberish,\n    factory: ClaimConditionFactory,\n  ) {\n    const conditions = factory.buildConditions().map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken:\n        c.pricePerToken === AddressZero\n          ? NATIVE_TOKEN_ADDRESS\n          : c.pricePerToken,\n      currency: c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata();\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n      metadata[\"merkle\"] = {};\n    } else {\n      metadata[\"merkle\"] = merkleInfo;\n    }\n\n    const metadataUri = await this.storage.upload(JSON.stringify(metadata));\n    const encoded = [\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [\n        metadataUri,\n      ]),\n      this.contract.interface.encodeFunctionData(\"setClaimConditions\", [\n        tokenId,\n        conditions,\n      ]),\n    ];\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the ClaimConditionFactory instead.\n   */\n  public async setPublicClaimConditions(\n    tokenId: BigNumberish,\n    conditions: BundleDropCreateClaimCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestamp || 0,\n      maxClaimableSupply: c.maxClaimableSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxClaimableSupply,\n      waitTimeInSecondsBetweenClaims: c.waitTimeInSecondsBetweenClaims || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setClaimConditions\", [tokenId, _conditions]);\n  }\n\n  public async claim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ) {\n    const mintCondition = await this.getActiveClaimCondition(tokenId);\n    const overrides = (await this.getCallOverrides()) || {};\n\n    const addressToClaim = await this.getSignerAddress();\n    const { metadata } = await this.getMetadata();\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.storage.get(\n        metadata?.merkle[mintCondition.merkleRoot.toString()],\n      );\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address === addressToClaim,\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (mintCondition.currency === AddressZero) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n    await this.sendTransaction(\"claim\", [tokenId, quantity, proofs], overrides);\n  }\n\n  public async burn(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const account = await this.getSignerAddress();\n    return await this.sendTransaction(\"burn\", [account, tokenId, amount]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [\n      from,\n      to,\n      tokenId,\n      amount,\n      data,\n    ]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.storage.uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.storage.uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted: boolean,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   *\n   * @param tokenId - The token ID to get the total supply of\n   */\n\n  public async totalSupply(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Pulls the list of all addresses that have claimed a particular token\n   *\n   * @beta - This can be very slow for large numbers of token holders\n   *\n   * @param tokenId - The token id to get the claimers of\n   * @returns - A unique list of addresses that claimed the token\n   */\n  public async getAllClaimerAddresses(\n    tokenId: BigNumberish,\n  ): Promise<string[]> {\n    const a = await this.contract.queryFilter(\n      this.contract.filters.ClaimedTokens(null, BigNumber.from(tokenId)),\n    );\n    return Array.from(new Set(a.map((b) => b.args.claimer)));\n  }\n\n  /*\n   * Checks to see if the current signer can claim the specified number of tokens.\n   *\n   * @param tokenId - The id of the token to check.\n   * @param quantity - The quantity of tokens to check.\n   * @returns - True if the current signer can claim the specified number of tokens, false otherwise.\n   */\n  public async canClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n  ): Promise<boolean> {\n    try {\n      const mintCondition = await this.getActiveClaimCondition(tokenId);\n      const proofs = await this.getClaimerProofs(\n        mintCondition.merkleRoot.toString(),\n      );\n\n      const overrides = (await this.getCallOverrides()) || {};\n      if (mintCondition.pricePerToken.gt(0)) {\n        if (mintCondition.currency === AddressZero) {\n          overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n            quantity,\n          );\n        } else {\n          const erc20 = ERC20__factory.connect(\n            mintCondition.currency,\n            this.providerOrSigner,\n          );\n          const owner = await this.getSignerAddress();\n          const spender = this.address;\n          const allowance = await erc20.allowance(owner, spender);\n          const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n            BigNumber.from(quantity),\n          );\n\n          if (allowance.lt(totalPrice)) {\n            // TODO throw allowance error, maybe check balance?\n          }\n        }\n      }\n      await this.readOnlyContract.callStatic.claim(\n        tokenId,\n        quantity,\n        proofs,\n        overrides,\n      );\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(merkleRoot: string): Promise<string[]> {\n    const addressToClaim = await this.getSignerAddress();\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.storage.get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find((c) => c.address === addressToClaim);\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n}\n","import { DataStore, DataStore__factory } from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumberish, ethers } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { ModuleWithRoles } from \"../core/module\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}\n * @alpha\n */\nexport class DatastoreModule extends ModuleWithRoles<DataStore> {\n  public static moduleType: ModuleType = ModuleType.DATASTORE;\n\n  public static roles = [RolesMap.admin, RolesMap.editor] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DatastoreModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DataStore {\n    return DataStore__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DatastoreModule.moduleType;\n  }\n\n  public async getUint(key: string): Promise<BigNumberish | undefined> {\n    const keyHash = ethers.utils.id(key.toString());\n    return await this.readOnlyContract.getUint(keyHash);\n  }\n\n  // write functions\n  public async setUint(\n    key: string,\n    value: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const keyHash = ethers.utils.id(key.toString());\n    return await this.sendTransaction(\"setUint\", [keyHash, value]);\n  }\n}\n","import {\n  ERC20__factory,\n  LazyNFT as Drop,\n  LazyNFT__factory as Drop__factory,\n} from \"@3rdweb/contracts\";\nimport { PublicMintConditionStruct } from \"@3rdweb/contracts/dist/LazyNFT\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike } from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport { getCurrencyValue, ModuleType, Role, RolesMap } from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport ClaimConditionFactory from \"../factories/ClaimConditionFactory\";\nimport {\n  ClaimCondition,\n  PublicMintCondition,\n} from \"../types/claim-conditions/PublicMintCondition\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { Snapshot } from \"../types/snapshots/Snapshot\";\n\n/**\n * @beta\n */\nexport interface CreatePublicMintCondition {\n  startTimestampInSeconds?: BigNumberish;\n  maxMintSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeSecondsLimitPerTransaction?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDropModule}\n * @beta\n */\nexport class DropModule extends ModuleWithRoles<Drop> {\n  public static moduleType: ModuleType = ModuleType.DROP;\n  storage = this.sdk.getStorage();\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Drop {\n    return Drop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.ipfsGatewayUrl,\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenId()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId - start).keys()).map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = BigNumber.from(\n      Math.min(\n        (await this.readOnlyContract.nextTokenId()).toNumber(),\n        start + count,\n      ),\n    );\n    const unmintedId = await this.readOnlyContract.nextMintTokenId();\n    return (\n      await Promise.all(\n        Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n          this.getTokenMetadata(unmintedId.add(i).toString()),\n        ),\n      )\n    ).map((metadata) => ({ owner: AddressZero, metadata }));\n  }\n\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextMintTokenId()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  private async transformResultToClaimCondition(\n    pm: PublicMintConditionStruct,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxMintSupply.toString(),\n      currentMintSupply: pm.currentMintSupply.toString(),\n      availableSupply: BigNumber.from(pm.maxMintSupply)\n        .sub(pm.currentMintSupply)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeSecondsLimitPerTransaction.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\n   */\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    return await this.readOnlyContract.mintConditions(index);\n  }\n\n  public async getActiveClaimCondition(): Promise<ClaimCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    const mc = await this.readOnlyContract.mintConditions(index);\n    return await this.transformResultToClaimCondition(mc);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\n   */\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        conditions.push(await this.readOnlyContract.mintConditions(i));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async getAllClaimConditions(): Promise<ClaimCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        const mc = await this.readOnlyContract.mintConditions(i);\n        conditions.push(await this.transformResultToClaimCondition(mc));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextTokenId();\n  }\n\n  public async maxTotalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.maxTotalSupply();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.readOnlyContract.nextTokenId()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextMintTokenId();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    await this.lazyMintBatch([metadata]);\n  }\n\n  public async pinToIpfs(files: Buffer[]): Promise<string> {\n    return await this.storage.uploadBatch(files, this.address);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    const uris = await Promise.all(\n      metadatas.map((m) => this.storage.uploadMetadata(m)),\n    );\n    await this.sendTransaction(\"lazyMintBatch\", [uris]);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMintAmount(amount: BigNumberish) {\n    await this.sendTransaction(\"lazyMintAmount\", [amount]);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimConditions} instead\n   */\n  public async setMintConditions(factory: ClaimConditionFactory) {\n    return this.setClaimConditions(factory);\n  }\n\n  /**\n   * Sets public mint conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimConditions(factory: ClaimConditionFactory) {\n    const conditions = factory.buildConditions();\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata();\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n      metadata[\"merkle\"] = {};\n    } else {\n      metadata[\"merkle\"] = merkleInfo;\n    }\n\n    const metatdataUri = await this.storage.upload(JSON.stringify(metadata));\n\n    const encoded = [\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [\n        metatdataUri,\n      ]),\n      this.contract.interface.encodeFunctionData(\"setPublicMintConditions\", [\n        conditions,\n      ]),\n    ];\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\n   */\n  public getMintConditionsFactory(): ClaimConditionFactory {\n    return this.getClaimConditionsFactory();\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\n   */\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestampInSeconds || 0,\n      maxMintSupply: c.maxMintSupply,\n      currentMintSupply: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeSecondsLimitPerTransaction:\n        c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setPublicMintConditions\", [_conditions]);\n  }\n\n  public async canClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<boolean> {\n    try {\n      const mintCondition = await this.getActiveClaimCondition();\n      const overrides = (await this.getCallOverrides()) || {};\n      if (mintCondition.pricePerToken.gt(0)) {\n        if (mintCondition.currency === AddressZero) {\n          overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n            quantity,\n          );\n        } else {\n          const erc20 = ERC20__factory.connect(\n            mintCondition.currency,\n            this.providerOrSigner,\n          );\n          const owner = await this.getSignerAddress();\n          const spender = this.address;\n          const allowance = await erc20.allowance(owner, spender);\n          const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n            BigNumber.from(quantity),\n          );\n\n          if (allowance.lt(totalPrice)) {\n            // TODO throw allowance error, maybe check balance?\n          }\n        }\n      }\n      await this.readOnlyContract.callStatic.claim(quantity, proofs, overrides);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<NFTMetadataOwner[]> {\n    const mintCondition = await this.getActiveClaimCondition();\n    const { metadata } = await this.getMetadata();\n\n    const addressToClaim = await this.getSignerAddress();\n\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.storage.get(\n        metadata?.merkle[mintCondition.merkleRoot.toString()],\n      );\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address === addressToClaim,\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n\n    const overrides = (await this.getCallOverrides()) || {};\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (mintCondition.currency === AddressZero) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n\n    const receipt = await this.sendTransaction(\n      \"claim\",\n      [quantity, proofs],\n      overrides,\n    );\n    const event = this.parseEventLogs(\"Claimed\", receipt?.logs);\n    const startingIndex: BigNumber = event.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const tokenIds = [];\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      tokenIds.push(BigNumber.from(i.toString()));\n    }\n    return await Promise.all(\n      tokenIds.map(async (t) => await this.get(t.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.storage.uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.storage.uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setBaseTokenUri(uri: string): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setBaseTokenURI\", [uri]);\n  }\n\n  public async setMaxTotalSupply(\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMaxTotalSupply\", [amount]);\n  }\n\n  public async setRestrictedTransfer(\n    restricted: boolean,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  // public async mintBatch(tokenMetadata: MetadataURIOrObject[]) {\n  // TODO: Upload all metadata to IPFS\n  // call lazyMintAmount(metadata.length - totalSupply) if totalSupply < metadata.length\n  // }\n}\n","import { BigNumberish } from \"ethers\";\n\nexport const DEFAULT_QUERY_ALL_COUNT = 100;\n\n// in the future we can support sorting too, but only pagination for now\nexport interface QueryAllParams {\n  start: BigNumberish;\n  count: BigNumberish;\n}\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Market,\n  Market__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { InterfaceId_IERC721 } from \"../common/contract\";\nimport { CurrencyValue, getCurrencyValue } from \"../common/currency\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Filter options for the Market module.\n * @public\n */\nexport interface ListingFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: string;\n}\n\n/**\n * Metadata for items listed on a Market module.\n * @public\n */\nexport interface ListingMetadata {\n  id: string;\n  seller: string;\n  tokenContract: string;\n  tokenId: string;\n  tokenMetadata?: NFTMetadata;\n  quantity: BigNumber;\n  currencyContract: string;\n  currencyMetadata: CurrencyValue | null;\n  price: BigNumber;\n  saleStart: Date | null;\n  saleEnd: Date | null;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getMarketModule}\n * @public\n */\nexport class MarketModule extends ModuleWithRoles<Market> {\n  public static moduleType: ModuleType = ModuleType.MARKET;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.pauser,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Market {\n    return Market__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketModule.moduleType;\n  }\n\n  private async transformResultToListing(\n    listing: any,\n  ): Promise<ListingMetadata> {\n    let currency: CurrencyValue | null = null;\n\n    try {\n      currency = await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.pricePerToken,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    let metadata: NFTMetadata | undefined = undefined;\n    try {\n      metadata = await getMetadataWithoutContract(\n        this.providerOrSigner,\n        listing.assetContract,\n        listing.tokenId.toString(),\n        this.ipfsGatewayUrl,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return {\n      id: listing.listingId.toString(),\n      seller: listing.seller,\n      tokenId: listing.tokenId.toString(),\n      tokenContract: listing.assetContract,\n      tokenMetadata: metadata,\n      quantity: listing.quantity,\n      price: listing.pricePerToken,\n      currencyContract: listing.currency,\n      currencyMetadata: currency,\n      saleStart: listing.saleStart.gt(0)\n        ? new Date(listing.saleStart.toNumber() * 1000)\n        : null,\n      saleEnd:\n        listing.saleEnd.gt(0) &&\n        listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1)\n          ? new Date(listing.saleEnd.toNumber() * 1000)\n          : null,\n    };\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.get} instead.\n   */\n  public async getListing(listingId: string): Promise<ListingMetadata> {\n    return await this.get(listingId);\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.getAll} instead.\n   */\n  public async getAllListings(\n    filter?: ListingFilter,\n  ): Promise<ListingMetadata[]> {\n    return await this.getAll(filter);\n  }\n\n  public async get(listingId: string): Promise<ListingMetadata> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    return await this.transformResultToListing(listing);\n  }\n\n  public async getAll(filter?: ListingFilter): Promise<ListingMetadata[]> {\n    let listings: any[] = [];\n\n    if (!filter) {\n      listings = listings.concat(await this.readOnlyContract.getAllListings());\n    } else {\n      if (filter.tokenContract && filter.tokenId) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAsset(\n            filter.tokenContract,\n            filter.tokenId,\n          ),\n        );\n      } else if (filter.seller) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsBySeller(filter.seller),\n        );\n      } else if (filter.tokenContract) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAssetContract(\n            filter.tokenContract,\n          ),\n        );\n      } else {\n        listings = listings.concat(\n          await this.readOnlyContract.getAllListings(),\n        );\n      }\n    }\n\n    listings = listings\n      .filter((l) => {\n        if (l.quantity.eq(0)) {\n          return false;\n        }\n        if (filter) {\n          const filterSeller = filter?.seller || \"\";\n          const filterTokenContract = filter?.tokenContract || \"\";\n          const filterTokenId = filter?.tokenId || \"\";\n\n          if (\n            filterSeller &&\n            filterSeller.toLowerCase() !== l.seller.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenContract &&\n            filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenId &&\n            filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()\n          ) {\n            return false;\n          }\n        }\n        return true;\n      })\n      .map((l) => this.transformResultToListing(l));\n    return await Promise.all(listings);\n  }\n\n  public async getMarketFeeBps(): Promise<BigNumber> {\n    return await this.readOnlyContract.marketFeeBps();\n  }\n\n  // write functions\n  public async list(\n    assetContract: string,\n    tokenId: string,\n    currencyContract: string,\n    price: BigNumberish,\n    quantity: BigNumberish,\n    tokensPerBuyer: BigNumberish = 0,\n    secondsUntilStart: BigNumberish = 0,\n    secondsUntilEnd: BigNumberish = 0,\n  ): Promise<ListingMetadata> {\n    const from = await this.getSignerAddress();\n    const erc165 = ERC165__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        const isTokenApproved =\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase();\n\n        if (!isTokenApproved) {\n          await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n            this.address,\n            true,\n          ]);\n        }\n      }\n    } else {\n      const asset = ERC1155__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n          this.address,\n          true,\n        ]);\n      }\n    }\n\n    const receipt = await this.sendTransaction(\"list\", [\n      assetContract,\n      tokenId,\n      currencyContract,\n      price,\n      quantity,\n      tokensPerBuyer,\n      secondsUntilStart,\n      secondsUntilEnd,\n    ]);\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    const listing = event?.listing;\n    return await this.transformResultToListing(listing);\n  }\n\n  public async unlistAll(listingId: string) {\n    const maxQuantity = (await this.get(listingId)).quantity;\n    await this.unlist(listingId, maxQuantity);\n  }\n\n  public async unlist(listingId: string, quantity: BigNumberish) {\n    await this.sendTransaction(\"unlist\", [listingId, quantity]);\n  }\n\n  public async buy(\n    listingId: string,\n    quantity: BigNumberish,\n  ): Promise<ListingMetadata> {\n    const listing = await this.get(listingId);\n    const owner = await this.getSignerAddress();\n    const spender = this.address;\n    const totalPrice = listing.price.mul(BigNumber.from(quantity));\n    if (listing.currencyContract && listing.currencyContract !== AddressZero) {\n      const erc20 = ERC20__factory.connect(\n        listing.currencyContract,\n        this.providerOrSigner,\n      );\n      const allowance = await erc20.allowance(owner, spender);\n      if (allowance.lt(totalPrice)) {\n        await this.sendContractTransaction(erc20, \"approve\", [\n          spender,\n          allowance.add(totalPrice),\n        ]);\n      }\n    }\n\n    const receipt = await this.sendTransaction(\"buy\", [listingId, quantity]);\n    const event = this.parseEventLogs(\"NewSale\", receipt?.logs);\n    return await this.transformResultToListing(event?.listing);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setMarketFeeBps(fee: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMarketFeeBps\", [fee]);\n  }\n}\n","/* eslint-disable new-cap */\nimport { NFT, NFT__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getNFTModule}\n * @public\n */\nexport class NFTModule extends ModuleWithRoles<NFT> {\n  public static moduleType: ModuleType = ModuleType.NFT;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  protected getModuleRoles(): readonly Role[] {\n    return NFTModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFT {\n    return NFT__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return NFTModule.moduleType;\n  }\n\n  /**\n   * Fetches an NFT from storage with the resolved metadata.\n   *\n   * @param tokenId - The id of the token to fetch.\n   * @returns - The NFT metadata.\n   */\n  public async get(tokenId: string): Promise<NFTMetadata> {\n    const storage = this.sdk.getStorage();\n    const uri = await this.readOnlyContract.tokenURI(tokenId);\n    const metadata = JSON.parse(await storage.get(uri));\n    return {\n      ...metadata,\n      id: tokenId,\n      uri,\n      image: storage.resolveFullUrl(metadata.image),\n    };\n  }\n\n  public async getAll(): Promise<NFTMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getWithOwner(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId),\n      this.get(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAllWithOwner(): Promise<NFTMetadataOwner[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.getWithOwner(i.toString()),\n      ),\n    );\n  }\n\n  /**\n   * Checks the owner of a particular NFT\n   *\n   * @param tokenId - ID of the NFT to get the owner of\n   * @returns the owner of the token, or a zero address if the\n   * token has been burned\n   */\n  public async ownerOf(tokenId: string): Promise<string> {\n    try {\n      return await this.readOnlyContract.ownerOf(tokenId);\n    } catch (e) {\n      return AddressZero;\n    }\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async mint(metadata: MetadataURIOrObject): Promise<NFTMetadata> {\n    return await this.mintTo(await this.getSignerAddress(), metadata);\n  }\n\n  public async mintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    const receipt = await this.sendTransaction(\"mintNFT\", [to, uri]);\n    const event = this.parseEventLogs(\"Minted\", receipt?.logs);\n    const tokenId = event?.tokenId;\n    return await this.get(tokenId.toString());\n  }\n\n  public async mintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    return await this.mintBatchTo(await this.getSignerAddress(), metadatas);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    const uris = await Promise.all(\n      metadatas.map((m) => this.sdk.getStorage().uploadMetadata(m)),\n    );\n    const receipt = await this.sendTransaction(\"mintNFTBatch\", [to, uris]);\n    const event = this.parseEventLogs(\"MintedBatch\", receipt?.logs);\n    const tokenIds = event.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC20__factory,\n  Pack as PackContract,\n  Pack__factory,\n} from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike, ethers } from \"ethers\";\nimport {\n  CurrencyValue,\n  getCurrencyValue,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { ChainlinkVrf } from \"../common/chainlink\";\nimport { NotFoundError } from \"../common/error\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * @beta\n */\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @beta\n */\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: MetadataURIOrObject;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: number;\n  rewardsPerOpen?: number;\n}\n\n/**\n * @beta\n */\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getPackModule}\n * @beta\n */\nexport class PackModule extends ModuleWithRoles<PackContract> {\n  public static moduleType: ModuleType = ModuleType.PACK;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return PackModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): PackContract {\n    return Pack__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return PackModule.moduleType;\n  }\n\n  public async open(packId: string): Promise<NFTMetadata[]> {\n    const receipt = await this.sendTransaction(\"openPack\", [packId]);\n    const event = this.parseEventLogs(\"PackOpenRequest\", receipt?.logs);\n    const requestId = event.requestId;\n    const opener = event.opener;\n\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.readOnlyContract.once(\n        // eslint-disable-next-line new-cap\n        this.readOnlyContract.filters.PackOpenFulfilled(null, opener),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n    const { rewardIds } = fulfillEvent;\n    return await Promise.all(\n      rewardIds.map((rewardId: BigNumber) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          this.address,\n          rewardId.toString(),\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n  }\n\n  public async get(packId: string): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      getMetadataWithoutContract(\n        this.providerOrSigner,\n        this.address,\n        packId,\n        this.ipfsGatewayUrl,\n      ),\n      this.readOnlyContract.getPack(packId),\n      this.readOnlyContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    const entity: PackMetadata = {\n      id: packId,\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n    return entity;\n  }\n\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward = await this.readOnlyContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          packReward.source,\n          tokenId.toString(),\n          this.ipfsGatewayUrl,\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  // passthrough to the contract\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  public async setApproval(operator: string, approved = true) {\n    await this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n  }\n\n  public async transfer(to: string, tokenId: string, amount: BigNumber) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      await this.getSignerAddress(),\n      to,\n      tokenId,\n      amount,\n      [0],\n    ]);\n  }\n\n  // owner functions\n  public async create(args: IPackCreateArgs): Promise<PackMetadata> {\n    const asset = ERC1155__factory.connect(\n      args.assetContract,\n      this.providerOrSigner,\n    );\n\n    const from = await this.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.address,\n      ids,\n      amounts,\n      packParams,\n      await this.getCallOverrides(),\n    );\n\n    const receipt = await tx.wait();\n    const event = receipt?.events?.find((e) => e.event === \"PackCreated\");\n    const packId = event?.args?.packId;\n    return await this.get(packId);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  // owner functions\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async depositLink(amount: BigNumberish) {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.address,\n      amount,\n      await this.getCallOverrides(),\n    );\n    await tx.wait();\n  }\n\n  public async withdrawLink(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"transferLink\", [to, amount]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(metadata: MetadataURIOrObject) {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRestrictedTransfer(restricted = false): Promise<void> {\n    await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n}\n","enum ClaimConditionType {\n  StartTime,\n  LimitPerWallet,\n  MerkleRoot,\n  WaitTimeBetweenClaims,\n}\n\n/**\n * Questions:\n *\n * 1. Can there only be a single `startTimestamp` condition? What is a `startTimestamp` condition?\n *\n * 2. What is `maxMintSupply`?\n *\n * 3. What is `currentMintSupply`?\n *\n * 4. What is `quantityLimitPerTransaction`?\n *\n * 5. What is `waitTimeSecondsLimitPerTransaction`?\n *\n * 6. Can there only be one `pricePerToken`?\n *\n * 7. Can there only be one `pricePerToken`?\n *\n */\n\nexport default ClaimConditionType;\n","export enum ProposalState {\n  Pending,\n  Active,\n  Canceled,\n  Defeated,\n  Succeeded,\n  Queued,\n  Expired,\n  Executed,\n}\n","export enum VoteType {\n  Against = 0,\n  For = 1,\n  Abstain = 2,\n}\n","import { ERC20__factory, Royalty, Royalty__factory } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\nimport { ModuleType } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { Module } from \"../core/module\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\n\nexport interface ISplitsModule {\n  /**\n   * Returns a list of all recipients with their\n   * respective split percentages.\n   *\n   */\n  getAllRecipients(): Promise<SplitRecipient[]>;\n\n  /**\n   * Get the split percentage of a recipient.\n   *\n   * @param address - The address of the recipient.\n   */\n  getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency.\n   *\n   * @param address - The address of the recipient to check the balance of.\n   */\n  balanceOf(address: string): Promise<BigNumber>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency in a specific currency.\n   *\n   * @param walletAddress - The address of the recipient to check the balance of.\n   * @param tokenAddress - The address of the currency to check the balance in.\n   */\n  balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet.\n   *\n   * @param address - The address to withdraw royalties for.\n   */\n  withdraw(address: string): Promise<void>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet, in the\n   * currency specified by `tokenAddress`.\n   *\n   * For example: If the native currency of a chain is ETH but the user\n   * wants to withdraw their split in $MATIC, they should pass\n   * the address of the $MATIC token as the `tokenAddress` parameter.\n   *\n   * @param walletAddress - The address to withdraw royalties for.\n   */\n  withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients.\n   */\n  distribute(): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients in the specified currency.\n   *\n   * @param tokenAddress - The address of the currency to distribute the funds in.\n   */\n  distributeToken(tokenAddress: string): Promise<void>;\n}\n\n/**\n *\n * Access this module by calling {@link ThirdwebSDK.getSplitsModule}\n * @alpha\n */\nexport class SplitsModule extends Module<Royalty> implements ISplitsModule {\n  public static moduleType: ModuleType = ModuleType.SPLITS as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Royalty {\n    return Royalty__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SplitsModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n\n    let index = BigNumber.from(0);\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const recipientAddress = await this.readOnlyContract.payee(index);\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return recipients;\n  }\n\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.readOnlyContract.totalShares(),\n      this.readOnlyContract.shares(address),\n    ]);\n\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    const totalReleased = await this.readOnlyContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.readOnlyContract[\"released(address)\"](address),\n    );\n  }\n\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n    const walletBalance = await erc20.balanceOf(this.address);\n    const totalReleased = await this.readOnlyContract[\"totalReleased(address)\"](\n      tokenAddress,\n    );\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.readOnlyContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, value);\n  }\n\n  public async withdraw(address: string): Promise<void> {\n    await this.sendTransaction(\"release(address)\", [address]);\n  }\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.readOnlyContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.readOnlyContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<void> {\n    await this.sendTransaction(\"release(address,address)\", [\n      tokenAddress,\n      walletAddress,\n    ]);\n  }\n\n  public async distribute(): Promise<void> {\n    await this.sendTransaction(\"distribute()\", []);\n  }\n\n  public async distributeToken(tokenAddress: string): Promise<void> {\n    await this.sendTransaction(\"distribute(address)\", [tokenAddress]);\n  }\n}\n","import {\n  ERC20__factory,\n  VotingGovernor,\n  VotingGovernor__factory,\n} from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n  ModuleType,\n} from \"../common\";\nimport { Module } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { VoteType } from \"../enums\";\nimport { Proposal, ProposalExecutable } from \"../types/vote\";\n\nexport interface VoteSettings {\n  votingDelay: string;\n  votingPeriod: string;\n  votingTokenAddress: string;\n  votingTokenMetadata: Currency;\n  votingQuorumFraction: string;\n  proposalTokenThreshold: string;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getVoteModule}\n *\n * @alpha\n * @public\n */\nexport class VoteModule extends Module<VotingGovernor> {\n  public static moduleType: ModuleType = ModuleType.VOTE as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): VotingGovernor {\n    return VotingGovernor__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return VoteModule.moduleType;\n  }\n\n  public async settings(): Promise<VoteSettings> {\n    const [\n      votingDelay,\n      votingPeriod,\n      votingTokenAddress,\n      votingQuorumFraction,\n      proposalTokenThreshold,\n    ] = await Promise.all([\n      this.readOnlyContract.votingDelay(),\n      this.readOnlyContract.votingPeriod(),\n      this.readOnlyContract.token(),\n      this.readOnlyContract.quorumNumerator(),\n      this.readOnlyContract.proposalThreshold(),\n    ]);\n    const votingTokenMetadata = await getCurrencyMetadata(\n      this.providerOrSigner,\n      votingTokenAddress,\n    );\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString(),\n    };\n  }\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  public async get(proposalId: string): Promise<Proposal> {\n    await this.ensureExists(proposalId);\n\n    const all = await this.getAll();\n    const proposals = all.filter(\n      (p) => p.proposalId.toLowerCase() === proposalId.toLowerCase(),\n    );\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Returns all the proposals in the contract.\n   *\n   * @returns - All the proposals in the contract.\n   */\n  public async getAll(): Promise<Proposal[]> {\n    const proposals = await this.readOnlyContract.queryFilter(\n      this.contract.filters.ProposalCreated(),\n    );\n\n    const results: Proposal[] = [];\n    const states = await Promise.all(\n      proposals.map((p) => this.readOnlyContract.state(p.args.proposalId)),\n    );\n    const votes = await Promise.all(\n      proposals.map((p) =>\n        this.readOnlyContract.proposalVotes(p.args.proposalId),\n      ),\n    );\n\n    for (let i = 0; i < proposals.length; i++) {\n      const p = proposals[i].args;\n      const s = states[i];\n      const v = [\n        {\n          type: VoteType.Against,\n          label: \"Against\",\n          count: votes[i].againstVotes,\n        },\n        {\n          type: VoteType.For,\n          label: \"For\",\n          count: votes[i].forVotes,\n        },\n        {\n          type: VoteType.Abstain,\n          label: \"Abstain\",\n          count: votes[i].abstainVotes,\n        },\n      ];\n      const e = [];\n      for (let j = 0; j < p.targets.length; j++) {\n        e.push({\n          to: p.targets[j],\n          value: p.values[j] || 0,\n          data: p.calldatas[j],\n        });\n      }\n      results.push({\n        proposalId: p.proposalId.toString(),\n        proposer: p.proposer,\n        description: p.description,\n        startBlock: p.startBlock,\n        endBlock: p.endBlock,\n        state: s,\n        votes: v,\n        executions: e.map((exec) => ({\n          toAddress: exec.to,\n          nativeTokenValue: exec.value,\n          transactionData: exec.data,\n        })),\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Create a new proposal.\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal.\n   */\n  public async propose(\n    description: string,\n    executions: ProposalExecutable[],\n  ): Promise<BigNumber> {\n    const tos = executions.map((p) => p.toAddress);\n    const values = executions.map((p) => p.nativeTokenValue);\n    const datas = executions.map((p) => p.transactionData);\n    const receipt = await this.sendTransaction(\"propose\", [\n      tos,\n      values,\n      datas,\n      description,\n    ]);\n\n    const event = this.parseEventLogs(\"ProposalCreated\", receipt?.logs);\n    return event.proposalId;\n  }\n\n  /**\n   * Vote on a proposal.\n   *\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  public async vote(proposalId: string, voteType: VoteType, reason = \"\") {\n    await this.ensureExists(proposalId);\n\n    await this.sendTransaction(\"castVoteWithReason\", [\n      proposalId,\n      voteType,\n      reason,\n    ]);\n  }\n\n  /**\n   * Checks if an account has voted on a proposal\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  public async hasVoted(\n    proposalId: string,\n    account?: string,\n  ): Promise<boolean> {\n    if (!account) {\n      account = await this.getSignerAddress();\n    }\n    return this.readOnlyContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Once the voting period has ended, call this method to execute the executables in the proposal.\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  public async execute(proposalId: string) {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    await this.sendTransaction(\"execute\", [\n      tos,\n      values,\n      datas,\n      descriptionHash,\n    ]);\n  }\n\n  /**\n   * Check to see if a proposal can be executed.\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  public async canExecute(proposalId: string): Promise<boolean> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.readOnlyContract.callStatic.execute(\n        tos,\n        values,\n        datas,\n        descriptionHash,\n      );\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<CurrencyValue> {\n    const balance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance.toString(),\n      displayValue: ethers.utils.formatUnits(balance, 18),\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(\n      tokenAddress,\n      this.readOnlyContract.provider,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      tokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  private async ensureExists(proposalId: string): Promise<void> {\n    await this.readOnlyContract.state(proposalId);\n  }\n}\n","import { FetchError, UploadError } from \"../common/error\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport IStorage from \"../interfaces/IStorage\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\nconst thirdwebIpfsServerUrl = \"https://upload.nftlabs.co\";\nconst pinataIpfsUrl = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n// const thirdwebIpfsServerUrl = \"http://localhost:3002\";\n\nexport default class IpfsStorage implements IStorage {\n  private gatewayUrl: string;\n\n  constructor(gatewayUrl: string) {\n    this.gatewayUrl = `${gatewayUrl.replace(/\\/$/, \"\")}/`;\n  }\n\n  public async upload(\n    data: string | FileOrBuffer,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n      \"X-Public-Address\": signerAddress || \"\",\n    };\n    const formData = new FormData();\n    formData.append(\"file\", data as any);\n    try {\n      const res = await fetch(`${thirdwebIpfsServerUrl}/upload`, {\n        method: \"POST\",\n        body: formData as any,\n        headers,\n      });\n      if (res.status !== 200) {\n        throw new Error(\n          `Failed to upload to IPFS [status code = ${res.status}]`,\n        );\n      }\n\n      const body = await res.json();\n      return body.IpfsUri;\n    } catch (e) {\n      throw new UploadError(`Failed to upload to IPFS: ${e}`);\n    }\n  }\n\n  public async uploadBatch(\n    files: Buffer[] | string[] | FileOrBuffer[] | File[],\n    contractAddress?: string,\n    fileStartNumber = 0,\n  ): Promise<string> {\n    const token = await this.getUploadToken(contractAddress || \"\");\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const data = new FormData();\n\n    files.forEach((file, i) => {\n      const filepath = `files/${fileStartNumber + i}`;\n      if (typeof window === \"undefined\") {\n        data.append(\"file\", file as any, { filepath } as any);\n      } else {\n        // browser does blob things, filepath is parsed differently on browser vs node.\n        // pls pinata?\n        data.append(\"file\", new Blob([file]), filepath);\n      }\n    });\n\n    data.append(\"pinataMetadata\", JSON.stringify(metadata));\n    const res = await fetch(pinataIpfsUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      body: data as any,\n    });\n    const body = await res.json();\n    if (!res.ok) {\n      throw new UploadError(\"Failed to upload files to IPFS\");\n    }\n    return `ipfs://${body.IpfsHash}/`;\n  }\n\n  public async getUploadToken(contractAddress: string): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const res = await fetch(`${thirdwebIpfsServerUrl}/grant`, {\n      method: \"GET\",\n      headers,\n    });\n    if (!res.ok) {\n      throw new FetchError(`Failed to get upload token`);\n    }\n    const body = await res.text();\n    return body;\n  }\n\n  public async get(hash: string): Promise<string> {\n    let uri = hash;\n    if (hash) {\n      uri = this.resolveFullUrl(hash);\n    }\n    try {\n      const result = await fetch(uri);\n      if (result.status !== 200) {\n        throw new Error(`Status code (!= 200) =${result.status}`);\n      }\n      return await result.text();\n    } catch (err: any) {\n      throw new FetchError(`Failed to fetch IPFS file: ${uri}`, err);\n    }\n  }\n\n  private async uploadFileHandler(object: any) {\n    const keys = Object.keys(object);\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const shouldUpload = val instanceof File || val instanceof Buffer;\n\n      if (shouldUpload) {\n        object[keys[key]] = await this.upload(object[keys[key]]);\n      }\n      if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n        throw new Error(\"Upload to IPFS failed\");\n      }\n      if (typeof val === \"object\") {\n        object[keys[key]] = await this.uploadFileHandler(object[keys[key]]);\n      }\n    }\n    return object;\n  }\n\n  public async uploadMetadata(\n    metadata: MetadataURIOrObject,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    if (typeof metadata === \"string\") {\n      return metadata;\n    }\n\n    metadata = await this.uploadFileHandler(metadata);\n\n    return await this.upload(\n      JSON.stringify(metadata),\n      contractAddress,\n      signerAddress,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  public async uploadMetadataBatch(\n    metadatas: MetadataURIOrObject[],\n    contractAddress?: string,\n    startFileNumber?: number,\n  ) {\n    const finalMetadata = await Promise.all(\n      metadatas.map((m) => {\n        if (typeof m === \"string\") {\n          return m;\n        } else {\n          return this.uploadFileHandler(m);\n        }\n      }),\n    );\n    return await this.uploadBatch(\n      finalMetadata.map((m) => JSON.stringify(m)),\n      contractAddress,\n      startFileNumber,\n    );\n  }\n\n  /**\n   * Resolves the full url for a file using the configured gateway\n   *\n   * @param ipfsHash - the ipfs:// uri\n   * @returns - The fully formed IPFS url with the gateway url\n   * @internal\n   */\n  resolveFullUrl(ipfsHash: string): string {\n    return ipfsHash && ipfsHash.toLowerCase().includes(\"ipfs://\")\n      ? ipfsHash.replace(\"ipfs://\", this.gatewayUrl)\n      : ipfsHash;\n  }\n}\n","import { Registry, Registry__factory } from \"@3rdweb/contracts\";\nimport { ContractMetadata, getContractMetadata } from \"../common/contract\";\nimport { Module } from \"./module\";\n\n/**\n * @public\n */\nexport interface IAppModule {\n  address: string;\n  version: number;\n  metadata?: ContractMetadata;\n}\n\n/**\n * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.\n * @internal\n */\nexport class RegistryModule extends Module<Registry> {\n  /**\n   * @internal\n   */\n  protected connectContract(): Registry {\n    return Registry__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  public async getProtocolContracts(): Promise<IAppModule[]> {\n    const deployer = await this.getSignerAddress();\n    const maxVersion = await this.readOnlyContract.getProtocolControlCount(\n      deployer,\n    );\n    const versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();\n    const addresses = await Promise.all(\n      versions.map((v) =>\n        this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString()),\n      ),\n    );\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.ipfsGatewayUrl,\n        ).catch(() => undefined),\n      ),\n    );\n    return versions.map((v, i) => {\n      return {\n        address: addresses[i],\n        version: v,\n        metadata: metadatas[i],\n      };\n    });\n  }\n}\n","import { Provider } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { BytesLike, ContractReceipt, ethers, Signer } from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport MerkleTree from \"merkletreejs\";\nimport type { C } from \"ts-toolbelt\";\nimport {\n  DuplicateLeafsError,\n  getContractMetadata,\n  uploadMetadata,\n} from \"../common\";\nimport {\n  FORWARDER_ADDRESS,\n  getContractAddressByChainId,\n} from \"../common/address\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { ISDKOptions, IThirdwebSdk } from \"../interfaces\";\nimport IStorage from \"../interfaces/IStorage\";\nimport { AppModule } from \"../modules/app\";\nimport { BundleModule } from \"../modules/bundle\";\nimport { BundleDropModule } from \"../modules/bundleDrop\";\nimport { CollectionModule } from \"../modules/collection\";\nimport { DatastoreModule } from \"../modules/datastore\";\nimport { DropModule } from \"../modules/drop\";\nimport { MarketModule } from \"../modules/market\";\nimport { NFTModule } from \"../modules/nft\";\nimport { PackModule } from \"../modules/pack\";\nimport { SplitsModule } from \"../modules/royalty\";\nimport { CurrencyModule, TokenModule } from \"../modules/token\";\nimport { VoteModule } from \"../modules/vote\";\nimport IpfsStorage from \"../storage/IpfsStorage\";\nimport { ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { ClaimProof, Snapshot, SnapshotInfo } from \"../types/snapshots\";\nimport { IAppModule, RegistryModule } from \"./registry\";\nimport {\n  ForwardRequestMessage,\n  MetadataURIOrObject,\n  PermitRequestMessage,\n  ProviderOrSigner,\n  ValidProviderInput,\n} from \"./types\";\n\n/**\n * @internal\n */\nexport type AnyContract =\n  | typeof AppModule\n  | typeof BundleModule\n  | typeof NFTModule\n  | typeof CurrencyModule\n  | typeof MarketModule\n  | typeof PackModule\n  | typeof RegistryModule\n  | typeof DropModule\n  | typeof DatastoreModule\n  | typeof SplitsModule\n  | typeof BundleDropModule\n  | typeof VoteModule;\n\n/**\n * The entrypoint to the SDK.\n * @public\n */\nexport class ThirdwebSDK implements IThirdwebSdk {\n  // default options\n  private options: ISDKOptions;\n  private defaultOptions: ISDKOptions = {\n    ipfsGatewayUrl: \"https://cloudflare-ipfs.com/ipfs/\",\n    registryContractAddress: \"\",\n    maxGasPriceInGwei: 100,\n    gasSpeed: \"fastest\",\n    transactionRelayerUrl: \"\",\n    transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),\n    transactionRelayerForwarderAddress: FORWARDER_ADDRESS,\n    readOnlyRpcUrl: \"\",\n  };\n  private modules = new Map<string, C.Instance<AnyContract>>();\n  private providerOrSigner: ProviderOrSigner;\n\n  private _signer: Signer | null = null;\n\n  private _jsonConvert = new JsonConvert();\n  private storage: IStorage;\n\n  /**\n   * The active Signer, you should not need to access this unless you are deploying new modules.\n   * @internal\n   */\n  public get signer(): Signer | null {\n    return this._signer;\n  }\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  private _registry: RegistryModule | null = null;\n  private get registry(): RegistryModule | null {\n    return this._registry;\n  }\n  private set registry(value: RegistryModule | null) {\n    this._registry = value;\n  }\n\n  constructor(\n    providerOrNetwork: ValidProviderInput,\n    opts?: Partial<ISDKOptions>,\n  ) {\n    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);\n    this.options = {\n      ...this.defaultOptions,\n      ...opts,\n    };\n    this.storage = new IpfsStorage(this.options.ipfsGatewayUrl);\n  }\n\n  private updateModuleSigners() {\n    for (const [, _module] of this.modules) {\n      if (this.isReadOnly()) {\n        _module.clearSigner();\n      }\n      _module.setProviderOrSigner(this.providerOrSigner);\n    }\n  }\n\n  private async getChainID(): Promise<number> {\n    const provider = Provider.isProvider(this.providerOrSigner)\n      ? this.providerOrSigner\n      : this.providerOrSigner.provider;\n    invariant(provider, \"getRegistryAddress() -- No Provider\");\n\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  private async getRegistryAddress(): Promise<string | undefined> {\n    if (this.options.registryContractAddress) {\n      return this.options.registryContractAddress;\n    }\n    return getContractAddressByChainId(\n      (await this.getChainID()) as SUPPORTED_CHAIN_ID,\n    );\n  }\n  /**\n   *\n   * @param address - The contract address of the given Registry module.\n   * @returns The Registry Module.\n   * @internal\n   */\n  private async getRegistryModule(): Promise<RegistryModule> {\n    const address = await this.getRegistryAddress();\n    invariant(address, \"getRegistryModule() -- No Address\");\n    return (this.registry = this.getOrCreateModule(address, RegistryModule));\n  }\n\n  private getOrCreateModule<T extends AnyContract>(\n    address: string,\n    _Module: T,\n  ): C.Instance<T> {\n    if (this.modules.has(address)) {\n      return this.modules.get(address) as C.Instance<T>;\n    }\n    const _newModule = new _Module(\n      this.providerOrSigner,\n      address,\n      this.options,\n      this,\n    );\n    this.modules.set(address, _newModule);\n    return _newModule as C.Instance<T>;\n  }\n\n  /**\n   * you should not need this unless you are creating new modules\n   * @returns the active registry module forwarder address\n   * @internal\n   */\n  public async getForwarderAddress(): Promise<string> {\n    return await (\n      this.registry || (await this.getRegistryModule())\n    ).readOnlyContract.forwarder();\n  }\n\n  /**\n   * Call this to get the current apps.\n   * @returns All currently registered apps for the connected wallet\n   */\n  public async getApps(): Promise<IAppModule[]> {\n    return (\n      this.registry || (await this.getRegistryModule())\n    ).getProtocolContracts();\n  }\n\n  /**\n   * Call this to create a new app\n   * @param metadata - metadata URI or a JSON object\n   * @returns The transaction receipt\n   */\n  public async createApp(\n    metadata: MetadataURIOrObject,\n  ): Promise<ContractReceipt> {\n    const registryContract = (this.registry || (await this.getRegistryModule()))\n      .contract;\n    const gasPrice = await this.getGasPrice();\n    const txOpts: Record<string, any> = {};\n    // could technically be `0` so simple falsy check does not suffice\n    if (typeof gasPrice === \"number\") {\n      txOpts.gasPrice = parseUnits(gasPrice.toString(), \"gwei\");\n    }\n\n    const uri = await uploadMetadata(\n      metadata,\n      registryContract.address,\n      (await this.signer?.getAddress()) || undefined,\n    );\n\n    const txn = await registryContract.deployProtocol(uri, txOpts);\n    return await txn.wait();\n  }\n\n  /**\n   *\n   * @param speed - what speed to prefer, default: \"fastest\"\n   * @param maxGas - how much gas to use at most, default: 100\n   * @returns the optiomal gas price\n   */\n  public async getGasPrice(\n    speed?: string,\n    maxGasGwei?: number,\n  ): Promise<number | null> {\n    const _speed = speed ? speed : this.options.gasSpeed;\n    const _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;\n    return await getGasPriceForChain(await this.getChainID(), _speed, _maxGas);\n  }\n\n  /**\n   *\n   * @param providerOrSignerOrNetwork - A valid \"ethers\" Provider, Signer or a Network address to create a Provider with.\n   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.\n   */\n  public setProviderOrSigner(providerOrSignerOrNetwork: ValidProviderInput) {\n    if (\n      Provider.isProvider(providerOrSignerOrNetwork) ||\n      Signer.isSigner(providerOrSignerOrNetwork)\n    ) {\n      // sdk instantiated with a provider / signer\n      this.providerOrSigner = providerOrSignerOrNetwork;\n    } else {\n      // sdk instantiated with a network name / network url\n      this.providerOrSigner = ethers.getDefaultProvider(\n        providerOrSignerOrNetwork,\n      );\n    }\n    // if we're setting a signer then also update that\n    if (Signer.isSigner(providerOrSignerOrNetwork)) {\n      this.signer = providerOrSignerOrNetwork;\n    } else {\n      this.signer = null;\n    }\n    this.updateModuleSigners();\n    return this.providerOrSigner;\n  }\n\n  /**\n   *\n   * @public\n   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid \"Signer.\")\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @public\n   * @returns The contract metadata for the given contract address.\n   */\n  public async getContractMetadata(\n    address: string,\n  ): Promise<ModuleMetadataNoType> {\n    return {\n      ...(await getContractMetadata(\n        this.providerOrSigner,\n        address,\n        this.options.ipfsGatewayUrl,\n      )),\n      address,\n    };\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given App module.\n   * @returns The App Module.\n   */\n  public getAppModule(address: string): AppModule {\n    return this.getOrCreateModule(address, AppModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given NFT module.\n   * @returns The NFT Module.\n   */\n  public getNFTModule(address: string): NFTModule {\n    return this.getOrCreateModule(address, NFTModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Collection module.\n   * @returns The Bundle Module.\n   * @deprecated Use the new {@link ThirdwebSDK.getBundleModule} function instead.\n   */\n  public getCollectionModule(address: string): CollectionModule {\n    return this.getBundleModule(address);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Bundle module.\n   * @returns The Bundle Module.\n   */\n  public getBundleModule(address: string): BundleModule {\n    return this.getOrCreateModule(address, BundleModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Pack module.\n   * @returns The Pack Module.\n   */\n  public getPackModule(address: string): PackModule {\n    return this.getOrCreateModule(address, PackModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Currency module.\n   * @returns The Currency Module.\n   *\n   * @deprecated - see {@link TokenModule}\n   */\n  public getCurrencyModule(address: string): CurrencyModule {\n    return this.getOrCreateModule(address, CurrencyModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Token module.\n   * @returns The Token Module.\n   */\n  public getTokenModule(address: string): TokenModule {\n    return this.getOrCreateModule(address, TokenModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Datastore module.\n   * @returns The Datastore Module.\n   */\n  public getDatastoreModule(address: string): DatastoreModule {\n    return this.getOrCreateModule(address, DatastoreModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Market module.\n   * @returns The Market Module.\n   */\n  public getMarketModule(address: string): MarketModule {\n    return this.getOrCreateModule(address, MarketModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Drop module.\n   * @returns The Drop Module.\n   */\n  public getDropModule(address: string): DropModule {\n    return this.getOrCreateModule(address, DropModule);\n  }\n\n  /**\n   * @beta\n   *\n   * @param address - The contract address of the given BundleDrop module.\n   * @returns The Drop Module.\n   */\n  public getBundleDropModule(address: string): BundleDropModule {\n    return this.getOrCreateModule(address, BundleDropModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Royalty module.\n   * @returns The Splits Module.\n   */\n  public getSplitsModule(address: string): SplitsModule {\n    return this.getOrCreateModule(address, SplitsModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Vote module.\n   * @returns The Vote Module.\n   */\n  public getVoteModule(address: string): VoteModule {\n    return this.getOrCreateModule(address, VoteModule);\n  }\n\n  /**\n   * Used for SDK that requires js bridging like Unity SDK.\n   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.\n   *\n   * @internal\n   * @param route - sdk execution route\n   * @param payload - request arguments for the function\n   * @returns\n   */\n  public invokeRoute(route: string, payload: Record<string, any>) {\n    const parts = route.split(\".\");\n\n    if (parts.length > 0 && parts[0] === \"thirdweb\") {\n      if (parts.length === 4) {\n        // thirdweb.module_name.address.function_name\n        const moduleName = parts[1];\n        const moduleAddress = parts[2];\n        const funcName = parts[3];\n        return (this.getModuleByName(moduleName, moduleAddress) as any)[\n          funcName\n        ](...(payload.arguments || []));\n      } else if (parts.length === 3) {\n        // reserved for: thirdweb.bridge.function_name\n        throw new Error(\"reserved for thirdweb.bridge.function_name\");\n      } else if (parts.length === 2) {\n        // main sdk functions: thirdweb.function_name\n        const funcName = parts[1];\n        return (this as any)[funcName](...(payload.arguments || []));\n      }\n    }\n\n    throw new Error(\"uknown route\");\n  }\n\n  // used for invoke route for unity sdk.\n  private getModuleByName(name: string, address: string) {\n    if (name === \"currency\") {\n      return this.getCurrencyModule(address);\n    } else if (name === \"nft\") {\n      return this.getNFTModule(address);\n    } else if (name === \"market\") {\n      return this.getMarketModule(address);\n    } else if (name === \"bundle\" || name === \"collection\") {\n      return this.getCollectionModule(address);\n    } else if (name === \"drop\") {\n      return this.getDropModule(address);\n    } else if (name === \"splits\") {\n      return this.getSplitsModule(address);\n    } else if (name === \"pack\") {\n      return this.getPackModule(address);\n    } else if (name === \"datastore\") {\n      return this.getDatastoreModule(address);\n    } else if (name === \"app\" || name === \"project\") {\n      return this.getAppModule(address);\n    }\n    throw new Error(\"unsupported module\");\n  }\n\n  private async defaultRelayerSendFunction(\n    message: ForwardRequestMessage | PermitRequestMessage,\n    signature: BytesLike,\n  ): Promise<string> {\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((message as PermitRequestMessage)?.owner) {\n      messageType = \"permit\";\n    }\n\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: messageType,\n    });\n\n    // console.log(\"POST\", this.options.transactionRelayerUrl, body);\n    const response = await fetch(this.options.transactionRelayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n\n  public async createSnapshot(leafs: string[]): Promise<SnapshotInfo> {\n    const hasDuplicates = new Set(leafs).size < leafs.length;\n    if (hasDuplicates) {\n      throw new DuplicateLeafsError();\n    }\n\n    const { default: keccak256 } = await import(\"keccak256\");\n\n    const hashedLeafs = leafs.map((l) => keccak256(l));\n    const tree = new MerkleTree(hashedLeafs, keccak256, {\n      sort: true,\n    });\n\n    const snapshot: Snapshot = {\n      merkleRoot: tree.getHexRoot(),\n      claims: leafs.map((l): ClaimProof => {\n        const proof = tree.getHexProof(keccak256(l));\n        return {\n          address: l,\n          proof,\n        };\n      }),\n    };\n\n    const serializedSnapshot = JSON.stringify(\n      this._jsonConvert.serializeObject(snapshot, Snapshot),\n    );\n    const uri = await this.storage.upload(serializedSnapshot);\n\n    return {\n      merkleRoot: tree.getHexRoot(),\n      snapshotUri: uri,\n      snapshot,\n    };\n  }\n\n  /**\n   * Accessor for the storage instance used by the SDK\n   *\n   * @returns - The Storage instance.\n   */\n  public getStorage(): IStorage {\n    return this.storage;\n  }\n\n  /**\n   * Allows you to override the storage used across the SDK.\n   *\n   * @param storage - The Storage instance to use.\n   */\n  public overrideStorage(storage: IStorage): void {\n    this.storage = storage;\n  }\n}\n\n/**\n * Deprecated, please use ThirdwebSDK instead.\n * @public\n * @deprecated use ThirdwebSDK instead\n */\nexport const NFTLabsSDK = ThirdwebSDK;\n","/**\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\n *\n * @remarks\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\n *\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\n *\n *\n * @example\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\n *\n * 1. Install the sdk\n * ```shell\n * npm install @3rdweb/sdk\n * ```\n *\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\n *\n * 3. Write the tiniest amount of code!\n * ```typescript\n *  1 | import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *  2 | import type { NFTModule, NFTMetadataOwner } from \"@3rdweb/sdk\";\n *  3 |\n *  5 | const contractAddress = \"0x...\"; // your contract address from step 2\n *  6 |\n *  7 | const sdk = new ThirdwebSDK();\n *  8 |\n *  9 | const nftModule: NFTModule = sdk.getNftModule(contractAddress);\n * 10 |\n * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();\n * 12 |\n * 13 | console.log(nftListWithOwnerAddress);\n * ```\n * ```\n * Output\n * => [\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       ...\n *    ]\n * ```\n *\n * @packageDocumentation\n */\n\nimport fetch from \"node-fetch\";\n\nexport * from \"./common\";\nexport type { InvariantError } from \"./common/invariant\";\nexport * from \"./core\";\nexport type { Module, ModuleWithRoles } from \"./core/module\";\nexport type { IAppModule } from \"./core/registry\";\nexport * from \"./core/types\";\nexport * from \"./modules\";\nexport * from \"./types\";\nexport * from \"./enums\";\nexport * from \"./factories\";\nexport * from \"./interfaces\";\nexport * from \"./utils\";\n\nif (!globalThis.fetch) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  globalThis.fetch = fetch;\n}\n","import { MerkleTree } from \"merkletreejs\";\nimport { SHA256 } from \"crypto-js\";\n\n/**\n * Convenience function to generate a merkle root from a list of strings.\n *\n * @param items - Any list of strings that will be hashed and added to the tree.\n * @returns - A merkle root (in hexadecimal).\n */\nexport function generateRoot(items: string[]): string {\n  const tree = new MerkleTree(items, SHA256, {\n    hashLeaves: true,\n    sortLeaves: true,\n  });\n  return tree.getRoot().toString(\"hex\");\n}\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","NotFoundError","_Error","InvalidAddressError","address","_Error2","UploadError","message","_Error3","FetchError","innerError","DuplicateLeafsError","_Error5","replaceIpfsWithGateway","ipfsUrl","gatewayUrl","endsWith","replace","uploadToIPFS","data","contractAddress","signerAddress","headers","formData","FormData","append","fetch","body","res","json","IpfsUri","uploadMetadata","metadata","_fileHandler","shouldUpload","val","File","Buffer","JSON","stringify","require","InterfaceId_IERC721","arrayify","InterfaceId_IERC1155","contractUriABI","inputs","outputs","internalType","stateMutability","getContractMetadata","provider","ipfsGatewayUrl","contract","Contract","contractURI","uri","meta","entity","image","text","isContract","getCode","ChainId","NATIVE_TOKEN_ADDRESS","getCurrencyMetadata","providerOrSigner","asset","toLowerCase","AddressZero","symbol","decimals","erc20","ERC20__factory","connect","all","getCurrencyValue","price","toString","displayValue","formatUnits","ModuleType","SUPPORTED_CHAIN_IDS","Mainnet","Rinkeby","Polygon","Mumbai","Fantom","FantomTestnet","Avalanche","AvalancheFujiTestnet","ChainlinkVrf","vrfCoordinator","linkTokenAddress","keyHash","fees","ethers","utils","parseEther","Hardhat","tokenUriABI","getMetadataWithoutContract","tokenId","getTokenMetadata","getTokenUri","id","console","tokenURI","RolesMap","admin","minter","pauser","transfer","editor","lister","_role","getRoleHash","role","hexZeroPad","getGasStationUrl","chainId","getGasPriceForChain","speed","maxGasPrice","gasStationUrl","gas","Math","min","CONTRACT_ADDRESSES","registry","NATIVE_TOKENS","wrapped","getContractAddressByChainId","getNativeTokenByChainId","invariant","condition","DEFAULT_BLOCK_TIMES_FALLBACK","secondsBetweenBlocks","synced","timeInEpochSeconds","secondsUntil","floor","Date","now","getNetwork","includes","estimateSecondsBetweenBlocks","blockTimes","getBlock","latest","number","current","timestamp","sum","reduce","a","latestBlock","log","blocksUntil","ceil","ForwardRequest","_nonces","_noncesSyncTimestamp","getAndIncrementNonce","forwarder","shouldSync","getNonce","nonce","BigNumber","from","add","Module","options","sdk","_providerOrSigner","_signer","readOnlyContract","setProviderOrSigner","connectContract","readOnlyRpcUrl","getDefaultProvider","exists","getProvider","getMetadata","getModuleType","setMetadata","sendTransaction","Signer","isSigner","signer","clearSigner","getProviderOrSigner","getSigner","hasValidSigner","getSignerAddress","getAddress","getChainID","getCallOverrides","gasSpeed","maxGasPriceInGwei","gasPriceChain","gasPrice","parseUnits","args","callOverrides","sendContractTransaction","transactionRelayerUrl","sendGaslessTransaction","sendAndWaitForTransaction","functions","tx","wait","to","encodeFunctionData","Forwarder__factory","forwarderAddress","transactionRelayerForwarderAddress","estimateGas","gasEstimate","mul","lt","domain","version","verifyingContract","types","spender","amount","signERC2612Permit","permit","signature","r","s","substring","v","_signer$provider","_signer$provider$prov","isWalletConnect","payload","_TypedDataEncoder","getPayload","send","_signTypedData","transactionRelayerSendFunction","txHash","waitForTransaction","parseEventLogs","eventName","logs","decodeEventLog","topics","e","ModuleWithRoles","_Module","getModuleRoles","getRoleMembers","roles","roleHash","getRoleMemberCount","count","toNumber","Array","map","getRoleMember","getAllRoleMembers","setAllRoleMembers","rolesWithAddresses","every","_this","currentRoles","encoded","sort","currentAddresses","toAdd","addresses","filter","toRemove","getRevokeRoleFunctionName","revokeAllRolesFromAddress","rolesRemoved","_currentRoles$role","_this2","grantRole","revokeRole","revokeFunctionName","prepareMetadata","_this3","getStorage","upload","prepareBatchMetadata","m","_this4","CommonModuleMetadata","description","externalLink","__decorate","JsonProperty","String","PropertyConvertingMode","IGNORE_NULLABLE","JsonObject","BundleModuleMetadata","sellerFeeBasisPoints","feeRecipient","Number","CurrencyModuleMetadata","DatastoreModuleMetadata","DropModuleMetadata","primarySaleFeeBasisPoints","maxSupply","primarySaleRecipientAddress","baseTokenUri","MarketModuleMetadata","marketFeeBasisPoints","NftModuleMetadata","PackModuleMetadata","SplitsModuleMetadata","recipientSplits","VoteModuleMetadata","proposalStartWaitTimeInSeconds","proposalVotingTimeInSeconds","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","minimumNumberOfTokensNeededToPropose","TokenModule","Coin__factory","moduleType","get","getValue","totalSupply","balance","balanceOf","allowance","allowanceOf","owner","getVoteBalance","getVoteBalanceOf","account","getVotes","getDelegation","getDelegationOf","delegates","delegateTo","delegateeAddress","setAllowance","mint","mintTo","mintBatchTo","getAllHolderBalances","queryFilter","filters","Transfer","txns","b","balances","item","sub","burn","burnFrom","transferFrom","setModuleMetadata","setRestrictedTransfer","restricted","transferBatch","transferFromBatch","fromAddress","CURRENCY","CurrencyModule","AppModule","jsonConvert","JsonConvert","ProtocolControl__factory","getModuleAddress","getAllModulesOfType","getNFTAddress","NFT","getBundleAddress","BUNDLE","getPackAddress","PACK","getCurrencyAddress","getMarketAddress","MARKET","getDropAddress","DROP","getDatastoreAddress","DATASTORE","getRoyaltyTreasury","getAllContractMetadata","metadatas","d","getPackModules","getNFTModules","getCollectionModules","getBundleModules","getCurrencyModules","getDatastoreModules","getMarketModules","getDropModules","getAllModuleMetadata","filterByModuleType","moduleTypesToGet","TOKEN","BUNDLE_DROP","VOTE","moduleAddresses","acc","curr","concat","setRoyaltyTreasury","treasury","setModuleRoyaltyTreasury","moduleAddress","withdrawFunds","currency","_prepareMetadata","_deployModule","factory","getGasPrice","txOpts","ContractFactory","abi","bytecode","deploy","deployed","addModule","addModuleTx","deployBundleModule","serializedMetadata","serializeObject","metadataUri","COLLECTION","getForwarderAddress","NFTCollection__factory","getCollectionModule","deploySplitsModule","SPLITS","shares","Royalty__factory","getSplitsModule","deployNftModule","NFT__factory","getNFTModule","deployCurrencyModule","getCurrencyModule","deployTokenModule","getTokenModule","deployMarketModule","Market__factory","getMarketModule","deployPackModule","Pack__factory","getPackModule","deployDropModule","isAddress","LazyNFT__factory","getDropModule","deployBundleDropModule","nativeTokenWrapperAddress","LazyMintERC1155__factory","getBundleDropModule","deployDatastoreModule","DataStore__factory","getDatastoreModule","deployVoteModule","votingTimeInBlocks","timeBetweenBlocks","callStatic","getPastTotalSupply","VotingGovernor__factory","getVoteModule","getBalance","balanceOfToken","tokenAddress","BundleModule","creator","supply","ownedByAddress","getAll","nextTokenId","maxId","isApproved","operator","assetContract","assetId","isApprovedForAll","ERC721__factory","approved","getApproved","isTokenApproved","setApproval","createBatch","metadataWithSupply","createAndMintBatch","createAndMint","uris","supplies","event","receipt","tokenIds","createWithToken","tokenContract","tokenAmount","token","increaseAllowance","createWithErc20","createWithNFT","setApprovalForAll","createWithERC721","mintBatch","ids","amounts","burnBatch","burnBatchFrom","transferBatchFrom","setRoyaltyBps","seller_fee_basis_points","getOwned","_address","balanceOfBatch","fill","ownedBalances","gt","getRoyaltyBps","royaltyBps","getRoyaltyRecipientAddress","fee_recipient","ClaimConditionPhase","createSnapshotFunc","_conditionStartTime","_currencyAddress","_price","_maxQuantity","_quantityLimitPerTransaction","constants","MaxUint256","_merkleRootHash","_merkleCondition","createSnapshot","_waitInSeconds","setPrice","setConditionStartTime","when","getTime","setMaxQuantity","maxQuantity","setMaxQuantityPerTransaction","max","gte","setMerkleRoot","root","setSnapshot","getSnapshot","buildPublicClaimCondition","startTimestamp","pricePerToken","maxMintSupply","waitTimeSecondsLimitPerTransaction","quantityLimitPerTransaction","currentMintSupply","merkleRoot","setWaitTimeBetweenClaims","waitInSeconds","ClaimConditionFactory","phases","buildConditions","c","eq","fromPublicClaimConditions","conditions","phase","newClaimPhase","startTime","maxQuantityPerTransaction","removeClaimPhase","index","cleared","splice","allSnapshots","p","ClaimProof","proof","Snapshot","claims","BundleDropModule","storage","BundleDrop__factory","transformResultToClaimCondition","pm","cv","maxClaimableSupply","supplyClaimed","availableSupply","waitTimeInSecondsBetweenClaims","currencyContract","currencyMetadata","nextTokenIdToMint","getActiveClaimCondition","getIndexOfActiveCondition","getClaimConditionAtIndex","getAllClaimConditions","claimConditions","totalConditionCount","getSaleRecipient","saleRecipient","defaultSaleRecipient","lazyMintBatch","t","_this5","startFileNumber","uploadMetadataBatch","baseUri","endingIndex","lte","setSaleRecipient","recipient","setDefaultSaleRecipient","setClaimCondition","merkleInfo","snapshotUri","getClaimConditionFactory","bind","setPublicClaimConditions","_conditions","claim","quantity","proofs","mintCondition","overrides","addressToClaim","startsWith","merkle","snapshot","snapshotData","deserializeObject","parse","find","totalPrice","getClaimConditionsFactory","getAllClaimerAddresses","ClaimedTokens","Set","claimer","canClaim","getClaimerProofs","DatastoreModule","getUint","setUint","DropModule","Drop__factory","ownerOf","queryParams","start","getAllUnclaimed","nextMintTokenId","unmintedId","getAllClaimed","indices","tokenOfOwnerByIndex","getActiveMintCondition","getLastStartedMintConditionIndex","mintConditions","mc","getAllMintConditions","maxTotalSupply","totalUnclaimedSupply","totalClaimedSupply","lazyMint","pinToIpfs","files","uploadBatch","_this6","lazyMintAmount","setMintConditions","setClaimConditions","getMintConditionsFactory","setPublicMintConditions","startTimestampInSeconds","startingIndex","startTokenId","_this7","setBaseTokenUri","setMaxTotalSupply","MarketModule","transformResultToListing","listing","listingId","seller","tokenMetadata","saleStart","saleEnd","MAX_SAFE_INTEGER","getListing","getAllListings","listings","getListingsByAsset","getListingsBySeller","getListingsByAssetContract","l","filterSeller","filterTokenContract","filterTokenId","getMarketFeeBps","marketFeeBps","list","tokensPerBuyer","secondsUntilStart","secondsUntilEnd","erc165","ERC165__factory","supportsInterface","ERC1155__factory","unlistAll","unlist","buy","setMarketFeeBps","fee","NFTModule","resolveFullUrl","getWithOwner","getAllWithOwner","PackModule","open","packId","requestId","opener","once","PackOpenFulfilled","_packId","_opener","_requestId","rewardContract","rewardIds","rewardId","getPack","currentSupply","openStart","getNFTs","getPackWithRewards","packReward","source","reward","amountsPacked","assets","packParams","defaultAbiCoder","encode","secondsUntilOpenStart","rewardsPerOpen","safeBatchTransferFrom","events","_receipt$events","_event$args","getLinkBalance","chainlink","depositLink","withdrawLink","ClaimConditionType","ProposalState","VoteType","SplitsModule","getAllRecipients","recipients","payee","recipientAddress","getRecipientSplitPercentage","_context2","totalShares","splitPercentage","div","walletBalance","totalReceived","_pendingPayment","walletAddress","withdraw","alreadyReleased","addressReceived","totalRoyaltyAvailable","withdrawToken","distribute","distributeToken","VoteModule","settings","quorumNumerator","proposalThreshold","proposalTokenThreshold","votingTokenMetadata","proposalId","ensureExists","proposals","ProposalCreated","results","states","proposalVotes","votes","Against","label","againstVotes","For","forVotes","Abstain","abstainVotes","j","targets","calldatas","proposer","startBlock","endBlock","executions","exec","toAddress","nativeTokenValue","transactionData","propose","tos","datas","vote","voteType","reason","hasVoted","execute","proposal","descriptionHash","canExecute","IpfsStorage","thirdwebIpfsServerUrl","status","fileStartNumber","getUploadToken","file","filepath","window","Blob","Authorization","ok","IpfsHash","hash","uploadFileHandler","finalMetadata","ipfsHash","RegistryModule","Registry__factory","getProtocolContracts","deployer","getProtocolControlCount","versions","getProtocolControl","ThirdwebSDK","providerOrNetwork","opts","defaultOptions","registryContractAddress","defaultRelayerSendFunction","modules","Map","_jsonConvert","_registry","updateModuleSigners","_module","isReadOnly","Provider","isProvider","getRegistryAddress","getRegistryModule","getOrCreateModule","has","_newModule","set","getApps","createApp","registryContract","_this$signer","deployProtocol","txn","maxGasGwei","_speed","_maxGas","providerOrSignerOrNetwork","getAppModule","getBundleModule","invokeRoute","route","parts","split","funcName","getModuleByName","arguments","messageType","request","response","leafs","size","keccak256","hashedLeafs","tree","MerkleTree","getHexRoot","getHexProof","serializedSnapshot","overrideStorage","NFTLabsSDK","$enum","getKeyOrDefault","moduleName","getValueOrDefault","toUpperCase","items","SHA256","hashLeaves","sortLeaves","getRoot"],"mappings":"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"}