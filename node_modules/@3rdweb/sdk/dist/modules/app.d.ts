import { ProtocolControl } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber } from "ethers";
import { CurrencyValue, Role } from "../common";
import { ModuleType } from "../common/module-type";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
import IAppModule from "../interfaces/IAppModule";
import BundleDropModuleMetadata from "../types/module-deployments/BundleDropModuleMetadata";
import BundleModuleMetadata from "../types/module-deployments/BundleModuleMetadata";
import CurrencyModuleMetadata from "../types/module-deployments/CurrencyModuleMetadata";
import DatastoreModuleMetadata from "../types/module-deployments/DatastoreModuleMetadata";
import DropModuleMetadata from "../types/module-deployments/DropModuleMetadata";
import MarketModuleMetadata from "../types/module-deployments/MarketModuleMetadata";
import NftModuleMetadata from "../types/module-deployments/NftModuleMetadata";
import PackModuleMetadata from "../types/module-deployments/PackModuleMetadata";
import SplitsModuleMetadata from "../types/module-deployments/SplitsModuleMetadata";
import VoteModuleMetadata from "../types/module-deployments/VoteModuleMetadata";
import TokenModuleMetadata from "../types/module-deployments/TokenModuleMetadata";
import { ModuleMetadata, ModuleMetadataNoType } from "../types/ModuleMetadata";
import { BundleDropModule } from "./bundleDrop";
import { CollectionModule } from "./collection";
import { DatastoreModule } from "./datastore";
import { DropModule } from "./drop";
import { MarketModule } from "./market";
import { NFTModule } from "./nft";
import { PackModule } from "./pack";
import { SplitsModule } from "./royalty";
import { CurrencyModule, TokenModule } from "./token";
import { VoteModule } from "./vote";
/**
 * Access this module by calling {@link ThirdwebSDK.getAppModule}
 * @public
 */
export declare class AppModule extends ModuleWithRoles<ProtocolControl> implements IAppModule {
    private jsonConvert;
    static roles: readonly ["admin"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * The internal module type for the app module.
     * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.
     * @internal
     * @readonly
     */
    private moduleType;
    /**
     * @internal
     */
    protected connectContract(): ProtocolControl;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    /**
     * @internal
     *
     */
    private getModuleAddress;
    private getNFTAddress;
    private getBundleAddress;
    private getPackAddress;
    private getCurrencyAddress;
    private getMarketAddress;
    private getDropAddress;
    private getDatastoreAddress;
    getRoyaltyTreasury(address?: string): Promise<string>;
    /**
     * @internal
     * @param addresses - The addresses of the modules to get metadata for.
     */
    getAllContractMetadata(addresses: string[]): Promise<ModuleMetadataNoType[]>;
    /**
     * Method to get a list of pack module metadata.
     * @returns A promise of an array of Pack modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getPackModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of NFT module metadata.
     * @returns A promise of an array of NFT modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getNFTModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of Bundle module metadata.
     * @returns A promise of an array of Bundle modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getCollectionModules(): Promise<ModuleMetadata[]>;
    getBundleModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of Currency module metadata.
     * @returns A promise of an array of Currency modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getCurrencyModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of Datastore module metadata.
     * @alpha
     * @returns A promise of an array of Datastore modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getDatastoreModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of Market module metadata.
     * @returns A promise of an array of Market modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getMarketModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of Drop module metadata.
     * @returns A promise of an array of Drop modules.
     * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
     */
    getDropModules(): Promise<ModuleMetadata[]>;
    /**
     * Method to get a list of all module metadata on a given app.
     * @public
     * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.
     * @returns Array of module metadata
     */
    getAllModuleMetadata(filterByModuleType?: ModuleType[]): Promise<ModuleMetadata[]>;
    /**
     * @deprecated - Use setMetadata() instead
     */
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    setRoyaltyTreasury(treasury: string): Promise<TransactionReceipt>;
    setModuleRoyaltyTreasury(moduleAddress: string, treasury: string): Promise<TransactionReceipt>;
    withdrawFunds(to: string, currency: string): Promise<TransactionReceipt>;
    /**
     * Helper method that handles `image` property uploads if its a file
     *
     * @param metadata - The metadata of the module to be deployed
     * @returns - The sanitized metadata with an uploaded image ipfs hash
     */
    private _prepareMetadata;
    /**
     * Helper method that deploys a module and returns its address
     *
     * @internal
     *
     * @param moduleType - The ModuleType to deploy
     * @param args - Constructor arguments for the module
     * @param factory - The ABI factory used to call the `deploy` method
     * @returns The address of the deployed module
     */
    private _deployModule;
    /**
     * Deploys a collection module.
     *
     * @param metadata - Metadata about the module.
     * @returns A promise with the newly created module.
     */
    deployBundleModule(metadata: BundleModuleMetadata): Promise<CollectionModule>;
    /**
     * Deploys a Splits module
     *
     * @param metadata - The module metadata
     * @returns - The deployed splits module
     */
    deploySplitsModule(metadata: SplitsModuleMetadata): Promise<SplitsModule>;
    /**
     * Deploys a NFT module.
     *
     * @param metadata - The module metadata
     * @returns - The deployed NFT module
     */
    deployNftModule(metadata: NftModuleMetadata): Promise<NFTModule>;
    /**
     * Deploys a currency module.
     *
     * @param metadata - The module metadata
     * @returns - The deployed currency module
     */
    deployCurrencyModule(metadata: CurrencyModuleMetadata): Promise<CurrencyModule>;
    /**
     * Deploys a token module.
     *
     * @param metadata - The module metadata
     * @returns - The deployed currency module
     */
    deployTokenModule(metadata: TokenModuleMetadata): Promise<TokenModule>;
    /**
     * Deploys a Marketplace module
     *
     * @param metadata - The module metadata
     * @returns - The deployed Marketplace module
     */
    deployMarketModule(metadata: MarketModuleMetadata): Promise<MarketModule>;
    /**
     * Deploys a Pack module
     *
     * @param metadata - The module metadata
     * @returns - The deployed Pack module
     */
    deployPackModule(metadata: PackModuleMetadata): Promise<PackModule>;
    /**
     * Deploys a Drop module
     *
     * @param metadata - The module metadata
     * @returns - The deployed Drop module
     */
    deployDropModule(metadata: DropModuleMetadata): Promise<DropModule>;
    /**
     * Deploys a Bundle Drop module
     *
     * @param metadata - The module metadata
     * @returns - The deployed Bundle Drop module
     */
    deployBundleDropModule(metadata: BundleDropModuleMetadata): Promise<BundleDropModule>;
    /**
     * Deploys a Datastore module
     *
     * @alpha
     * @param metadata - The module metadata
     * @returns - The deployed Datastore module
     */
    deployDatastoreModule(metadata: DatastoreModuleMetadata): Promise<DatastoreModule>;
    /**
     * Deploys a Vote module
     *
     * @param metadata - The module metadata
     * @returns - The deployed vote module
     */
    deployVoteModule(metadata: VoteModuleMetadata): Promise<VoteModule>;
    /**
     * Check the balance of the project wallet in the native token of the chain
     *
     * @returns - The balance of the project in the native token of the chain
     */
    balance(): Promise<BigNumber>;
    /**
     * Check the balance of the project wallet in a particular
     * ERC20 token contract
     *
     * @returns - The balance of the project in the native token of the chain
     */
    balanceOfToken(tokenAddress: string): Promise<CurrencyValue>;
}
