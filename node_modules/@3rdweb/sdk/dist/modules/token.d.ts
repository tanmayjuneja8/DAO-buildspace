import { Coin } from "@3rdweb/contracts";
import { TransactionReceipt } from "@ethersproject/providers";
import { BigNumber, BigNumberish } from "ethers";
import { ModuleType, Role } from "../common";
import { Currency, CurrencyValue } from "../common/currency";
import { ModuleWithRoles } from "../core/module";
import { MetadataURIOrObject } from "../core/types";
export interface ITokenMintArgs {
    address: string;
    amount: BigNumberish;
}
export interface ITokenMintFromArgs extends ITokenMintArgs {
    fromAddress: string;
}
/**
 *
 * Access this module by calling {@link ThirdwebSDK.getTokenModule}
 * @public
 */
export declare class TokenModule extends ModuleWithRoles<Coin> {
    static moduleType: ModuleType;
    static roles: readonly ["admin", "minter", "pauser", "transfer"];
    /**
     * @override
     * @internal
     */
    protected getModuleRoles(): readonly Role[];
    /**
     * @internal
     */
    protected connectContract(): Coin;
    /**
     * @internal
     */
    protected getModuleType(): ModuleType;
    get(): Promise<Currency>;
    getValue(value: BigNumberish): Promise<CurrencyValue>;
    totalSupply(): Promise<BigNumber>;
    balance(): Promise<CurrencyValue>;
    balanceOf(address: string): Promise<CurrencyValue>;
    allowance(spender: string): Promise<BigNumber>;
    allowanceOf(owner: string, spender: string): Promise<BigNumber>;
    /**
     * Get your wallet voting power for the current checkpoints
     *
     * @returns the amount of voting power in tokens
     */
    getVoteBalance(): Promise<BigNumber>;
    getVoteBalanceOf(account: string): Promise<BigNumber>;
    /**
     * Get your voting delegatee address
     *
     * @returns the address of your vote delegatee
     */
    getDelegation(): Promise<string>;
    getDelegationOf(account: string): Promise<string>;
    /**
     * Lets you delegate your voting power to the delegateeAddress
     *
     * @param delegateeAddress - delegatee wallet address
     * @alpha
     */
    delegateTo(delegateeAddress: string): Promise<TransactionReceipt>;
    transfer(to: string, amount: BigNumberish): Promise<TransactionReceipt>;
    setAllowance(spender: string, amount: BigNumber): Promise<TransactionReceipt>;
    mint(amount: BigNumberish): Promise<void>;
    mintTo(to: string, amount: BigNumberish): Promise<void>;
    mintBatchTo(args: ITokenMintArgs[]): Promise<void>;
    /**
     * Lets you get a all token holders and their corresponding balances
     * @beta - This can be very slow for large numbers of token holders
     * @param queryParams - Optional query params
     * @returns - A JSON object of all token holders and their corresponding balances
     */
    getAllHolderBalances(): Promise<Record<string, BigNumber>>;
    burn(amount: BigNumberish): Promise<TransactionReceipt>;
    burnFrom(from: string, amount: BigNumberish): Promise<TransactionReceipt>;
    transferFrom(from: string, to: string, amount: BigNumberish): Promise<TransactionReceipt>;
    setModuleMetadata(metadata: MetadataURIOrObject): Promise<TransactionReceipt>;
    setRestrictedTransfer(restricted?: boolean): Promise<TransactionReceipt>;
    transferBatch(args: ITokenMintArgs[]): Promise<void>;
    transferFromBatch(args: ITokenMintFromArgs[]): Promise<void>;
}
/**
 * @deprecated - see {@link TokenModule}
 */
export declare class CurrencyModule extends TokenModule {
}
