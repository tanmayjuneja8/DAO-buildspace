/// <reference types="node" />
import { MetadataURIOrObject } from "../core/types";
import IStorage from "../interfaces/IStorage";
import FileOrBuffer from "../types/FileOrBuffer";
export default class IpfsStorage implements IStorage {
    private gatewayUrl;
    constructor(gatewayUrl: string);
    upload(data: string | FileOrBuffer, contractAddress?: string, signerAddress?: string): Promise<string>;
    uploadBatch(files: Buffer[] | string[] | FileOrBuffer[] | File[], contractAddress?: string, fileStartNumber?: number): Promise<string>;
    getUploadToken(contractAddress: string): Promise<string>;
    get(hash: string): Promise<string>;
    private uploadFileHandler;
    uploadMetadata(metadata: MetadataURIOrObject, contractAddress?: string, signerAddress?: string): Promise<string>;
    /**
     * @internal
     */
    uploadMetadataBatch(metadatas: MetadataURIOrObject[], contractAddress?: string, startFileNumber?: number): Promise<string>;
    /**
     * Resolves the full url for a file using the configured gateway
     *
     * @param ipfsHash - the ipfs:// uri
     * @returns - The fully formed IPFS url with the gateway url
     * @internal
     */
    resolveFullUrl(ipfsHash: string): string;
}
