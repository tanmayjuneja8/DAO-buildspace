import fetch$1 from 'node-fetch';
import { arrayify, hexZeroPad } from '@ethersproject/bytes';
import { Contract } from '@ethersproject/contracts';
import { ERC20__factory, Forwarder__factory, Coin__factory, ProtocolControl__factory, NFTCollection__factory, Royalty__factory, NFT__factory, Market__factory, Pack__factory, LazyNFT__factory, LazyMintERC1155__factory, DataStore__factory, VotingGovernor__factory, ERC721__factory, ERC1155__factory, ERC165__factory, Registry__factory } from '@3rdweb/contracts';
import { AddressZero } from '@ethersproject/constants';
import { formatUnits, parseUnits } from '@ethersproject/units';
import { ethers, BigNumber, Signer } from 'ethers';
import { $enum } from 'ts-enum-util';
import { Provider } from '@ethersproject/providers';
import { JsonProperty, PropertyConvertingMode, JsonObject, JsonConvert } from 'json2typescript';
import MerkleTree, { MerkleTree as MerkleTree$1 } from 'merkletreejs';
import { isAddress } from 'ethers/lib/utils';
import { signERC2612Permit } from 'eth-permit';
import { __decorate } from 'tslib';
import { BigNumber as BigNumber$1 } from '@ethersproject/bignumber';
import { isAddress as isAddress$1 } from '@ethersproject/address';
import { SHA256 } from 'crypto-js';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

/**
 * Error that may get thrown if IPFS returns nothing for a given uri.
 * @public
 */
var NotFoundError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(NotFoundError, _Error);

  /** @internal */
  function NotFoundError() {
    return _Error.call(this, "NOT_FOUND") || this;
  }

  return NotFoundError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error that may get thrown if an invalid address was passed
 * @public
 */

var InvalidAddressError = /*#__PURE__*/function (_Error2) {
  _inheritsLoose(InvalidAddressError, _Error2);

  /** @internal */
  function InvalidAddressError(address) {
    return _Error2.call(this, address ? "'" + address + "' is an invalid address" : "Invalid address passed") || this;
  }

  return InvalidAddressError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var UploadError = /*#__PURE__*/function (_Error3) {
  _inheritsLoose(UploadError, _Error3);

  /** @internal */
  function UploadError(message) {
    return _Error3.call(this, "UPLOAD_FAILED: " + message) || this;
  }

  return UploadError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Thrown when data fails to fetch from storage.
 */

var FetchError = /*#__PURE__*/function (_Error4) {
  _inheritsLoose(FetchError, _Error4);

  /** @internal */
  function FetchError(message, innerError) {
    var _this;

    _this = _Error4.call(this, "FETCH_FAILED: " + message) || this;
    _this.innerError = void 0;
    _this.innerError = innerError;
    return _this;
  }

  return FetchError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Thrown when attempting to create a snapshot with duplicate leafs
 */

var DuplicateLeafsError = /*#__PURE__*/function (_Error5) {
  _inheritsLoose(DuplicateLeafsError, _Error5);

  function DuplicateLeafsError(message) {
    return _Error5.call(this, "DUPLICATE_LEAFS" + (message ? " : " + message : "")) || this;
  }

  return DuplicateLeafsError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

if (!globalThis.FormData) {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  globalThis.FormData = /*#__PURE__*/require("form-data");
}

if (!globalThis.File) {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  globalThis.File = /*#__PURE__*/require("@web-std/file").File;
}
/**
 *
 * @param ipfsUrl - the ipfs:// uri
 * @param gatewayUrl - the gateway url
 * @returns the fully formed IPFS url
 * @internal
 */


function replaceIpfsWithGateway(ipfsUrl, gatewayUrl) {
  if (!ipfsUrl || typeof ipfsUrl !== "string") {
    return "";
  }

  if (!gatewayUrl.endsWith("/")) {
    gatewayUrl = gatewayUrl + "/";
  }

  return ipfsUrl.replace("ipfs://", gatewayUrl);
}
/**
 * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.
 * @param data - stringified JSON || File
 * @param contractAddress - (Optional) the contract address to associate the data with
 * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file
 * @returns The `ipfs://<hash>` uri of the uploaded file
 * @public
 */

function uploadToIPFS(_x, _x2, _x3) {
  return _uploadToIPFS.apply(this, arguments);
}
/**
 * @internal
 */

function _uploadToIPFS() {
  _uploadToIPFS = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, contractAddress, signerAddress) {
    var headers, formData, res, body;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            headers = {
              "X-App-Name": "CONSOLE-TS-SDK-" + contractAddress,
              "X-Public-Address": signerAddress || ""
            };
            formData = new FormData();
            formData.append("file", data);
            _context.next = 5;
            return fetch("https://upload.nftlabs.co/upload", {
              method: "POST",
              body: formData,
              headers: headers
            });

          case 5:
            res = _context.sent;
            _context.prev = 6;
            _context.next = 9;
            return res.json();

          case 9:
            body = _context.sent;
            return _context.abrupt("return", body.IpfsUri);

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](6);
            throw new UploadError("Failed to upload to IPFS: " + _context.t0);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 13]]);
  }));
  return _uploadToIPFS.apply(this, arguments);
}

function uploadMetadata(_x4, _x5, _x6) {
  return _uploadMetadata.apply(this, arguments);
}

function _uploadMetadata() {
  _uploadMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(metadata, contractAddress, signerAddress) {
    var _fileHandler, _fileHandler2;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _fileHandler2 = function _fileHandler4() {
              _fileHandler2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(object) {
                var keys, key, val, shouldUpload;
                return runtime_1.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        keys = Object.keys(object);
                        _context2.t0 = runtime_1.keys(keys);

                      case 2:
                        if ((_context2.t1 = _context2.t0()).done) {
                          _context2.next = 18;
                          break;
                        }

                        key = _context2.t1.value;
                        val = object[keys[key]];
                        shouldUpload = val instanceof File || val instanceof Buffer;

                        if (!shouldUpload) {
                          _context2.next = 10;
                          break;
                        }

                        _context2.next = 9;
                        return uploadToIPFS(object[keys[key]], contractAddress, signerAddress);

                      case 9:
                        object[keys[key]] = _context2.sent;

                      case 10:
                        if (!(shouldUpload && typeof object[keys[key]] !== "string")) {
                          _context2.next = 12;
                          break;
                        }

                        throw new Error("Upload to IPFS failed");

                      case 12:
                        if (!(typeof val === "object")) {
                          _context2.next = 16;
                          break;
                        }

                        _context2.next = 15;
                        return _fileHandler(object[keys[key]]);

                      case 15:
                        object[keys[key]] = _context2.sent;

                      case 16:
                        _context2.next = 2;
                        break;

                      case 18:
                        return _context2.abrupt("return", object);

                      case 19:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
              return _fileHandler2.apply(this, arguments);
            };

            _fileHandler = function _fileHandler3(_x7) {
              return _fileHandler2.apply(this, arguments);
            };

            if (!(typeof metadata === "string")) {
              _context3.next = 4;
              break;
            }

            return _context3.abrupt("return", metadata);

          case 4:
            _context3.next = 6;
            return _fileHandler(metadata);

          case 6:
            metadata = _context3.sent;
            _context3.next = 9;
            return uploadToIPFS(JSON.stringify(metadata), contractAddress, signerAddress);

          case 9:
            return _context3.abrupt("return", _context3.sent);

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _uploadMetadata.apply(this, arguments);
}

/**
 * @internal
 */

var InterfaceId_IERC721 = /*#__PURE__*/arrayify("0x80ac58cd");
/**
 * @internal
 */

var InterfaceId_IERC1155 = /*#__PURE__*/arrayify("0xd9b67a26");
var contractUriABI = [{
  inputs: [],
  name: "contractURI",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}];
/**
 * @internal
 */

function getContractMetadata(_x, _x2, _x3) {
  return _getContractMetadata.apply(this, arguments);
}
/**
 * @internal
 */

function _getContractMetadata() {
  _getContractMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, address, ipfsGatewayUrl) {
    var contract, uri, gatewayUrl, meta, metadata, entity;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            contract = new Contract(address, contractUriABI, provider);
            _context.next = 3;
            return contract.contractURI();

          case 3:
            uri = _context.sent;
            gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);
            _context.next = 7;
            return fetch(gatewayUrl);

          case 7:
            meta = _context.sent;
            _context.prev = 8;
            _context.next = 11;
            return meta.json();

          case 11:
            metadata = _context.sent;
            entity = _extends({}, metadata, {
              uri: uri,
              image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl)
            });
            return _context.abrupt("return", entity);

          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](8);
            _context.t1 = Error;
            _context.next = 21;
            return meta.text();

          case 21:
            _context.t2 = _context.sent;
            _context.t3 = "Gateway did not return metadata, instead returned:\n " + _context.t2;
            throw new _context.t1(_context.t3);

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 16]]);
  }));
  return _getContractMetadata.apply(this, arguments);
}

function isContract(_x4, _x5) {
  return _isContract.apply(this, arguments);
}

function _isContract() {
  _isContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(provider, address) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return provider.getCode(address);

          case 2:
            _context2.t0 = _context2.sent;
            return _context2.abrupt("return", _context2.t0 !== "0x");

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _isContract.apply(this, arguments);
}

/**
 * @internal
 */

var NATIVE_TOKEN_ADDRESS = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
/**
 * @internal
 */

function getCurrencyMetadata(_x, _x2) {
  return _getCurrencyMetadata.apply(this, arguments);
}
/**
 * @internal
 */

function _getCurrencyMetadata() {
  _getCurrencyMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(providerOrSigner, asset) {
    var erc20, _yield$Promise$all, name, symbol, decimals;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!(asset.toLowerCase() === NATIVE_TOKEN_ADDRESS || asset.toLowerCase() === AddressZero)) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", {
              name: "",
              symbol: "",
              decimals: 18
            });

          case 5:
            if (!(asset.toLowerCase() !== AddressZero)) {
              _context.next = 14;
              break;
            }

            erc20 = ERC20__factory.connect(asset, providerOrSigner);
            _context.next = 9;
            return Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);

          case 9:
            _yield$Promise$all = _context.sent;
            name = _yield$Promise$all[0];
            symbol = _yield$Promise$all[1];
            decimals = _yield$Promise$all[2];
            return _context.abrupt("return", {
              name: name,
              symbol: symbol,
              decimals: decimals
            });

          case 14:
            _context.next = 18;
            break;

          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](0);

          case 18:
            return _context.abrupt("return", {
              name: "",
              symbol: "",
              decimals: 0
            });

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 16]]);
  }));
  return _getCurrencyMetadata.apply(this, arguments);
}

function getCurrencyValue(_x3, _x4, _x5) {
  return _getCurrencyValue.apply(this, arguments);
}

function _getCurrencyValue() {
  _getCurrencyValue = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(providerOrSigner, asset, price) {
    var metadata;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getCurrencyMetadata(providerOrSigner, asset);

          case 2:
            metadata = _context2.sent;
            return _context2.abrupt("return", _extends({}, metadata, {
              value: price.toString(),
              displayValue: formatUnits(price, metadata.decimals)
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getCurrencyValue.apply(this, arguments);
}

var ChainId;

(function (ChainId) {
  ChainId[ChainId["Mainnet"] = 1] = "Mainnet";
  ChainId[ChainId["Ropsten"] = 3] = "Ropsten";
  ChainId[ChainId["Rinkeby"] = 4] = "Rinkeby";
  ChainId[ChainId["Goerli"] = 5] = "Goerli";
  ChainId[ChainId["Kovan"] = 42] = "Kovan";
  ChainId[ChainId["BSC"] = 56] = "BSC";
  ChainId[ChainId["xDai"] = 100] = "xDai";
  ChainId[ChainId["Polygon"] = 137] = "Polygon";
  ChainId[ChainId["Moonriver"] = 1285] = "Moonriver";
  ChainId[ChainId["Mumbai"] = 80001] = "Mumbai";
  ChainId[ChainId["Harmony"] = 1666600000] = "Harmony";
  ChainId[ChainId["Localhost"] = 1337] = "Localhost";
  ChainId[ChainId["Hardhat"] = 31337] = "Hardhat";
  ChainId[ChainId["Fantom"] = 250] = "Fantom";
  ChainId[ChainId["FantomTestnet"] = 4002] = "FantomTestnet";
  ChainId[ChainId["Avalanche"] = 43114] = "Avalanche";
  ChainId[ChainId["AvalancheFujiTestnet"] = 43113] = "AvalancheFujiTestnet";
})(ChainId || (ChainId = {}));

var SUPPORTED_CHAIN_IDS = [ChainId.Mainnet, ChainId.Rinkeby, ChainId.Polygon, ChainId.Mumbai, ChainId.Fantom, ChainId.FantomTestnet, ChainId.Avalanche, ChainId.AvalancheFujiTestnet];

var _ChainlinkVrf;
/**
 *
 * @internal
 */

var ChainlinkVrf = (_ChainlinkVrf = {}, _ChainlinkVrf[ChainId.Polygon] = {
  vrfCoordinator: "0x3d2341ADb2D31f1c5530cDC622016af293177AE0",
  linkTokenAddress: "0xb0897686c545045aFc77CF20eC7A532E3120E0F1",
  keyHash: "0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.0001")
}, _ChainlinkVrf[ChainId.Mumbai] = {
  vrfCoordinator: "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
  linkTokenAddress: "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
  keyHash: "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.0001")
}, _ChainlinkVrf[ChainId.Rinkeby] = {
  vrfCoordinator: "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
  linkTokenAddress: "0x01be23585060835e02b77ef475b0cc51aa1e0709",
  keyHash: "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.1")
}, _ChainlinkVrf[ChainId.Mainnet] = {
  vrfCoordinator: "0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",
  linkTokenAddress: "0x514910771AF9Ca656af840dff83E8264EcF986CA",
  keyHash: "0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",
  fees: /*#__PURE__*/ethers.utils.parseEther("2")
}, _ChainlinkVrf[ChainId.Hardhat] = {
  vrfCoordinator: "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
  linkTokenAddress: "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
  keyHash: "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
  fees: /*#__PURE__*/ethers.utils.parseEther("0.0001")
}, _ChainlinkVrf);

/**
 * The type of Modules that are available.
 * @public
 */

var ModuleType;

(function (ModuleType) {
  ModuleType[ModuleType["CURRENCY"] = 0] = "CURRENCY";
  ModuleType[ModuleType["TOKEN"] = 0] = "TOKEN";
  ModuleType[ModuleType["COLLECTION"] = 1] = "COLLECTION";
  ModuleType[ModuleType["BUNDLE"] = 1] = "BUNDLE";
  ModuleType[ModuleType["NFT"] = 2] = "NFT";
  ModuleType[ModuleType["DYNAMIC_NFT"] = 3] = "DYNAMIC_NFT";
  ModuleType[ModuleType["ACCESS_NFT"] = 4] = "ACCESS_NFT";
  ModuleType[ModuleType["PACK"] = 5] = "PACK";
  ModuleType[ModuleType["MARKET"] = 6] = "MARKET";
  ModuleType[ModuleType["DROP"] = 7] = "DROP";
  ModuleType[ModuleType["DATASTORE"] = 8] = "DATASTORE";
  ModuleType[ModuleType["SPLITS"] = 9] = "SPLITS";
  ModuleType[ModuleType["VOTE"] = 10] = "VOTE";
  ModuleType[ModuleType["BUNDLE_DROP"] = 11] = "BUNDLE_DROP";
})(ModuleType || (ModuleType = {}));
/**
 *
 * @param moduleName - a supported module name
 * @returns The {@link ModuleType} or undefined
 * @public
 */


function convertNameToModuleType(moduleName) {
  return $enum(ModuleType).getValueOrDefault(moduleName == null ? void 0 : moduleName.toUpperCase(), undefined);
}
/**
 *
 * @param moduleType - A {@link ModuleType}
 * @returns The name of the given {@link ModuleType} or undefined
 * @public
 */

function convertModuleTypeToName(moduleType) {
  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);
}

var tokenUriABI = [{
  inputs: [{
    internalType: "uint256",
    name: "tokenId",
    type: "uint256"
  }],
  name: "tokenURI",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}, {
  inputs: [{
    internalType: "uint256",
    name: "",
    type: "uint256"
  }],
  name: "uri",
  outputs: [{
    internalType: "string",
    name: "",
    type: "string"
  }],
  stateMutability: "view",
  type: "function"
}];
/**
/* @internal
 */

function getMetadataWithoutContract(_x, _x2, _x3, _x4) {
  return _getMetadataWithoutContract.apply(this, arguments);
}
/**
/* @internal
 */

function _getMetadataWithoutContract() {
  _getMetadataWithoutContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(provider, contractAddress, tokenId, ipfsGatewayUrl) {
    var contract;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            contract = new Contract(contractAddress, tokenUriABI, provider);
            return _context.abrupt("return", getTokenMetadata(contract, tokenId, ipfsGatewayUrl));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getMetadataWithoutContract.apply(this, arguments);
}

function getTokenMetadata(_x5, _x6, _x7) {
  return _getTokenMetadata.apply(this, arguments);
}
/**
/* @internal
 */

function _getTokenMetadata() {
  _getTokenMetadata = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(contract, tokenId, ipfsGatewayUrl) {
    var uri, gatewayUrl, meta, metadata, entity;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getTokenUri(contract, tokenId);

          case 2:
            uri = _context2.sent;

            if (uri) {
              _context2.next = 5;
              break;
            }

            throw new NotFoundError();

          case 5:
            gatewayUrl = replaceIpfsWithGateway(uri, ipfsGatewayUrl);
            _context2.prev = 6;
            _context2.next = 9;
            return fetch(gatewayUrl);

          case 9:
            meta = _context2.sent;
            _context2.next = 12;
            return meta.json();

          case 12:
            metadata = _context2.sent;
            entity = _extends({}, metadata, {
              id: tokenId,
              uri: uri,
              image: replaceIpfsWithGateway(metadata.image, ipfsGatewayUrl)
            });
            return _context2.abrupt("return", entity);

          case 17:
            _context2.prev = 17;
            _context2.t0 = _context2["catch"](6);
            console.error("failed to fetch nft", _context2.t0);
            return _context2.abrupt("return", {
              id: tokenId,
              uri: uri
            });

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[6, 17]]);
  }));
  return _getTokenMetadata.apply(this, arguments);
}

function getTokenUri(_x8, _x9) {
  return _getTokenUri.apply(this, arguments);
}

function _getTokenUri() {
  _getTokenUri = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(contract, tokenId) {
    var uri;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            uri = "";
            _context3.prev = 1;
            _context3.next = 4;
            return contract.tokenURI(tokenId);

          case 4:
            uri = _context3.sent;
            _context3.next = 9;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](1);

          case 9:
            if (uri) {
              _context3.next = 18;
              break;
            }

            _context3.prev = 10;
            _context3.next = 13;
            return contract.uri(tokenId);

          case 13:
            uri = _context3.sent;
            _context3.next = 18;
            break;

          case 16:
            _context3.prev = 16;
            _context3.t1 = _context3["catch"](10);

          case 18:
            return _context3.abrupt("return", uri);

          case 19:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[1, 7], [10, 16]]);
  }));
  return _getTokenUri.apply(this, arguments);
}

/**
 *
 * @internal
 */

var RolesMap = {
  admin: "admin",
  minter: "minter",
  pauser: "pauser",
  transfer: "transfer",
  editor: "editor",
  lister: "lister"
};
/**
 *
 * @internal
 */

var _role = {
  admin: "",
  transfer: "TRANSFER_ROLE",
  minter: "MINTER_ROLE",
  pauser: "PAUSER_ROLE",
  editor: "EDITOR_ROLE",
  lister: "LISTER_ROLE"
};
/**
 * @internal
 */

function getRoleHash(role) {
  if (role === "admin") {
    return ethers.utils.hexZeroPad([0], 32);
  }

  return ethers.utils.id(_role[role]);
}

/**
 * @internal
 */

function getGasStationUrl(chainId) {
  if (!chainId) {
    return null;
  }

  if (chainId === ChainId.Polygon) {
    return "https://gasstation-mainnet.matic.network";
  }

  return null;
}
/**
 *
 * @returns the gas price
 * @internal
 */


function getGasPriceForChain(_x, _x2, _x3) {
  return _getGasPriceForChain.apply(this, arguments);
}

function _getGasPriceForChain() {
  _getGasPriceForChain = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(chainId, speed, maxGasPrice) {
    var gasStationUrl, data, gas;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            gasStationUrl = getGasStationUrl(chainId);

            if (gasStationUrl) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", null);

          case 3:
            _context.prev = 3;
            _context.next = 6;
            return fetch(gasStationUrl);

          case 6:
            _context.next = 8;
            return _context.sent.json();

          case 8:
            data = _context.sent;
            gas = data[speed];

            if (!(gas > 0)) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", Math.min(gas, maxGasPrice));

          case 12:
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);
            console.error("failed to fetch gas", _context.t0);

          case 17:
            return _context.abrupt("return", null);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 14]]);
  }));
  return _getGasPriceForChain.apply(this, arguments);
}

var _CONTRACT_ADDRESSES, _NATIVE_TOKENS;
var FORWARDER_ADDRESS = "0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81";
var CONTRACT_ADDRESSES = (_CONTRACT_ADDRESSES = {}, _CONTRACT_ADDRESSES[ChainId.Mainnet] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Rinkeby] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Polygon] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Mumbai] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Avalanche] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.AvalancheFujiTestnet] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Fantom] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.FantomTestnet] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES[ChainId.Hardhat] = {
  registry: "0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E"
}, _CONTRACT_ADDRESSES);
var NATIVE_TOKENS = (_NATIVE_TOKENS = {}, _NATIVE_TOKENS[ChainId.Mainnet] = {
  name: "Ether",
  symbol: "ETH",
  decimals: 18,
  wrapped: {
    address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    name: "Wrapped Ether",
    symbol: "WETH"
  }
}, _NATIVE_TOKENS[ChainId.Rinkeby] = {
  name: "Ether",
  symbol: "ETH",
  decimals: 18,
  wrapped: {
    address: "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    name: "Wrapped Ether",
    symbol: "WETH"
  }
}, _NATIVE_TOKENS[ChainId.Polygon] = {
  name: "Matic",
  symbol: "MATIC",
  decimals: 18,
  wrapped: {
    address: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    name: "Wrapped Matic",
    symbol: "WMATIC"
  }
}, _NATIVE_TOKENS[ChainId.Mumbai] = {
  name: "Matic",
  symbol: "MATIC",
  decimals: 18,
  wrapped: {
    address: "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    name: "Wrapped Matic",
    symbol: "WMATIC"
  }
}, _NATIVE_TOKENS[ChainId.Avalanche] = {
  name: "Avalanche",
  symbol: "AVAX",
  decimals: 18,
  wrapped: {
    address: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    name: "Wrapped AVAX",
    symbol: "WAVAX"
  }
}, _NATIVE_TOKENS[ChainId.AvalancheFujiTestnet] = {
  name: "Avalanche",
  symbol: "AVAX",
  decimals: 18,
  wrapped: {
    address: "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
    name: "Wrapped AVAX",
    symbol: "WAVAX"
  }
}, _NATIVE_TOKENS[ChainId.Fantom] = {
  name: "Fantom",
  symbol: "FTM",
  decimals: 18,
  wrapped: {
    address: "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
    name: "Wrapped Fantom",
    symbol: "WFTM"
  }
}, _NATIVE_TOKENS[ChainId.FantomTestnet] = {
  name: "Fantom",
  symbol: "FTM",
  decimals: 18,
  wrapped: {
    address: "0xf1277d1Ed8AD466beddF92ef448A132661956621",
    name: "Wrapped Fantom",
    symbol: "WFTM"
  }
}, _NATIVE_TOKENS[ChainId.Hardhat] = {
  name: "Ether",
  symbol: "ETH",
  decimals: 18,
  wrapped: {
    address: "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    name: "Wrapped Ether",
    symbol: "WETH"
  }
}, _NATIVE_TOKENS);
function getContractAddressByChainId(chainId) {
  return CONTRACT_ADDRESSES[chainId]["registry"];
}
function getNativeTokenByChainId(chainId) {
  return NATIVE_TOKENS[chainId];
}

/**
 * @internal
 * @param condition - any truthy condition to assert
 * @param message  - optional message to use if the condition is falsy
 */

function invariant(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

var _DEFAULT_BLOCK_TIMES_;
/**
 * Fallback map of default block mining times in seconds.

 */

var DEFAULT_BLOCK_TIMES_FALLBACK = (_DEFAULT_BLOCK_TIMES_ = {}, _DEFAULT_BLOCK_TIMES_[ChainId.Mainnet] = {
  secondsBetweenBlocks: 15,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.Rinkeby] = {
  secondsBetweenBlocks: 15,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.Polygon] = {
  secondsBetweenBlocks: 2.5,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.Mumbai] = {
  secondsBetweenBlocks: 2.5,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.Fantom] = {
  secondsBetweenBlocks: 1,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.FantomTestnet] = {
  secondsBetweenBlocks: 1,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.Avalanche] = {
  secondsBetweenBlocks: 1,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.AvalancheFujiTestnet] = {
  secondsBetweenBlocks: 1,
  synced: false
}, _DEFAULT_BLOCK_TIMES_[ChainId.Hardhat] = {
  secondsBetweenBlocks: 1,
  synced: false
}, _DEFAULT_BLOCK_TIMES_);
/**
 * Given a time in second, return the block number that the time is in.
 *
 * @param timeInEpochSeconds - The time in seconds.
 * @param chainId - The chain id.
 * @returns - The block number.
 */

function estimateBlockAtTime(_x, _x2) {
  return _estimateBlockAtTime.apply(this, arguments);
}

function _estimateBlockAtTime() {
  _estimateBlockAtTime = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(timeInEpochSeconds, provider) {
    var secondsUntil, chainId, estimateSecondsBetweenBlocks, latestBlock, secondsBetweenBlocks, blocksUntil;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            secondsUntil = Math.floor(timeInEpochSeconds - Date.now() / 1000);
            _context2.next = 3;
            return provider.getNetwork();

          case 3:
            chainId = _context2.sent.chainId;
            !SUPPORTED_CHAIN_IDS.includes(chainId) ? process.env.NODE_ENV !== "production" ? invariant(false, "Chain id " + chainId + " is not supported") : invariant(false) : void 0;
            !(timeInEpochSeconds >= Date.now() / 1000) ? process.env.NODE_ENV !== "production" ? invariant(false, "This function should not be used to estimate past block times") : invariant(false) : void 0;

            estimateSecondsBetweenBlocks = /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
                var blockTimes, latest, i, current, previous, diff, sum;
                return runtime_1.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        blockTimes = [];
                        _context.next = 3;
                        return provider.getBlock("latest");

                      case 3:
                        latest = _context.sent;
                        i = 0;

                      case 5:
                        if (!(i < 5)) {
                          _context.next = 17;
                          break;
                        }

                        _context.next = 8;
                        return provider.getBlock(latest.number - i);

                      case 8:
                        current = _context.sent;
                        _context.next = 11;
                        return provider.getBlock(latest.number - i - 1);

                      case 11:
                        previous = _context.sent;
                        diff = current.timestamp - previous.timestamp;
                        blockTimes.push(diff);

                      case 14:
                        i++;
                        _context.next = 5;
                        break;

                      case 17:
                        sum = blockTimes.reduce(function (result, a) {
                          return result + a;
                        }, 0);
                        return _context.abrupt("return", sum / blockTimes.length);

                      case 19:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function estimateSecondsBetweenBlocks() {
                return _ref.apply(this, arguments);
              };
            }();

            if (!DEFAULT_BLOCK_TIMES_FALLBACK[chainId].synced) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return", DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks);

          case 9:
            _context2.next = 11;
            return provider.getBlock("latest");

          case 11:
            latestBlock = _context2.sent;
            _context2.prev = 12;
            _context2.next = 15;
            return estimateSecondsBetweenBlocks();

          case 15:
            secondsBetweenBlocks = _context2.sent;
            DEFAULT_BLOCK_TIMES_FALLBACK[chainId] = {
              synced: true,
              secondsBetweenBlocks: secondsBetweenBlocks
            };
            _context2.next = 22;
            break;

          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](12);
            secondsBetweenBlocks = DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;

          case 22:
            console.log("Seconds until block", secondsUntil);
            blocksUntil = Math.ceil(secondsUntil / secondsBetweenBlocks);
            return _context2.abrupt("return", latestBlock.number + blocksUntil);

          case 25:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[12, 19]]);
  }));
  return _estimateBlockAtTime.apply(this, arguments);
}

/**
 * @internal
 */

var ForwardRequest = [{
  name: "from",
  type: "address"
}, {
  name: "to",
  type: "address"
}, {
  name: "value",
  type: "uint256"
}, {
  name: "gas",
  type: "uint256"
}, {
  name: "nonce",
  type: "uint256"
}, {
  name: "data",
  type: "bytes"
}];
var _nonces = {};
var _noncesSyncTimestamp = {};
function getAndIncrementNonce(_x, _x2) {
  return _getAndIncrementNonce.apply(this, arguments);
}

function _getAndIncrementNonce() {
  _getAndIncrementNonce = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(forwarder, address) {
    var timestamp, shouldSync, nonce;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            timestamp = _noncesSyncTimestamp[address]; // if it's within 2 seconds we're optimistically increment the nonce
            // should we always sync?

            shouldSync = Date.now() - timestamp >= 2000;

            if (!(!(address in _nonces) || shouldSync)) {
              _context.next = 7;
              break;
            }

            _context.next = 5;
            return forwarder.getNonce(address);

          case 5:
            _nonces[address] = _context.sent;
            _noncesSyncTimestamp[address] = Date.now();

          case 7:
            nonce = _nonces[address];
            _nonces[address] = BigNumber.from(_nonces[address]).add(1);
            return _context.abrupt("return", nonce);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getAndIncrementNonce.apply(this, arguments);
}

/**
 * The root Module class. All other Modules extend this.
 * @remarks This should never be instantiated directly.
 * @public
 */

var Module = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function Module(providerOrSigner, address, options, sdk) {
    this.address = void 0;
    this.ipfsGatewayUrl = void 0;
    this.options = void 0;
    this.sdk = void 0;
    this._providerOrSigner = null;
    this._signer = null;
    this.contract = void 0;
    this.readOnlyContract = void 0;
    this.address = address;
    this.options = options;
    this.ipfsGatewayUrl = options.ipfsGatewayUrl;
    this.setProviderOrSigner(providerOrSigner);
    this.contract = this.connectContract();
    this.readOnlyContract = this.options.readOnlyRpcUrl ? this.contract.connect(ethers.getDefaultProvider(this.options.readOnlyRpcUrl)) : this.contract;
    this.sdk = sdk;
  }
  /**
   * @public
   * @returns whether the given contract exists on-chain
   */


  var _proto = Module.prototype;

  _proto.exists =
  /*#__PURE__*/
  function () {
    var _exists = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var provider;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getProvider();

            case 2:
              provider = _context.sent;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "exists() -- No Provider") : invariant(false) : void 0;
              return _context.abrupt("return", isContract(provider, this.address));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exists() {
      return _exists.apply(this, arguments);
    }

    return exists;
  }()
  /**
   * @public
   * Get the metadata of the contract.
   */
  ;

  _proto.getMetadata =
  /*#__PURE__*/
  function () {
    var _getMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var contract, type;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.exists();

            case 2:
              if (_context2.sent) {
                _context2.next = 6;
                break;
              }

              process.env.NODE_ENV !== "production" ? invariant(false, "contract does not exist") : invariant(false);
              _context2.next = 7;
              break;

            case 6:

            case 7:
              contract = this.connectContract();
              type = this.getModuleType();
              _context2.t0 = getContractMetadata;
              _context2.next = 12;
              return this.getProvider();

            case 12:
              _context2.t1 = _context2.sent;
              _context2.t2 = contract.address;
              _context2.t3 = this.options.ipfsGatewayUrl;
              _context2.next = 17;
              return (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3);

            case 17:
              _context2.t4 = _context2.sent;
              _context2.t5 = contract.address;
              _context2.t6 = type;
              return _context2.abrupt("return", {
                metadata: _context2.t4,
                address: _context2.t5,
                type: _context2.t6
              });

            case 21:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getMetadata() {
      return _getMetadata.apply(this, arguments);
    }

    return getMetadata;
  }()
  /**
   * @public
   * Set new metadata on the contract and return it if successful.
   * @param metadata - The metadata to set.
   */
  ;

  _proto.setMetadata =
  /*#__PURE__*/
  function () {
    var _setMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(metadata) {
      var uri;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.exists();

            case 2:
              if (_context3.sent) {
                _context3.next = 6;
                break;
              }

              process.env.NODE_ENV !== "production" ? invariant(false, "contract does not exist") : invariant(false);
              _context3.next = 7;
              break;

            case 6:

            case 7:
              _context3.next = 9;
              return uploadMetadata(metadata);

            case 9:
              uri = _context3.sent;
              _context3.next = 12;
              return this.sendTransaction("setContractURI", [uri]);

            case 12:
              return _context3.abrupt("return", this.getMetadata());

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function setMetadata(_x) {
      return _setMetadata.apply(this, arguments);
    }

    return setMetadata;
  }()
  /**
   * @internal
   */
  ;

  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSigner) {
    this.providerOrSigner = providerOrSigner;

    if (Signer.isSigner(providerOrSigner)) {
      this.signer = providerOrSigner;
    }

    this.contract = this.connectContract();
    this.readOnlyContract = this.options.readOnlyRpcUrl ? this.contract.connect(ethers.getDefaultProvider(this.options.readOnlyRpcUrl)) : this.contract;
  }
  /**
   * @internal
   */
  ;

  _proto.clearSigner = function clearSigner() {
    this.signer = null;
  }
  /**
   * @internal
   */
  ;

  _proto.getProviderOrSigner = function getProviderOrSigner() {
    return this.signer || this.providerOrSigner;
  }
  /**
   * @internal
   */
  ;

  _proto.getSigner = function getSigner() {
    if (Signer.isSigner(this.signer)) {
      return this.signer;
    }

    return null;
  }
  /**
   * @internal
   */
  ;

  _proto.hasValidSigner = function hasValidSigner() {
    return Signer.isSigner(this.signer);
  }
  /**
   * @internal
   */
  ;

  _proto.getSignerAddress =
  /*#__PURE__*/
  function () {
    var _getSignerAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var signer;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              signer = this.getSigner();
              !signer ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot get signer address without valid signer") : invariant(false) : void 0;
              _context4.next = 4;
              return signer.getAddress();

            case 4:
              return _context4.abrupt("return", _context4.sent);

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getSignerAddress() {
      return _getSignerAddress.apply(this, arguments);
    }

    return getSignerAddress;
  }()
  /**
   * @internal
   */
  ;

  _proto.getProvider =
  /*#__PURE__*/
  function () {
    var _getProvider = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.readOnlyContract.provider);

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getProvider() {
      return _getProvider.apply(this, arguments);
    }

    return getProvider;
  }()
  /**
   * @internal
   */
  ;

  _proto.getChainID =
  /*#__PURE__*/
  function () {
    var _getChainID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var provider, _yield$provider$getNe, chainId;

      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.getProvider();

            case 2:
              provider = _context6.sent;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "getChainID() -- No Provider") : invariant(false) : void 0;
              _context6.next = 6;
              return provider.getNetwork();

            case 6:
              _yield$provider$getNe = _context6.sent;
              chainId = _yield$provider$getNe.chainId;
              return _context6.abrupt("return", chainId);

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getChainID() {
      return _getChainID.apply(this, arguments);
    }

    return getChainID;
  }()
  /**
   * @virtual
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    throw new Error("connectContract has to be implemented");
  }
  /**
   * @virtual
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    throw new Error("getModuleType has to be implemented");
  }
  /**
   * @internal
   */
  ;

  _proto.getCallOverrides =
  /*#__PURE__*/
  function () {
    var _getCallOverrides = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var chainId, speed, maxGasPrice, gasPriceChain;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.getChainID();

            case 2:
              chainId = _context7.sent;
              speed = this.options.gasSpeed;
              maxGasPrice = this.options.maxGasPriceInGwei;
              _context7.next = 7;
              return getGasPriceForChain(chainId, speed, maxGasPrice);

            case 7:
              gasPriceChain = _context7.sent;

              if (gasPriceChain) {
                _context7.next = 10;
                break;
              }

              return _context7.abrupt("return", {});

            case 10:
              return _context7.abrupt("return", {
                gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), "gwei")
              });

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getCallOverrides() {
      return _getCallOverrides.apply(this, arguments);
    }

    return getCallOverrides;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendTransaction =
  /*#__PURE__*/
  function () {
    var _sendTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(fn, args, callOverrides) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this.sendContractTransaction(this.contract, fn, args, callOverrides));

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function sendTransaction(_x2, _x3, _x4) {
      return _sendTransaction.apply(this, arguments);
    }

    return sendTransaction;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendContractTransaction =
  /*#__PURE__*/
  function () {
    var _sendContractTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(contract, fn, args, callOverrides) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (callOverrides) {
                _context9.next = 4;
                break;
              }

              _context9.next = 3;
              return this.getCallOverrides();

            case 3:
              callOverrides = _context9.sent;

            case 4:
              if (!this.options.transactionRelayerUrl) {
                _context9.next = 10;
                break;
              }

              _context9.next = 7;
              return this.sendGaslessTransaction(contract, fn, args, callOverrides);

            case 7:
              return _context9.abrupt("return", _context9.sent);

            case 10:
              _context9.next = 12;
              return this.sendAndWaitForTransaction(contract, fn, args, callOverrides);

            case 12:
              return _context9.abrupt("return", _context9.sent);

            case 13:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function sendContractTransaction(_x5, _x6, _x7, _x8) {
      return _sendContractTransaction.apply(this, arguments);
    }

    return sendContractTransaction;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendAndWaitForTransaction =
  /*#__PURE__*/
  function () {
    var _sendAndWaitForTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(contract, fn, args, callOverrides) {
      var _contract$functions;

      var tx;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return (_contract$functions = contract.functions)[fn].apply(_contract$functions, args.concat([callOverrides]));

            case 2:
              tx = _context10.sent;

              if (!tx.wait) {
                _context10.next = 7;
                break;
              }

              _context10.next = 6;
              return tx.wait();

            case 6:
              return _context10.abrupt("return", _context10.sent);

            case 7:
              return _context10.abrupt("return", tx);

            case 8:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    function sendAndWaitForTransaction(_x9, _x10, _x11, _x12) {
      return _sendAndWaitForTransaction.apply(this, arguments);
    }

    return sendAndWaitForTransaction;
  }()
  /**
   * @internal
   */
  ;

  _proto.sendGaslessTransaction =
  /*#__PURE__*/
  function () {
    var _sendGaslessTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(contract, fn, args, callOverrides) {
      var _contract$estimateGas;

      var signer, provider, chainId, from, to, value, data, forwarderAddress, forwarder, gasEstimate, gas, nonce, domain, types, message, signature, spender, amount, permit, _signer$provider, _signer$provider$prov, payload, txHash;

      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              signer = this.getSigner();
              !signer ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot execute gasless transaction without valid signer") : invariant(false) : void 0;
              _context11.next = 4;
              return this.getProvider();

            case 4:
              provider = _context11.sent;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "no provider to execute transaction") : invariant(false) : void 0;
              _context11.next = 8;
              return this.getChainID();

            case 8:
              chainId = _context11.sent;
              _context11.next = 11;
              return this.getSignerAddress();

            case 11:
              from = _context11.sent;
              to = this.address;
              value = (callOverrides == null ? void 0 : callOverrides.value) || 0;
              data = contract["interface"].encodeFunctionData(fn, args);
              forwarderAddress = this.options.transactionRelayerForwarderAddress;
              forwarder = Forwarder__factory.connect(forwarderAddress, provider);
              _context11.next = 19;
              return (_contract$estimateGas = contract.estimateGas)[fn].apply(_contract$estimateGas, args);

            case 19:
              gasEstimate = _context11.sent;
              gas = gasEstimate.mul(2); // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.
              // it'd estimate ~21740 on polygon.
              // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.

              if (gasEstimate.lt(25000)) {
                gas = BigNumber.from(500000);
              }

              _context11.next = 24;
              return getAndIncrementNonce(forwarder, from);

            case 24:
              nonce = _context11.sent;
              domain = {
                name: "GSNv2 Forwarder",
                version: "0.0.1",
                chainId: chainId,
                verifyingContract: forwarderAddress
              };
              types = {
                ForwardRequest: ForwardRequest
              };
              message = {
                from: from,
                to: to,
                value: BigNumber.from(value).toString(),
                gas: BigNumber.from(gas).toString(),
                nonce: BigNumber.from(nonce).toString(),
                data: data
              };

              if (!(fn === "approve" && args.length === 2 && contract["interface"].functions["approve(address,uint256)"] && contract["interface"].functions["permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"])) {
                _context11.next = 38;
                break;
              }

              spender = args[0];
              amount = args[1];
              _context11.next = 33;
              return signERC2612Permit(signer, contract.address, from, spender, amount);

            case 33:
              permit = _context11.sent;
              message = _extends({
                to: contract.address
              }, permit);
              signature = "" + permit.r + permit.s.substring(2) + permit.v.toString(16);
              _context11.next = 48;
              break;

            case 38:
              if (!(signer != null && (_signer$provider = signer.provider) != null && (_signer$provider$prov = _signer$provider.provider) != null && _signer$provider$prov.isWalletConnect)) {
                _context11.next = 45;
                break;
              }

              payload = ethers.utils._TypedDataEncoder.getPayload(domain, types, message);
              _context11.next = 42;
              return signer == null ? void 0 : signer.provider.send("eth_signTypedData", [from.toLowerCase(), JSON.stringify(payload)]);

            case 42:
              signature = _context11.sent;
              _context11.next = 48;
              break;

            case 45:
              _context11.next = 47;
              return signer._signTypedData(domain, types, message);

            case 47:
              signature = _context11.sent;

            case 48:
              _context11.next = 50;
              return this.options.transactionRelayerSendFunction(message, signature);

            case 50:
              txHash = _context11.sent;
              _context11.next = 53;
              return provider.waitForTransaction(txHash);

            case 53:
              return _context11.abrupt("return", _context11.sent);

            case 54:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function sendGaslessTransaction(_x13, _x14, _x15, _x16) {
      return _sendGaslessTransaction.apply(this, arguments);
    }

    return sendGaslessTransaction;
  }();

  _proto.parseEventLogs = function parseEventLogs(eventName, logs) {
    if (!logs) {
      return null;
    }

    var contract = this.contract;

    for (var _iterator = _createForOfIteratorHelperLoose(logs), _step; !(_step = _iterator()).done;) {
      var log = _step.value;

      try {
        var event = contract["interface"].decodeEventLog(eventName, log.data, log.topics);
        return event; // eslint-disable-next-line no-empty
      } catch (e) {}
    }

    return null;
  };

  _createClass(Module, [{
    key: "providerOrSigner",
    get:
    /**
     * @readonly
     */

    /**
     * @internal
     * @readonly
     */

    /**
     * @internal
     * @readonly
     */

    /**
     * @internal
     */

    /**
     * @internal
     */
    function get() {
      return this.signer || this._providerOrSigner || this.getProviderOrSigner();
    },
    set: function set(value) {
      this._providerOrSigner = value;
    }
    /**
     * @internal
     */

  }, {
    key: "signer",
    get:
    /**
     * @internal
     */
    function get() {
      return this._signer;
    },
    set: function set(value) {
      this._signer = value;
    }
    /**
     * Contract connects to the SDK signer or provider
     * @internal
     */

  }]);

  return Module;
}();
/**
 * Extends the {@link Module} class to add {@link Role} functionality.
 *
 * @public
 */

var ModuleWithRoles = /*#__PURE__*/function (_Module) {
  _inheritsLoose(ModuleWithRoles, _Module);

  var _proto2 = ModuleWithRoles.prototype;

  /**
   * @virtual
   * @internal
   */
  _proto2.getModuleRoles = function getModuleRoles() {
    throw new Error("getModuleRoles has to be implemented by a subclass");
  }
  /**
   * @internal
   */
  ;

  /** @internal */
  function ModuleWithRoles(providerOrSigner, address, options, sdk) {
    return _Module.call(this, providerOrSigner, address, options, sdk) || this;
  }
  /**
   * Call this to get a list of addresses that are members of a specific role.
   *
   * @param role - The {@link IRoles | role} to to get a memberlist for.
   * @returns The list of addresses that are members of the specific role.
   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.
   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.
   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.
   * ```typescript
   * const minterAddresses: string[] = await module.getRoleMemberList("minter");
   * ```
   *
   * @public
   */


  _proto2.getRoleMembers =
  /*#__PURE__*/
  function () {
    var _getRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(role) {
      var contract, roleHash, count;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              !this.roles.includes(role) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the \"" + role + "\" role") : invariant(false) : void 0;
              contract = this.contract;
              roleHash = getRoleHash(role);
              _context12.next = 5;
              return contract.getRoleMemberCount(roleHash);

            case 5:
              count = _context12.sent.toNumber();
              _context12.next = 8;
              return Promise.all(Array.from(Array(count).keys()).map(function (i) {
                return contract.getRoleMember(roleHash, i);
              }));

            case 8:
              return _context12.abrupt("return", _context12.sent);

            case 9:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function getRoleMembers(_x17) {
      return _getRoleMembers.apply(this, arguments);
    }

    return getRoleMembers;
  }()
  /**
   * Call this to get get a list of addresses for all supported roles on the module.
   *
   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.
   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.
   * @throws If the module does not support roles this will throw an {@link InvariantError}.
   *
   * @public
   */
  ;

  _proto2.getAllRoleMembers =
  /*#__PURE__*/
  function () {
    var _getAllRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      var roles, _iterator2, _step2, role;

      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              !this.roles.length ? process.env.NODE_ENV !== "production" ? invariant(false, "this module has no support for roles") : invariant(false) : void 0;
              roles = {};
              _iterator2 = _createForOfIteratorHelperLoose(this.roles);

            case 3:
              if ((_step2 = _iterator2()).done) {
                _context13.next = 10;
                break;
              }

              role = _step2.value;
              _context13.next = 7;
              return this.getRoleMembers(role);

            case 7:
              roles[role] = _context13.sent;

            case 8:
              _context13.next = 3;
              break;

            case 10:
              return _context13.abrupt("return", roles);

            case 11:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function getAllRoleMembers() {
      return _getAllRoleMembers.apply(this, arguments);
    }

    return getAllRoleMembers;
  }()
  /**
   * Call this to OVERWRITE the list of addresses that are members of specific roles.
   *
   * Every role in the list will be overwritten with the new list of addresses provided with them.
   * If you want to add or remove addresses for a single address use {@link ModuleWithRoles.grantRole | grantRole} and {@link ModuleWithRoles.grantRole | revokeRole} respectively instead.
   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.
   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.
   * @example Say you want to overwrite the list of addresses that are members of the {@link IRoles.minter | minter} role.
   * ```typescript
   * const minterAddresses: string[] = await module.getRoleMemberList("minter");
   * await module.setAllRoleMembers({
   *  minter: []
   * });
   * console.log(await module.getRoleMemberList("minter")); // No matter what members had the role before, the new list will be set to []
   * ```
   * @public
   *
   * */
  ;

  _proto2.setAllRoleMembers =
  /*#__PURE__*/
  function () {
    var _setAllRoleMembers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(rolesWithAddresses) {
      var _this = this;

      var roles, currentRoles, encoded;
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              roles = Object.keys(rolesWithAddresses);
              !roles.length ? process.env.NODE_ENV !== "production" ? invariant(false, "you must provide at least one role to set") : invariant(false) : void 0;
              !roles.every(function (role) {
                return _this.roles.includes(role);
              }) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the given role") : invariant(false) : void 0;
              _context16.next = 5;
              return this.getAllRoleMembers();

            case 5:
              currentRoles = _context16.sent;
              encoded = []; // add / rmove admin role at the end so we don't revoke admin then grant

              roles.sort(function (role) {
                return role === "admin" ? 1 : -1;
              }).forEach( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(role) {
                  var addresses, currentAddresses, toAdd, toRemove;
                  return runtime_1.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          addresses = rolesWithAddresses[role] || [];
                          currentAddresses = currentRoles[role] || [];
                          toAdd = addresses.filter(function (address) {
                            return !currentAddresses.includes(address);
                          });
                          toRemove = currentAddresses.filter(function (address) {
                            return !addresses.includes(address);
                          });

                          if (toAdd.length) {
                            toAdd.forEach(function (address) {
                              encoded.push(_this.contract["interface"].encodeFunctionData("grantRole", [getRoleHash(role), address]));
                            });
                          }

                          if (toRemove.length) {
                            toRemove.forEach( /*#__PURE__*/function () {
                              var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(address) {
                                var revokeFunctionName;
                                return runtime_1.wrap(function _callee14$(_context14) {
                                  while (1) {
                                    switch (_context14.prev = _context14.next) {
                                      case 0:
                                        _context14.next = 2;
                                        return _this.getRevokeRoleFunctionName(address);

                                      case 2:
                                        revokeFunctionName = _context14.sent;
                                        encoded.push(_this.contract["interface"].encodeFunctionData(revokeFunctionName, [getRoleHash(role), address]));

                                      case 4:
                                      case "end":
                                        return _context14.stop();
                                    }
                                  }
                                }, _callee14);
                              }));

                              return function (_x20) {
                                return _ref2.apply(this, arguments);
                              };
                            }());
                          }

                        case 6:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }));

                return function (_x19) {
                  return _ref.apply(this, arguments);
                };
              }());
              _context16.next = 10;
              return this.sendTransaction("multicall", [encoded]);

            case 10:
              return _context16.abrupt("return", _context16.sent);

            case 11:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function setAllRoleMembers(_x18) {
      return _setAllRoleMembers.apply(this, arguments);
    }

    return setAllRoleMembers;
  }()
  /**
   *
   * Call this to revoke all roles given to a specific address.
   * @param address - The address to revoke all roles for.
   * @returns A list of roles that were revoked.
   *
   * @public
   *
   */
  ;

  _proto2.revokeAllRolesFromAddress =
  /*#__PURE__*/
  function () {
    var _revokeAllRolesFromAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(address) {
      var _this2 = this;

      var currentRoles, encoded, rolesRemoved;
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.getAllRoleMembers();

            case 2:
              currentRoles = _context18.sent;
              encoded = [];
              rolesRemoved = []; // revoke / renounce admin role at the end

              Object.keys(currentRoles).sort(function (role) {
                return role === "admin" ? 1 : -1;
              }).forEach( /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(role) {
                  var _currentRoles$role;

                  var revokeFunctionName;
                  return runtime_1.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          if (!((_currentRoles$role = currentRoles[role]) != null && _currentRoles$role.includes(address))) {
                            _context17.next = 6;
                            break;
                          }

                          _context17.next = 3;
                          return _this2.getRevokeRoleFunctionName(address);

                        case 3:
                          revokeFunctionName = _context17.sent;
                          encoded.push(_this2.contract["interface"].encodeFunctionData(revokeFunctionName, [getRoleHash(role), address]));
                          rolesRemoved.push(role);

                        case 6:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }));

                return function (_x22) {
                  return _ref3.apply(this, arguments);
                };
              }());
              _context18.next = 8;
              return this.sendTransaction("multicall", [encoded]);

            case 8:
              return _context18.abrupt("return", rolesRemoved);

            case 9:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function revokeAllRolesFromAddress(_x21) {
      return _revokeAllRolesFromAddress.apply(this, arguments);
    }

    return revokeAllRolesFromAddress;
  }()
  /**
   * Call this to grant a role to a specific address.
   *
   * @remarks
   *
   * Make sure you are sure you want to grant the role to the address.
   *
   * @param role - The {@link IRoles | role} to grant to the address
   * @param address - The address to grant the role to
   * @returns The transaction receipt
   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.
   *
   * @public
   */
  ;

  _proto2.grantRole =
  /*#__PURE__*/
  function () {
    var _grantRole = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(role, address) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              !this.roles.includes(role) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the \"" + role + "\" role") : invariant(false) : void 0;
              _context19.next = 3;
              return this.sendTransaction("grantRole", [getRoleHash(role), address]);

            case 3:
              return _context19.abrupt("return", _context19.sent);

            case 4:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function grantRole(_x23, _x24) {
      return _grantRole.apply(this, arguments);
    }

    return grantRole;
  }()
  /**
   * Call this to revoke a role from a specific address.
   *
   * @remarks
   *
   * -- Caution --
   *
   * This will let you remove yourself from the role, too.
   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.
   * There is no way to recover from this.
   *
   * @param role - The {@link IRoles | role} to revoke
   * @param address - The address to revoke the role from
   * @returns The transaction receipt
   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.
   *
   * @public
   */
  ;

  _proto2.revokeRole =
  /*#__PURE__*/
  function () {
    var _revokeRole = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(role, address) {
      var revokeFunctionName;
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              !this.roles.includes(role) ? process.env.NODE_ENV !== "production" ? invariant(false, "this module does not support the \"" + role + "\" role") : invariant(false) : void 0;
              _context20.next = 3;
              return this.getRevokeRoleFunctionName(address);

            case 3:
              revokeFunctionName = _context20.sent;
              _context20.next = 6;
              return this.sendTransaction(revokeFunctionName, [getRoleHash(role), address]);

            case 6:
              return _context20.abrupt("return", _context20.sent);

            case 7:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function revokeRole(_x25, _x26) {
      return _revokeRole.apply(this, arguments);
    }

    return revokeRole;
  }();

  _proto2.getRevokeRoleFunctionName = /*#__PURE__*/function () {
    var _getRevokeRoleFunctionName = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(address) {
      var signerAddress;
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.getSignerAddress();

            case 2:
              signerAddress = _context21.sent;

              if (!(signerAddress.toLowerCase() === address.toLowerCase())) {
                _context21.next = 5;
                break;
              }

              return _context21.abrupt("return", "renounceRole");

            case 5:
              return _context21.abrupt("return", "revokeRole");

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function getRevokeRoleFunctionName(_x27) {
      return _getRevokeRoleFunctionName.apply(this, arguments);
    }

    return getRevokeRoleFunctionName;
  }()
  /**
   * Prepares any set of metadata for uploading by recursively converting all Buffer|Blob|File objects
   * into a hash of the object after its been uploaded to distributed storage (e.g. IPFS). After uploading
   * any File|Buffer|Blob, the metadata is serialized to a string.
   *
   * @param metadata - The list of metadata to prepare for upload.
   * @returns - The serialized metadata object.
   */
  ;

  _proto2.prepareMetadata =
  /*#__PURE__*/
  function () {
    var _prepareMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(metadata) {
      var _this3 = this;

      var _fileHandler;

      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              if (!(typeof metadata === "string")) {
                _context23.next = 2;
                break;
              }

              return _context23.abrupt("return", metadata);

            case 2:
              _fileHandler = /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(object) {
                  var keys, key, val, shouldUpload;
                  return runtime_1.wrap(function _callee22$(_context22) {
                    while (1) {
                      switch (_context22.prev = _context22.next) {
                        case 0:
                          keys = Object.keys(object);
                          _context22.t0 = runtime_1.keys(keys);

                        case 2:
                          if ((_context22.t1 = _context22.t0()).done) {
                            _context22.next = 18;
                            break;
                          }

                          key = _context22.t1.value;
                          val = object[keys[key]];
                          shouldUpload = val instanceof File || val instanceof Buffer;

                          if (!shouldUpload) {
                            _context22.next = 10;
                            break;
                          }

                          _context22.next = 9;
                          return _this3.sdk.getStorage().upload(object[keys[key]]);

                        case 9:
                          object[keys[key]] = _context22.sent;

                        case 10:
                          if (!(shouldUpload && typeof object[keys[key]] !== "string")) {
                            _context22.next = 12;
                            break;
                          }

                          throw new Error("Upload to IPFS failed");

                        case 12:
                          if (!(typeof val === "object")) {
                            _context22.next = 16;
                            break;
                          }

                          _context22.next = 15;
                          return _fileHandler(object[keys[key]]);

                        case 15:
                          object[keys[key]] = _context22.sent;

                        case 16:
                          _context22.next = 2;
                          break;

                        case 18:
                          return _context22.abrupt("return", object);

                        case 19:
                        case "end":
                          return _context22.stop();
                      }
                    }
                  }, _callee22);
                }));

                return function _fileHandler(_x29) {
                  return _ref4.apply(this, arguments);
                };
              }();

              _context23.next = 5;
              return _fileHandler(metadata);

            case 5:
              metadata = _context23.sent;
              return _context23.abrupt("return", JSON.stringify(metadata));

            case 7:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }));

    function prepareMetadata(_x28) {
      return _prepareMetadata.apply(this, arguments);
    }

    return prepareMetadata;
  }()
  /**
   * Prepares a list of metadata for uploading.
   *
   * @param metadata - List of metadata to prepare for upload.
   * @returns - List of metadata prepared for upload.
   */
  ;

  _proto2.prepareBatchMetadata =
  /*#__PURE__*/
  function () {
    var _prepareBatchMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(metadata) {
      var _this4 = this;

      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return Promise.all(metadata.map( /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(m) {
                  return runtime_1.wrap(function _callee24$(_context24) {
                    while (1) {
                      switch (_context24.prev = _context24.next) {
                        case 0:
                          _context24.next = 2;
                          return _this4.prepareMetadata(m);

                        case 2:
                          return _context24.abrupt("return", _context24.sent);

                        case 3:
                        case "end":
                          return _context24.stop();
                      }
                    }
                  }, _callee24);
                }));

                return function (_x31) {
                  return _ref5.apply(this, arguments);
                };
              }()));

            case 2:
              return _context25.abrupt("return", _context25.sent);

            case 3:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }));

    function prepareBatchMetadata(_x30) {
      return _prepareBatchMetadata.apply(this, arguments);
    }

    return prepareBatchMetadata;
  }();

  _createClass(ModuleWithRoles, [{
    key: "roles",
    get: function get() {
      return this.getModuleRoles();
    }
  }]);

  return ModuleWithRoles;
}(Module);

/**
 * CommonModuleMetadata defines the common properties of a module deployment.
 */

var CommonModuleMetadata = function CommonModuleMetadata() {
  this.name = "";
  this.description = undefined;
  this.image = undefined;
  this.externalLink = undefined;
};

__decorate([JsonProperty("name", String)], CommonModuleMetadata.prototype, "name", void 0);

__decorate([JsonProperty("description", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, "description", void 0);

__decorate([JsonProperty("image", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, "image", void 0);

__decorate([JsonProperty("external_link", String, PropertyConvertingMode.IGNORE_NULLABLE)], CommonModuleMetadata.prototype, "externalLink", void 0);

CommonModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("CommonModuleMetadata")], CommonModuleMetadata);
var CommonModuleMetadata$1 = CommonModuleMetadata;

var BundleModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(BundleModuleMetadata, _CommonModuleMetadata);

  function BundleModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    return _this;
  }

  return BundleModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], BundleModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], BundleModuleMetadata.prototype, "feeRecipient", void 0);

BundleModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("CollectionModuleMetadata")], BundleModuleMetadata);
var BundleModuleMetadata$1 = BundleModuleMetadata;

var CurrencyModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(CurrencyModuleMetadata, _CommonModuleMetadata);

  function CurrencyModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.symbol = "";
    return _this;
  }

  return CurrencyModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("symbol", String)], CurrencyModuleMetadata.prototype, "symbol", void 0);

CurrencyModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("CurrencyModuleMetadata")], CurrencyModuleMetadata);
var CurrencyModuleMetadata$1 = CurrencyModuleMetadata;

var DatastoreModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(DatastoreModuleMetadata, _CommonModuleMetadata);

  function DatastoreModuleMetadata() {
    return _CommonModuleMetadata.apply(this, arguments) || this;
  }

  return DatastoreModuleMetadata;
}(CommonModuleMetadata$1);

DatastoreModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("DatastoreModuleMetadata")], DatastoreModuleMetadata);
var DatastoreModuleMetadata$1 = DatastoreModuleMetadata;

var DropModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(DropModuleMetadata, _CommonModuleMetadata);

  function DropModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.primarySaleFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    _this.symbol = void 0;
    _this.maxSupply = 1;
    _this.primarySaleRecipientAddress = "";
    _this.baseTokenUri = "";
    return _this;
  }

  return DropModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("primary_sale_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "primarySaleFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "feeRecipient", void 0);

__decorate([JsonProperty("symbol", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "symbol", void 0);

__decorate([JsonProperty("max_supply", Number, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "maxSupply", void 0);

__decorate([JsonProperty("primary_sale_recipient_address", String)], DropModuleMetadata.prototype, "primarySaleRecipientAddress", void 0);

__decorate([JsonProperty("base_token_uri", String, PropertyConvertingMode.IGNORE_NULLABLE)], DropModuleMetadata.prototype, "baseTokenUri", void 0);

DropModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("DropModuleMetadata")], DropModuleMetadata);
var DropModuleMetadata$1 = DropModuleMetadata;

var MarketModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(MarketModuleMetadata, _CommonModuleMetadata);

  function MarketModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.marketFeeBasisPoints = 0;
    return _this;
  }

  return MarketModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], MarketModuleMetadata.prototype, "marketFeeBasisPoints", void 0);

MarketModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("MarketModuleMetadata")], MarketModuleMetadata);
var MarketModuleMetadata$1 = MarketModuleMetadata;

var NftModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(NftModuleMetadata, _CommonModuleMetadata);

  function NftModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    _this.symbol = void 0;
    return _this;
  }

  return NftModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, "feeRecipient", void 0);

__decorate([JsonProperty("symbol", String, PropertyConvertingMode.IGNORE_NULLABLE)], NftModuleMetadata.prototype, "symbol", void 0);

NftModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("NftModuleMetadata")], NftModuleMetadata);
var NftModuleMetadata$1 = NftModuleMetadata;

var PackModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(PackModuleMetadata, _CommonModuleMetadata);

  function PackModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.sellerFeeBasisPoints = 0;
    _this.feeRecipient = undefined;
    return _this;
  }

  return PackModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("seller_fee_basis_points", Number, PropertyConvertingMode.IGNORE_NULLABLE)], PackModuleMetadata.prototype, "sellerFeeBasisPoints", void 0);

__decorate([JsonProperty("fee_recipient", String, PropertyConvertingMode.IGNORE_NULLABLE)], PackModuleMetadata.prototype, "feeRecipient", void 0);

PackModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("PackModuleMetadata")], PackModuleMetadata);
var PackModuleMetadata$1 = PackModuleMetadata;

var SplitsModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(SplitsModuleMetadata, _CommonModuleMetadata);

  function SplitsModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.recipientSplits = [];
    return _this;
  }

  return SplitsModuleMetadata;
}(CommonModuleMetadata$1);

SplitsModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("SplitsModuleMetadata")], SplitsModuleMetadata);
var SplitsModuleMetadata$1 = SplitsModuleMetadata;

var VoteModuleMetadata = /*#__PURE__*/function (_CommonModuleMetadata) {
  _inheritsLoose(VoteModuleMetadata, _CommonModuleMetadata);

  function VoteModuleMetadata() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CommonModuleMetadata.call.apply(_CommonModuleMetadata, [this].concat(args)) || this;
    _this.proposalStartWaitTimeInSeconds = 0;
    _this.proposalVotingTimeInSeconds = 0;
    _this.votingDelay = 0;
    _this.votingPeriod = 0;
    _this.votingTokenAddress = "";
    _this.votingQuorumFraction = 0;
    _this.minimumNumberOfTokensNeededToPropose = "0";
    return _this;
  }

  return VoteModuleMetadata;
}(CommonModuleMetadata$1);

__decorate([JsonProperty("proposal_start_time_in_seconds", Number)], VoteModuleMetadata.prototype, "proposalStartWaitTimeInSeconds", void 0);

__decorate([JsonProperty("proposal_voting_time_in_seconds", Number)], VoteModuleMetadata.prototype, "proposalVotingTimeInSeconds", void 0);

__decorate([JsonProperty("voting_delay", Number)], VoteModuleMetadata.prototype, "votingDelay", void 0);

__decorate([JsonProperty("voting_period", Number)], VoteModuleMetadata.prototype, "votingPeriod", void 0);

__decorate([JsonProperty("voting_token_address", String)], VoteModuleMetadata.prototype, "votingTokenAddress", void 0);

__decorate([JsonProperty("voting_quorum_fraction", Number)], VoteModuleMetadata.prototype, "votingQuorumFraction", void 0);

__decorate([JsonProperty("proposal_token_threshold", String)], VoteModuleMetadata.prototype, "minimumNumberOfTokensNeededToPropose", void 0);

VoteModuleMetadata = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("VoteModuleMetadata")], VoteModuleMetadata);
var VoteModuleMetadata$1 = VoteModuleMetadata;

/**
 *
 * Access this module by calling {@link ThirdwebSDK.getTokenModule}
 * @public
 */

var TokenModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(TokenModule, _ModuleWithRoles);

  function TokenModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = TokenModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return TokenModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return Coin__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return TokenModule.moduleType;
  };

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getCurrencyMetadata(this.providerOrSigner, this.address);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get() {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getValue = /*#__PURE__*/function () {
    var _getValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(value) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getCurrencyValue(this.providerOrSigner, this.address, BigNumber.from(value));

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getValue(_x) {
      return _getValue.apply(this, arguments);
    }

    return getValue;
  }();

  _proto.totalSupply = /*#__PURE__*/function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.totalSupply();

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function totalSupply() {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = this;
              _context4.next = 3;
              return this.getSignerAddress();

            case 3:
              _context4.t1 = _context4.sent;
              _context4.next = 6;
              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1);

            case 6:
              return _context4.abrupt("return", _context4.sent);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = this;
              _context5.next = 3;
              return this.readOnlyContract.balanceOf(address);

            case 3:
              _context5.t1 = _context5.sent;
              _context5.next = 6;
              return _context5.t0.getValue.call(_context5.t0, _context5.t1);

            case 6:
              return _context5.abrupt("return", _context5.sent);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOf(_x2) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.allowance = /*#__PURE__*/function () {
    var _allowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(spender) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = this;
              _context6.next = 3;
              return this.getSignerAddress();

            case 3:
              _context6.t1 = _context6.sent;
              _context6.t2 = spender;
              _context6.next = 7;
              return _context6.t0.allowanceOf.call(_context6.t0, _context6.t1, _context6.t2);

            case 7:
              return _context6.abrupt("return", _context6.sent);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function allowance(_x3) {
      return _allowance.apply(this, arguments);
    }

    return allowance;
  }();

  _proto.allowanceOf = /*#__PURE__*/function () {
    var _allowanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(owner, spender) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.allowance(owner, spender);

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function allowanceOf(_x4, _x5) {
      return _allowanceOf.apply(this, arguments);
    }

    return allowanceOf;
  }()
  /**
   * Get your wallet voting power for the current checkpoints
   *
   * @returns the amount of voting power in tokens
   */
  ;

  _proto.getVoteBalance =
  /*#__PURE__*/
  function () {
    var _getVoteBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.t0 = this;
              _context8.next = 3;
              return this.getSignerAddress();

            case 3:
              _context8.t1 = _context8.sent;
              _context8.next = 6;
              return _context8.t0.getVoteBalanceOf.call(_context8.t0, _context8.t1);

            case 6:
              return _context8.abrupt("return", _context8.sent);

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getVoteBalance() {
      return _getVoteBalance.apply(this, arguments);
    }

    return getVoteBalance;
  }();

  _proto.getVoteBalanceOf = /*#__PURE__*/function () {
    var _getVoteBalanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(account) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.readOnlyContract.getVotes(account);

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getVoteBalanceOf(_x6) {
      return _getVoteBalanceOf.apply(this, arguments);
    }

    return getVoteBalanceOf;
  }()
  /**
   * Get your voting delegatee address
   *
   * @returns the address of your vote delegatee
   */
  ;

  _proto.getDelegation =
  /*#__PURE__*/
  function () {
    var _getDelegation = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.t0 = this;
              _context10.next = 3;
              return this.getSignerAddress();

            case 3:
              _context10.t1 = _context10.sent;
              _context10.next = 6;
              return _context10.t0.getDelegationOf.call(_context10.t0, _context10.t1);

            case 6:
              return _context10.abrupt("return", _context10.sent);

            case 7:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function getDelegation() {
      return _getDelegation.apply(this, arguments);
    }

    return getDelegation;
  }();

  _proto.getDelegationOf = /*#__PURE__*/function () {
    var _getDelegationOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(account) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.readOnlyContract.delegates(account);

            case 2:
              return _context11.abrupt("return", _context11.sent);

            case 3:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function getDelegationOf(_x7) {
      return _getDelegationOf.apply(this, arguments);
    }

    return getDelegationOf;
  }()
  /**
   * Lets you delegate your voting power to the delegateeAddress
   *
   * @param delegateeAddress - delegatee wallet address
   * @alpha
   */
  ;

  _proto.delegateTo =
  /*#__PURE__*/
  function () {
    var _delegateTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(delegateeAddress) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.sendTransaction("delegate", [delegateeAddress]);

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function delegateTo(_x8) {
      return _delegateTo.apply(this, arguments);
    }

    return delegateTo;
  }() // write functions
  ;

  _proto.transfer =
  /*#__PURE__*/
  function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(to, amount) {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.sendTransaction("transfer", [to, amount]);

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function transfer(_x9, _x10) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }();

  _proto.setAllowance = /*#__PURE__*/function () {
    var _setAllowance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(spender, amount) {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.sendTransaction("approve", [spender, amount]);

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function setAllowance(_x11, _x12) {
      return _setAllowance.apply(this, arguments);
    }

    return setAllowance;
  }() // owner functions
  ;

  _proto.mint =
  /*#__PURE__*/
  function () {
    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(amount) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.t0 = this;
              _context15.next = 3;
              return this.getSignerAddress();

            case 3:
              _context15.t1 = _context15.sent;
              _context15.t2 = amount;
              _context15.next = 7;
              return _context15.t0.mintTo.call(_context15.t0, _context15.t1, _context15.t2);

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function mint(_x13) {
      return _mint.apply(this, arguments);
    }

    return mint;
  }();

  _proto.mintTo = /*#__PURE__*/function () {
    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(to, amount) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.sendTransaction("mint", [to, amount]);

            case 2:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function mintTo(_x14, _x15) {
      return _mintTo.apply(this, arguments);
    }

    return mintTo;
  }();

  _proto.mintBatchTo = /*#__PURE__*/function () {
    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(args) {
      var encoded, _iterator, _step, arg;

      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              encoded = [];

              for (_iterator = _createForOfIteratorHelperLoose(args); !(_step = _iterator()).done;) {
                arg = _step.value;
                encoded.push(this.contract["interface"].encodeFunctionData("mint", [arg.address, arg.amount]));
              }

              _context17.next = 4;
              return this.sendTransaction("multicall", [encoded]);

            case 4:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function mintBatchTo(_x16) {
      return _mintBatchTo.apply(this, arguments);
    }

    return mintBatchTo;
  }()
  /**
   * Lets you get a all token holders and their corresponding balances
   * @beta - This can be very slow for large numbers of token holders
   * @param queryParams - Optional query params
   * @returns - A JSON object of all token holders and their corresponding balances
   */
  ;

  _proto.getAllHolderBalances =
  /*#__PURE__*/
  function () {
    var _getAllHolderBalances = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {
      var a, txns, balances;
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.contract.queryFilter(this.contract.filters.Transfer());

            case 2:
              a = _context18.sent;
              txns = a.map(function (b) {
                return b.args;
              });
              balances = {};
              txns.forEach(function (item) {
                var from = item.from;
                var to = item.to;
                var amount = item.value;

                if (!(from === AddressZero)) {
                  if (!(from in balances)) {
                    balances[from] = BigNumber.from(0);
                  }

                  balances[from] = balances[from].sub(amount);
                }

                if (!(to === AddressZero)) {
                  if (!(to in balances)) {
                    balances[to] = BigNumber.from(0);
                  }

                  balances[to] = balances[to].add(amount);
                }
              });
              return _context18.abrupt("return", balances);

            case 7:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function getAllHolderBalances() {
      return _getAllHolderBalances.apply(this, arguments);
    }

    return getAllHolderBalances;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(amount) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.sendTransaction("burn", [amount]);

            case 2:
              return _context19.abrupt("return", _context19.sent);

            case 3:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function burn(_x17) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.burnFrom = /*#__PURE__*/function () {
    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(from, amount) {
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.sendTransaction("burnFrom", [from, amount]);

            case 2:
              return _context20.abrupt("return", _context20.sent);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function burnFrom(_x18, _x19) {
      return _burnFrom.apply(this, arguments);
    }

    return burnFrom;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(from, to, amount) {
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.sendTransaction("transferFrom", [from, to, amount]);

            case 2:
              return _context21.abrupt("return", _context21.sent);

            case 3:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function transferFrom(_x20, _x21, _x22) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(metadata) {
      var uri;
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context22.sent;
              _context22.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context22.abrupt("return", _context22.sent);

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function setModuleMetadata(_x23) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(restricted) {
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context23.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
              return _context23.abrupt("return", _context23.sent);

            case 4:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function setRestrictedTransfer(_x24) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }();

  _proto.transferBatch = /*#__PURE__*/function () {
    var _transferBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(args) {
      var _this = this;

      var encoded;
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              encoded = args.map(function (arg) {
                return _this.contract["interface"].encodeFunctionData("transfer", [arg.address, arg.amount]);
              });
              _context24.next = 3;
              return this.sendTransaction("multicall", [encoded]);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function transferBatch(_x25) {
      return _transferBatch.apply(this, arguments);
    }

    return transferBatch;
  }();

  _proto.transferFromBatch = /*#__PURE__*/function () {
    var _transferFromBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(args) {
      var _this2 = this;

      var encoded;
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              encoded = args.map(function (arg) {
                return _this2.contract["interface"].encodeFunctionData("transferFrom", [arg.fromAddress, arg.address, arg.amount]);
              });
              _context25.next = 3;
              return this.sendTransaction("multicall", [encoded]);

            case 3:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function transferFromBatch(_x26) {
      return _transferFromBatch.apply(this, arguments);
    }

    return transferFromBatch;
  }();

  return TokenModule;
}(ModuleWithRoles);
/**
 * @deprecated - see {@link TokenModule}
 */

TokenModule.moduleType = ModuleType.CURRENCY;
TokenModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];
var CurrencyModule = /*#__PURE__*/function (_TokenModule) {
  _inheritsLoose(CurrencyModule, _TokenModule);

  function CurrencyModule() {
    return _TokenModule.apply(this, arguments) || this;
  }

  return CurrencyModule;
}(TokenModule);

/**
 * Access this module by calling {@link ThirdwebSDK.getAppModule}
 * @public
 */

var AppModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(AppModule, _ModuleWithRoles);

  function AppModule() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;
    _this.jsonConvert = new JsonConvert();
    _this.moduleType = -1;
    return _this;
  }

  var _proto = AppModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return CurrencyModule.roles;
  }
  /**
   * The internal module type for the app module.
   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.
   * @internal
   * @readonly
   */
  ;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return ProtocolControl__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return this.moduleType;
  }
  /**
   * @internal
   *
   */
  ;

  _proto.getModuleAddress =
  /*#__PURE__*/
  function () {
    var _getModuleAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(moduleType) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.readOnlyContract.getAllModulesOfType(moduleType);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getModuleAddress(_x) {
      return _getModuleAddress.apply(this, arguments);
    }

    return getModuleAddress;
  }();

  _proto.getNFTAddress = /*#__PURE__*/function () {
    var _getNFTAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.getModuleAddress(ModuleType.NFT));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getNFTAddress() {
      return _getNFTAddress.apply(this, arguments);
    }

    return getNFTAddress;
  }();

  _proto.getBundleAddress = /*#__PURE__*/function () {
    var _getBundleAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.getModuleAddress(ModuleType.BUNDLE));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getBundleAddress() {
      return _getBundleAddress.apply(this, arguments);
    }

    return getBundleAddress;
  }();

  _proto.getPackAddress = /*#__PURE__*/function () {
    var _getPackAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.getModuleAddress(ModuleType.PACK));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getPackAddress() {
      return _getPackAddress.apply(this, arguments);
    }

    return getPackAddress;
  }();

  _proto.getCurrencyAddress = /*#__PURE__*/function () {
    var _getCurrencyAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.getModuleAddress(ModuleType.CURRENCY));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getCurrencyAddress() {
      return _getCurrencyAddress.apply(this, arguments);
    }

    return getCurrencyAddress;
  }();

  _proto.getMarketAddress = /*#__PURE__*/function () {
    var _getMarketAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", this.getModuleAddress(ModuleType.MARKET));

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getMarketAddress() {
      return _getMarketAddress.apply(this, arguments);
    }

    return getMarketAddress;
  }();

  _proto.getDropAddress = /*#__PURE__*/function () {
    var _getDropAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", this.getModuleAddress(ModuleType.DROP));

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getDropAddress() {
      return _getDropAddress.apply(this, arguments);
    }

    return getDropAddress;
  }();

  _proto.getDatastoreAddress = /*#__PURE__*/function () {
    var _getDatastoreAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this.getModuleAddress(ModuleType.DATASTORE));

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getDatastoreAddress() {
      return _getDatastoreAddress.apply(this, arguments);
    }

    return getDatastoreAddress;
  }();

  _proto.getRoyaltyTreasury = /*#__PURE__*/function () {
    var _getRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(address) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.readOnlyContract.getRoyaltyTreasury(address || AddressZero);

            case 2:
              return _context9.abrupt("return", _context9.sent);

            case 3:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getRoyaltyTreasury(_x2) {
      return _getRoyaltyTreasury.apply(this, arguments);
    }

    return getRoyaltyTreasury;
  }()
  /**
   * @internal
   * @param addresses - The addresses of the modules to get metadata for.
   */
  ;

  _proto.getAllContractMetadata =
  /*#__PURE__*/
  function () {
    var _getAllContractMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(addresses) {
      var _this2 = this;

      var metadatas;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return Promise.all(addresses.map(function (address) {
                return getContractMetadata(_this2.providerOrSigner, address, _this2.ipfsGatewayUrl);
              }));

            case 2:
              metadatas = _context10.sent;
              return _context10.abrupt("return", addresses.filter(function (d) {
                return d;
              }).map(function (address, i) {
                return {
                  address: address,
                  metadata: metadatas[i]
                };
              }));

            case 4:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    function getAllContractMetadata(_x3) {
      return _getAllContractMetadata.apply(this, arguments);
    }

    return getAllContractMetadata;
  }()
  /**
   * Method to get a list of pack module metadata.
   * @returns A promise of an array of Pack modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getPackModules =
  /*#__PURE__*/
  function () {
    var _getPackModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.t0 = this;
              _context11.next = 3;
              return this.getPackAddress();

            case 3:
              _context11.t1 = _context11.sent;
              _context11.next = 6;
              return _context11.t0.getAllContractMetadata.call(_context11.t0, _context11.t1);

            case 6:
              return _context11.abrupt("return", _context11.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.PACK
                });
              }));

            case 7:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function getPackModules() {
      return _getPackModules.apply(this, arguments);
    }

    return getPackModules;
  }()
  /**
   * Method to get a list of NFT module metadata.
   * @returns A promise of an array of NFT modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getNFTModules =
  /*#__PURE__*/
  function () {
    var _getNFTModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.t0 = this;
              _context12.next = 3;
              return this.getNFTAddress();

            case 3:
              _context12.t1 = _context12.sent;
              _context12.next = 6;
              return _context12.t0.getAllContractMetadata.call(_context12.t0, _context12.t1);

            case 6:
              return _context12.abrupt("return", _context12.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.NFT
                });
              }));

            case 7:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function getNFTModules() {
      return _getNFTModules.apply(this, arguments);
    }

    return getNFTModules;
  }()
  /**
   * Method to get a list of Bundle module metadata.
   * @returns A promise of an array of Bundle modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getCollectionModules =
  /*#__PURE__*/
  function () {
    var _getCollectionModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.getBundleModules();

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function getCollectionModules() {
      return _getCollectionModules.apply(this, arguments);
    }

    return getCollectionModules;
  }();

  _proto.getBundleModules = /*#__PURE__*/function () {
    var _getBundleModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.t0 = this;
              _context14.next = 3;
              return this.getBundleAddress();

            case 3:
              _context14.t1 = _context14.sent;
              _context14.next = 6;
              return _context14.t0.getAllContractMetadata.call(_context14.t0, _context14.t1);

            case 6:
              return _context14.abrupt("return", _context14.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.BUNDLE
                });
              }));

            case 7:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function getBundleModules() {
      return _getBundleModules.apply(this, arguments);
    }

    return getBundleModules;
  }()
  /**
   * Method to get a list of Currency module metadata.
   * @returns A promise of an array of Currency modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getCurrencyModules =
  /*#__PURE__*/
  function () {
    var _getCurrencyModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.t0 = this;
              _context15.next = 3;
              return this.getCurrencyAddress();

            case 3:
              _context15.t1 = _context15.sent;
              _context15.next = 6;
              return _context15.t0.getAllContractMetadata.call(_context15.t0, _context15.t1);

            case 6:
              return _context15.abrupt("return", _context15.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.CURRENCY
                });
              }));

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function getCurrencyModules() {
      return _getCurrencyModules.apply(this, arguments);
    }

    return getCurrencyModules;
  }()
  /**
   * Method to get a list of Datastore module metadata.
   * @alpha
   * @returns A promise of an array of Datastore modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getDatastoreModules =
  /*#__PURE__*/
  function () {
    var _getDatastoreModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.t0 = this;
              _context16.next = 3;
              return this.getDatastoreAddress();

            case 3:
              _context16.t1 = _context16.sent;
              _context16.next = 6;
              return _context16.t0.getAllContractMetadata.call(_context16.t0, _context16.t1);

            case 6:
              return _context16.abrupt("return", _context16.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.DATASTORE
                });
              }));

            case 7:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function getDatastoreModules() {
      return _getDatastoreModules.apply(this, arguments);
    }

    return getDatastoreModules;
  }()
  /**
   * Method to get a list of Market module metadata.
   * @returns A promise of an array of Market modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getMarketModules =
  /*#__PURE__*/
  function () {
    var _getMarketModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17() {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.t0 = this;
              _context17.next = 3;
              return this.getMarketAddress();

            case 3:
              _context17.t1 = _context17.sent;
              _context17.next = 6;
              return _context17.t0.getAllContractMetadata.call(_context17.t0, _context17.t1);

            case 6:
              return _context17.abrupt("return", _context17.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.MARKET
                });
              }));

            case 7:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function getMarketModules() {
      return _getMarketModules.apply(this, arguments);
    }

    return getMarketModules;
  }()
  /**
   * Method to get a list of Drop module metadata.
   * @returns A promise of an array of Drop modules.
   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead
   */
  ;

  _proto.getDropModules =
  /*#__PURE__*/
  function () {
    var _getDropModules = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.t0 = this;
              _context18.next = 3;
              return this.getDropAddress();

            case 3:
              _context18.t1 = _context18.sent;
              _context18.next = 6;
              return _context18.t0.getAllContractMetadata.call(_context18.t0, _context18.t1);

            case 6:
              return _context18.abrupt("return", _context18.sent.map(function (m) {
                return _extends({}, m, {
                  type: ModuleType.DROP
                });
              }));

            case 7:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function getDropModules() {
      return _getDropModules.apply(this, arguments);
    }

    return getDropModules;
  }()
  /**
   * Method to get a list of all module metadata on a given app.
   * @public
   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.
   * @returns Array of module metadata
   */
  ;

  _proto.getAllModuleMetadata =
  /*#__PURE__*/
  function () {
    var _getAllModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(filterByModuleType) {
      var _this3 = this;

      var moduleTypesToGet;
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              moduleTypesToGet = filterByModuleType || [ModuleType.NFT, ModuleType.BUNDLE, ModuleType.PACK, ModuleType.TOKEN, ModuleType.MARKET, ModuleType.DATASTORE, ModuleType.DROP, ModuleType.BUNDLE_DROP, ModuleType.VOTE];
              _context20.next = 3;
              return Promise.all(moduleTypesToGet.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(moduleType) {
                  var moduleAddresses;
                  return runtime_1.wrap(function _callee19$(_context19) {
                    while (1) {
                      switch (_context19.prev = _context19.next) {
                        case 0:
                          _context19.next = 2;
                          return _this3.getModuleAddress(moduleType);

                        case 2:
                          moduleAddresses = _context19.sent;
                          _context19.next = 5;
                          return _this3.getAllContractMetadata(moduleAddresses);

                        case 5:
                          return _context19.abrupt("return", _context19.sent.map(function (m) {
                            return _extends({}, m, {
                              type: moduleType
                            });
                          }));

                        case 6:
                        case "end":
                          return _context19.stop();
                      }
                    }
                  }, _callee19);
                }));

                return function (_x5) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 3:
              return _context20.abrupt("return", _context20.sent.reduce(function (acc, curr) {
                return acc.concat(curr);
              }, []));

            case 4:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }));

    function getAllModuleMetadata(_x4) {
      return _getAllModuleMetadata.apply(this, arguments);
    }

    return getAllModuleMetadata;
  }() // owner functions

  /**
   * @deprecated - Use setMetadata() instead
   */
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(metadata) {
      var uri;
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context21.sent;
              _context21.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context21.abrupt("return", _context21.sent);

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function setModuleMetadata(_x6) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRoyaltyTreasury = /*#__PURE__*/function () {
    var _setRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(treasury) {
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.sendTransaction("setRoyaltyTreasury", [treasury]);

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function setRoyaltyTreasury(_x7) {
      return _setRoyaltyTreasury.apply(this, arguments);
    }

    return setRoyaltyTreasury;
  }();

  _proto.setModuleRoyaltyTreasury = /*#__PURE__*/function () {
    var _setModuleRoyaltyTreasury = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(moduleAddress, treasury) {
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.sendTransaction("setModuleRoyaltyTreasury", [moduleAddress, treasury]);

            case 2:
              return _context23.abrupt("return", _context23.sent);

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function setModuleRoyaltyTreasury(_x8, _x9) {
      return _setModuleRoyaltyTreasury.apply(this, arguments);
    }

    return setModuleRoyaltyTreasury;
  }();

  _proto.withdrawFunds = /*#__PURE__*/function () {
    var _withdrawFunds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(to, currency) {
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.sendTransaction("withdrawFunds", [to, currency]);

            case 2:
              return _context24.abrupt("return", _context24.sent);

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function withdrawFunds(_x10, _x11) {
      return _withdrawFunds.apply(this, arguments);
    }

    return withdrawFunds;
  }()
  /**
   * Helper method that handles `image` property uploads if its a file
   *
   * @param metadata - The metadata of the module to be deployed
   * @returns - The sanitized metadata with an uploaded image ipfs hash
   */
  ;

  _proto._prepareMetadata =
  /*#__PURE__*/
  function () {
    var _prepareMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(metadata) {
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              if (!(typeof metadata.image === "string")) {
                _context25.next = 2;
                break;
              }

              return _context25.abrupt("return", Promise.resolve(metadata));

            case 2:
              if (!(metadata.image === undefined)) {
                _context25.next = 4;
                break;
              }

              return _context25.abrupt("return", Promise.resolve(metadata));

            case 4:
              _context25.t0 = this.sdk.getStorage();
              _context25.t1 = metadata.image;
              _context25.t2 = this.address;
              _context25.next = 9;
              return this.getSignerAddress();

            case 9:
              _context25.t3 = _context25.sent;
              _context25.next = 12;
              return _context25.t0.upload.call(_context25.t0, _context25.t1, _context25.t2, _context25.t3);

            case 12:
              metadata.image = _context25.sent;
              return _context25.abrupt("return", Promise.resolve(metadata));

            case 14:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function _prepareMetadata(_x12) {
      return _prepareMetadata2.apply(this, arguments);
    }

    return _prepareMetadata;
  }()
  /**
   * Helper method that deploys a module and returns its address
   *
   * @internal
   *
   * @param moduleType - The ModuleType to deploy
   * @param args - Constructor arguments for the module
   * @param factory - The ABI factory used to call the `deploy` method
   * @returns The address of the deployed module
   */
  ;

  _proto._deployModule =
  /*#__PURE__*/
  function () {
    var _deployModule2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(moduleType, args, factory) {
      var _ethers$ContractFacto;

      var gasPrice, txOpts, tx, contractAddress, addModuleTx;
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this.sdk.getGasPrice();

            case 2:
              gasPrice = _context26.sent;
              txOpts = gasPrice ? {
                gasPrice: ethers.utils.parseUnits(gasPrice.toString(), "gwei")
              } : {};
              _context26.next = 6;
              return (_ethers$ContractFacto = new ethers.ContractFactory(factory.abi, factory.bytecode).connect(this.signer)).deploy.apply(_ethers$ContractFacto, args.concat([txOpts]));

            case 6:
              tx = _context26.sent;
              _context26.next = 9;
              return tx.deployed();

            case 9:
              contractAddress = tx.address;
              _context26.next = 12;
              return this.contract.addModule(contractAddress, moduleType, txOpts);

            case 12:
              addModuleTx = _context26.sent;
              _context26.next = 15;
              return addModuleTx.wait();

            case 15:
              return _context26.abrupt("return", contractAddress);

            case 16:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function _deployModule(_x13, _x14, _x15) {
      return _deployModule2.apply(this, arguments);
    }

    return _deployModule;
  }()
  /**
   * Deploys a collection module.
   *
   * @param metadata - Metadata about the module.
   * @returns A promise with the newly created module.
   */
  ;

  _proto.deployBundleModule =
  /*#__PURE__*/
  function () {
    var _deployBundleModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.t0 = this.jsonConvert;
              _context27.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context27.t1 = _context27.sent;
              _context27.t2 = BundleModuleMetadata$1;
              serializedMetadata = _context27.t0.serializeObject.call(_context27.t0, _context27.t1, _context27.t2);
              _context27.t3 = this.sdk.getStorage();
              _context27.t4 = serializedMetadata;
              _context27.t5 = this.address;
              _context27.next = 11;
              return this.getSignerAddress();

            case 11:
              _context27.t6 = _context27.sent;
              _context27.next = 14;
              return _context27.t3.uploadMetadata.call(_context27.t3, _context27.t4, _context27.t5, _context27.t6);

            case 14:
              metadataUri = _context27.sent;
              _context27.t7 = this;
              _context27.t8 = ModuleType.COLLECTION;
              _context27.t9 = this.address;
              _context27.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context27.t10 = _context27.sent;
              _context27.t11 = metadataUri;
              _context27.t12 = BigNumber.from(metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0);
              _context27.t13 = [_context27.t9, _context27.t10, _context27.t11, _context27.t12];
              _context27.t14 = NFTCollection__factory;
              _context27.next = 27;
              return _context27.t7._deployModule.call(_context27.t7, _context27.t8, _context27.t13, _context27.t14);

            case 27:
              address = _context27.sent;
              return _context27.abrupt("return", this.sdk.getCollectionModule(address));

            case 29:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function deployBundleModule(_x16) {
      return _deployBundleModule.apply(this, arguments);
    }

    return deployBundleModule;
  }()
  /**
   * Deploys a Splits module
   *
   * @param metadata - The module metadata
   * @returns - The deployed splits module
   */
  ;

  _proto.deploySplitsModule =
  /*#__PURE__*/
  function () {
    var _deploySplitsModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.t0 = this.jsonConvert;
              _context28.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context28.t1 = _context28.sent;
              _context28.t2 = SplitsModuleMetadata$1;
              serializedMetadata = _context28.t0.serializeObject.call(_context28.t0, _context28.t1, _context28.t2);
              _context28.t3 = this.sdk.getStorage();
              _context28.t4 = serializedMetadata;
              _context28.t5 = this.address;
              _context28.next = 11;
              return this.getSignerAddress();

            case 11:
              _context28.t6 = _context28.sent;
              _context28.next = 14;
              return _context28.t3.uploadMetadata.call(_context28.t3, _context28.t4, _context28.t5, _context28.t6);

            case 14:
              metadataUri = _context28.sent;
              _context28.t7 = this;
              _context28.t8 = ModuleType.SPLITS;
              _context28.t9 = this.address;
              _context28.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context28.t10 = _context28.sent;
              _context28.t11 = metadataUri;
              _context28.t12 = metadata.recipientSplits.map(function (s) {
                return s.address;
              });
              _context28.t13 = metadata.recipientSplits.map(function (s) {
                return s.shares;
              });
              _context28.t14 = [_context28.t9, _context28.t10, _context28.t11, _context28.t12, _context28.t13];
              _context28.t15 = Royalty__factory;
              _context28.next = 28;
              return _context28.t7._deployModule.call(_context28.t7, _context28.t8, _context28.t14, _context28.t15);

            case 28:
              address = _context28.sent;
              return _context28.abrupt("return", this.sdk.getSplitsModule(address));

            case 30:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function deploySplitsModule(_x17) {
      return _deploySplitsModule.apply(this, arguments);
    }

    return deploySplitsModule;
  }()
  /**
   * Deploys a NFT module.
   *
   * @param metadata - The module metadata
   * @returns - The deployed NFT module
   */
  ;

  _proto.deployNftModule =
  /*#__PURE__*/
  function () {
    var _deployNftModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              _context29.t0 = this.jsonConvert;
              _context29.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context29.t1 = _context29.sent;
              _context29.t2 = NftModuleMetadata$1;
              serializedMetadata = _context29.t0.serializeObject.call(_context29.t0, _context29.t1, _context29.t2);
              _context29.t3 = this.sdk.getStorage();
              _context29.t4 = serializedMetadata;
              _context29.t5 = this.address;
              _context29.next = 11;
              return this.getSignerAddress();

            case 11:
              _context29.t6 = _context29.sent;
              _context29.next = 14;
              return _context29.t3.uploadMetadata.call(_context29.t3, _context29.t4, _context29.t5, _context29.t6);

            case 14:
              metadataUri = _context29.sent;
              _context29.t7 = this;
              _context29.t8 = ModuleType.NFT;
              _context29.t9 = this.address;
              _context29.t10 = metadata.name;
              _context29.t11 = metadata.symbol ? metadata.symbol : "";
              _context29.next = 22;
              return this.sdk.getForwarderAddress();

            case 22:
              _context29.t12 = _context29.sent;
              _context29.t13 = metadataUri;
              _context29.t14 = metadata.sellerFeeBasisPoints;
              _context29.t15 = [_context29.t9, _context29.t10, _context29.t11, _context29.t12, _context29.t13, _context29.t14];
              _context29.t16 = NFT__factory;
              _context29.next = 29;
              return _context29.t7._deployModule.call(_context29.t7, _context29.t8, _context29.t15, _context29.t16);

            case 29:
              address = _context29.sent;
              return _context29.abrupt("return", this.sdk.getNFTModule(address));

            case 31:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29, this);
    }));

    function deployNftModule(_x18) {
      return _deployNftModule.apply(this, arguments);
    }

    return deployNftModule;
  }()
  /**
   * Deploys a currency module.
   *
   * @param metadata - The module metadata
   * @returns - The deployed currency module
   */
  ;

  _proto.deployCurrencyModule =
  /*#__PURE__*/
  function () {
    var _deployCurrencyModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _context30.t0 = this.jsonConvert;
              _context30.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context30.t1 = _context30.sent;
              _context30.t2 = CurrencyModuleMetadata$1;
              serializedMetadata = _context30.t0.serializeObject.call(_context30.t0, _context30.t1, _context30.t2);
              _context30.t3 = this.sdk.getStorage();
              _context30.t4 = serializedMetadata;
              _context30.t5 = this.address;
              _context30.next = 11;
              return this.getSignerAddress();

            case 11:
              _context30.t6 = _context30.sent;
              _context30.next = 14;
              return _context30.t3.uploadMetadata.call(_context30.t3, _context30.t4, _context30.t5, _context30.t6);

            case 14:
              metadataUri = _context30.sent;
              _context30.t7 = this;
              _context30.t8 = ModuleType.CURRENCY;
              _context30.t9 = this.address;
              _context30.t10 = metadata.name;
              _context30.t11 = metadata.symbol ? metadata.symbol : "";
              _context30.next = 22;
              return this.sdk.getForwarderAddress();

            case 22:
              _context30.t12 = _context30.sent;
              _context30.t13 = metadataUri;
              _context30.t14 = [_context30.t9, _context30.t10, _context30.t11, _context30.t12, _context30.t13];
              _context30.t15 = Coin__factory;
              _context30.next = 28;
              return _context30.t7._deployModule.call(_context30.t7, _context30.t8, _context30.t14, _context30.t15);

            case 28:
              address = _context30.sent;
              return _context30.abrupt("return", this.sdk.getCurrencyModule(address));

            case 30:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30, this);
    }));

    function deployCurrencyModule(_x19) {
      return _deployCurrencyModule.apply(this, arguments);
    }

    return deployCurrencyModule;
  }()
  /**
   * Deploys a token module.
   *
   * @param metadata - The module metadata
   * @returns - The deployed currency module
   */
  ;

  _proto.deployTokenModule =
  /*#__PURE__*/
  function () {
    var _deployTokenModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.t0 = this.jsonConvert;
              _context31.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context31.t1 = _context31.sent;
              _context31.t2 = CurrencyModuleMetadata$1;
              serializedMetadata = _context31.t0.serializeObject.call(_context31.t0, _context31.t1, _context31.t2);
              _context31.t3 = this.sdk.getStorage();
              _context31.t4 = serializedMetadata;
              _context31.t5 = this.address;
              _context31.next = 11;
              return this.getSignerAddress();

            case 11:
              _context31.t6 = _context31.sent;
              _context31.next = 14;
              return _context31.t3.uploadMetadata.call(_context31.t3, _context31.t4, _context31.t5, _context31.t6);

            case 14:
              metadataUri = _context31.sent;
              _context31.t7 = this;
              _context31.t8 = ModuleType.CURRENCY;
              _context31.t9 = this.address;
              _context31.t10 = metadata.name;
              _context31.t11 = metadata.symbol ? metadata.symbol : "";
              _context31.next = 22;
              return this.sdk.getForwarderAddress();

            case 22:
              _context31.t12 = _context31.sent;
              _context31.t13 = metadataUri;
              _context31.t14 = [_context31.t9, _context31.t10, _context31.t11, _context31.t12, _context31.t13];
              _context31.t15 = Coin__factory;
              _context31.next = 28;
              return _context31.t7._deployModule.call(_context31.t7, _context31.t8, _context31.t14, _context31.t15);

            case 28:
              address = _context31.sent;
              return _context31.abrupt("return", this.sdk.getTokenModule(address));

            case 30:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31, this);
    }));

    function deployTokenModule(_x20) {
      return _deployTokenModule.apply(this, arguments);
    }

    return deployTokenModule;
  }()
  /**
   * Deploys a Marketplace module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Marketplace module
   */
  ;

  _proto.deployMarketModule =
  /*#__PURE__*/
  function () {
    var _deployMarketModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.t0 = this.jsonConvert;
              _context32.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context32.t1 = _context32.sent;
              _context32.t2 = MarketModuleMetadata$1;
              serializedMetadata = _context32.t0.serializeObject.call(_context32.t0, _context32.t1, _context32.t2);
              _context32.t3 = this.sdk.getStorage();
              _context32.t4 = serializedMetadata;
              _context32.t5 = this.address;
              _context32.next = 11;
              return this.getSignerAddress();

            case 11:
              _context32.t6 = _context32.sent;
              _context32.next = 14;
              return _context32.t3.uploadMetadata.call(_context32.t3, _context32.t4, _context32.t5, _context32.t6);

            case 14:
              metadataUri = _context32.sent;
              _context32.t7 = this;
              _context32.t8 = ModuleType.MARKET;
              _context32.t9 = this.address;
              _context32.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context32.t10 = _context32.sent;
              _context32.t11 = metadataUri;
              _context32.t12 = metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0;
              _context32.t13 = [_context32.t9, _context32.t10, _context32.t11, _context32.t12];
              _context32.t14 = Market__factory;
              _context32.next = 27;
              return _context32.t7._deployModule.call(_context32.t7, _context32.t8, _context32.t13, _context32.t14);

            case 27:
              address = _context32.sent;
              return _context32.abrupt("return", this.sdk.getMarketModule(address));

            case 29:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32, this);
    }));

    function deployMarketModule(_x21) {
      return _deployMarketModule.apply(this, arguments);
    }

    return deployMarketModule;
  }()
  /**
   * Deploys a Pack module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Pack module
   */
  ;

  _proto.deployPackModule =
  /*#__PURE__*/
  function () {
    var _deployPackModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(metadata) {
      var serializedMetadata, metadataUri, chainId, _ChainlinkVrf$chainId, vrfCoordinator, linkTokenAddress, keyHash, fees, address;

      return runtime_1.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              _context33.t0 = this.jsonConvert;
              _context33.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context33.t1 = _context33.sent;
              _context33.t2 = PackModuleMetadata$1;
              serializedMetadata = _context33.t0.serializeObject.call(_context33.t0, _context33.t1, _context33.t2);
              _context33.t3 = this.sdk.getStorage();
              _context33.t4 = serializedMetadata;
              _context33.t5 = this.address;
              _context33.next = 11;
              return this.getSignerAddress();

            case 11:
              _context33.t6 = _context33.sent;
              _context33.next = 14;
              return _context33.t3.uploadMetadata.call(_context33.t3, _context33.t4, _context33.t5, _context33.t6);

            case 14:
              metadataUri = _context33.sent;
              _context33.next = 17;
              return this.getChainID();

            case 17:
              chainId = _context33.sent;
              _ChainlinkVrf$chainId = ChainlinkVrf[chainId], vrfCoordinator = _ChainlinkVrf$chainId.vrfCoordinator, linkTokenAddress = _ChainlinkVrf$chainId.linkTokenAddress, keyHash = _ChainlinkVrf$chainId.keyHash, fees = _ChainlinkVrf$chainId.fees;
              _context33.t7 = this;
              _context33.t8 = ModuleType.PACK;
              _context33.t9 = this.address;
              _context33.t10 = metadataUri;
              _context33.t11 = vrfCoordinator;
              _context33.t12 = linkTokenAddress;
              _context33.t13 = keyHash;
              _context33.t14 = fees;
              _context33.next = 29;
              return this.sdk.getForwarderAddress();

            case 29:
              _context33.t15 = _context33.sent;
              _context33.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;
              _context33.t17 = [_context33.t9, _context33.t10, _context33.t11, _context33.t12, _context33.t13, _context33.t14, _context33.t15, _context33.t16];
              _context33.t18 = Pack__factory;
              _context33.next = 35;
              return _context33.t7._deployModule.call(_context33.t7, _context33.t8, _context33.t17, _context33.t18);

            case 35:
              address = _context33.sent;
              return _context33.abrupt("return", this.sdk.getPackModule(address));

            case 37:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33, this);
    }));

    function deployPackModule(_x22) {
      return _deployPackModule.apply(this, arguments);
    }

    return deployPackModule;
  }()
  /**
   * Deploys a Drop module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Drop module
   */
  ;

  _proto.deployDropModule =
  /*#__PURE__*/
  function () {
    var _deployDropModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              !(metadata.maxSupply !== undefined) ? process.env.NODE_ENV !== "production" ? invariant(false, "Max supply must be specified") : invariant(false) : void 0;
              !(metadata.primarySaleRecipientAddress !== "" && isAddress(metadata.primarySaleRecipientAddress)) ? process.env.NODE_ENV !== "production" ? invariant(false, "Primary sale recipient address must be specified and must be a valid address") : invariant(false) : void 0;
              _context34.t0 = this.jsonConvert;
              _context34.next = 5;
              return this._prepareMetadata(metadata);

            case 5:
              _context34.t1 = _context34.sent;
              _context34.t2 = DropModuleMetadata$1;
              serializedMetadata = _context34.t0.serializeObject.call(_context34.t0, _context34.t1, _context34.t2);
              _context34.t3 = this.sdk.getStorage();
              _context34.t4 = serializedMetadata;
              _context34.t5 = this.address;
              _context34.next = 13;
              return this.getSignerAddress();

            case 13:
              _context34.t6 = _context34.sent;
              _context34.next = 16;
              return _context34.t3.uploadMetadata.call(_context34.t3, _context34.t4, _context34.t5, _context34.t6);

            case 16:
              metadataUri = _context34.sent;
              _context34.t7 = this;
              _context34.t8 = ModuleType.DROP;
              _context34.t9 = this.address;
              _context34.t10 = metadata.name;
              _context34.t11 = metadata.symbol ? metadata.symbol : "";
              _context34.next = 24;
              return this.sdk.getForwarderAddress();

            case 24:
              _context34.t12 = _context34.sent;
              _context34.t13 = metadataUri;
              _context34.t14 = metadata.baseTokenUri ? metadata.baseTokenUri : "";
              _context34.t15 = metadata.maxSupply;
              _context34.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;
              _context34.t17 = metadata.primarySaleFeeBasisPoints ? metadata.primarySaleFeeBasisPoints : 0;
              _context34.t18 = metadata.primarySaleRecipientAddress;
              _context34.t19 = [_context34.t9, _context34.t10, _context34.t11, _context34.t12, _context34.t13, _context34.t14, _context34.t15, _context34.t16, _context34.t17, _context34.t18];
              _context34.t20 = LazyNFT__factory;
              _context34.next = 35;
              return _context34.t7._deployModule.call(_context34.t7, _context34.t8, _context34.t19, _context34.t20);

            case 35:
              address = _context34.sent;
              return _context34.abrupt("return", this.sdk.getDropModule(address));

            case 37:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34, this);
    }));

    function deployDropModule(_x23) {
      return _deployDropModule.apply(this, arguments);
    }

    return deployDropModule;
  }()
  /**
   * Deploys a Bundle Drop module
   *
   * @param metadata - The module metadata
   * @returns - The deployed Bundle Drop module
   */
  ;

  _proto.deployBundleDropModule =
  /*#__PURE__*/
  function () {
    var _deployBundleDropModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(metadata) {
      var serializedMetadata, metadataUri, nativeTokenWrapperAddress, address;
      return runtime_1.wrap(function _callee35$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              !(metadata.primarySaleRecipientAddress !== "" && isAddress(metadata.primarySaleRecipientAddress)) ? process.env.NODE_ENV !== "production" ? invariant(false, "Primary sale recipient address must be specified and must be a valid address") : invariant(false) : void 0;
              _context35.t0 = this.jsonConvert;
              _context35.next = 4;
              return this._prepareMetadata(metadata);

            case 4:
              _context35.t1 = _context35.sent;
              _context35.t2 = DropModuleMetadata$1;
              serializedMetadata = _context35.t0.serializeObject.call(_context35.t0, _context35.t1, _context35.t2);
              _context35.t3 = this.sdk.getStorage();
              _context35.t4 = serializedMetadata;
              _context35.t5 = this.address;
              _context35.next = 12;
              return this.getSignerAddress();

            case 12:
              _context35.t6 = _context35.sent;
              _context35.next = 15;
              return _context35.t3.uploadMetadata.call(_context35.t3, _context35.t4, _context35.t5, _context35.t6);

            case 15:
              metadataUri = _context35.sent;
              _context35.t7 = getNativeTokenByChainId;
              _context35.next = 19;
              return this.getChainID();

            case 19:
              _context35.t8 = _context35.sent;
              nativeTokenWrapperAddress = (0, _context35.t7)(_context35.t8).wrapped.address;
              _context35.t9 = this;
              _context35.t10 = ModuleType.BUNDLE_DROP;
              _context35.t11 = metadataUri;
              _context35.t12 = this.address;
              _context35.next = 27;
              return this.sdk.getForwarderAddress();

            case 27:
              _context35.t13 = _context35.sent;
              _context35.t14 = nativeTokenWrapperAddress;
              _context35.t15 = metadata.primarySaleRecipientAddress;
              _context35.t16 = metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0;
              _context35.t17 = metadata.primarySaleFeeBasisPoints ? metadata.primarySaleFeeBasisPoints : 0;
              _context35.t18 = [_context35.t11, _context35.t12, _context35.t13, _context35.t14, _context35.t15, _context35.t16, _context35.t17];
              _context35.t19 = LazyMintERC1155__factory;
              _context35.next = 36;
              return _context35.t9._deployModule.call(_context35.t9, _context35.t10, _context35.t18, _context35.t19);

            case 36:
              address = _context35.sent;
              return _context35.abrupt("return", this.sdk.getBundleDropModule(address));

            case 38:
            case "end":
              return _context35.stop();
          }
        }
      }, _callee35, this);
    }));

    function deployBundleDropModule(_x24) {
      return _deployBundleDropModule.apply(this, arguments);
    }

    return deployBundleDropModule;
  }()
  /**
   * Deploys a Datastore module
   *
   * @alpha
   * @param metadata - The module metadata
   * @returns - The deployed Datastore module
   */
  ;

  _proto.deployDatastoreModule =
  /*#__PURE__*/
  function () {
    var _deployDatastoreModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36(metadata) {
      var serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              _context36.t0 = this.jsonConvert;
              _context36.next = 3;
              return this._prepareMetadata(metadata);

            case 3:
              _context36.t1 = _context36.sent;
              _context36.t2 = DatastoreModuleMetadata$1;
              serializedMetadata = _context36.t0.serializeObject.call(_context36.t0, _context36.t1, _context36.t2);
              _context36.t3 = this.sdk.getStorage();
              _context36.t4 = serializedMetadata;
              _context36.t5 = this.address;
              _context36.next = 11;
              return this.getSignerAddress();

            case 11:
              _context36.t6 = _context36.sent;
              _context36.next = 14;
              return _context36.t3.uploadMetadata.call(_context36.t3, _context36.t4, _context36.t5, _context36.t6);

            case 14:
              metadataUri = _context36.sent;
              _context36.t7 = this;
              _context36.t8 = ModuleType.DATASTORE;
              _context36.t9 = this.address;
              _context36.next = 20;
              return this.sdk.getForwarderAddress();

            case 20:
              _context36.t10 = _context36.sent;
              _context36.t11 = metadataUri;
              _context36.t12 = [_context36.t9, _context36.t10, _context36.t11];
              _context36.t13 = DataStore__factory;
              _context36.next = 26;
              return _context36.t7._deployModule.call(_context36.t7, _context36.t8, _context36.t12, _context36.t13);

            case 26:
              address = _context36.sent;
              return _context36.abrupt("return", this.sdk.getDatastoreModule(address));

            case 28:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36, this);
    }));

    function deployDatastoreModule(_x25) {
      return _deployDatastoreModule.apply(this, arguments);
    }

    return deployDatastoreModule;
  }()
  /**
   * Deploys a Vote module
   *
   * @param metadata - The module metadata
   * @returns - The deployed vote module
   */
  ;

  _proto.deployVoteModule =
  /*#__PURE__*/
  function () {
    var _deployVoteModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37(metadata) {
      var chainId, timeBetweenBlocks, waitTimeInBlocks, votingTimeInBlocks, serializedMetadata, metadataUri, address;
      return runtime_1.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              !(metadata.votingTokenAddress !== "" && isAddress(metadata.votingTokenAddress)) ? process.env.NODE_ENV !== "production" ? invariant(false, "Voting Token Address must be a valid address") : invariant(false) : void 0;
              !(metadata.votingQuorumFraction >= 0 && metadata.votingQuorumFraction <= 100) ? process.env.NODE_ENV !== "production" ? invariant(false, "Quofrum Fraction must be in the range of 0-100 representing percentage") : invariant(false) : void 0;
              _context37.next = 4;
              return this.getChainID();

            case 4:
              chainId = _context37.sent;
              timeBetweenBlocks = DEFAULT_BLOCK_TIMES_FALLBACK[chainId];
              waitTimeInBlocks = metadata.proposalStartWaitTimeInSeconds / timeBetweenBlocks.secondsBetweenBlocks;
              votingTimeInBlocks = metadata.proposalVotingTimeInSeconds / timeBetweenBlocks.secondsBetweenBlocks;
              metadata.votingDelay = waitTimeInBlocks;
              metadata.votingPeriod = votingTimeInBlocks; // verify making sure that the voting token address is valid

              _context37.prev = 10;
              _context37.next = 13;
              return Coin__factory.connect(metadata.votingTokenAddress, this.readOnlyContract.provider).callStatic.getPastTotalSupply(0);

            case 13:
              _context37.next = 18;
              break;

            case 15:
              _context37.prev = 15;
              _context37.t0 = _context37["catch"](10);
               process.env.NODE_ENV !== "production" ? invariant(false, "Token is not compatible with the vote module") : invariant(false) ;

            case 18:
              _context37.t1 = this.jsonConvert;
              _context37.next = 21;
              return this._prepareMetadata(metadata);

            case 21:
              _context37.t2 = _context37.sent;
              _context37.t3 = VoteModuleMetadata$1;
              serializedMetadata = _context37.t1.serializeObject.call(_context37.t1, _context37.t2, _context37.t3);
              _context37.t4 = this.sdk.getStorage();
              _context37.t5 = serializedMetadata;
              _context37.t6 = this.address;
              _context37.next = 29;
              return this.getSignerAddress();

            case 29:
              _context37.t7 = _context37.sent;
              _context37.next = 32;
              return _context37.t4.uploadMetadata.call(_context37.t4, _context37.t5, _context37.t6, _context37.t7);

            case 32:
              metadataUri = _context37.sent;
              _context37.t8 = this;
              _context37.t9 = ModuleType.VOTE;
              _context37.t10 = metadata.name;
              _context37.t11 = metadata.votingTokenAddress;
              _context37.t12 = metadata.votingDelay;
              _context37.t13 = metadata.votingPeriod;
              _context37.t14 = metadata.minimumNumberOfTokensNeededToPropose;
              _context37.t15 = metadata.votingQuorumFraction;
              _context37.next = 43;
              return this.sdk.getForwarderAddress();

            case 43:
              _context37.t16 = _context37.sent;
              _context37.t17 = metadataUri;
              _context37.t18 = [_context37.t10, _context37.t11, _context37.t12, _context37.t13, _context37.t14, _context37.t15, _context37.t16, _context37.t17];
              _context37.t19 = VotingGovernor__factory;
              _context37.next = 49;
              return _context37.t8._deployModule.call(_context37.t8, _context37.t9, _context37.t18, _context37.t19);

            case 49:
              address = _context37.sent;
              return _context37.abrupt("return", this.sdk.getVoteModule(address));

            case 51:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37, this, [[10, 15]]);
    }));

    function deployVoteModule(_x26) {
      return _deployVoteModule.apply(this, arguments);
    }

    return deployVoteModule;
  }()
  /**
   * Check the balance of the project wallet in the native token of the chain
   *
   * @returns - The balance of the project in the native token of the chain
   */
  ;

  _proto.balance =
  /*#__PURE__*/
  function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38() {
      var walletBalance;
      return runtime_1.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return this.readOnlyContract.provider.getBalance(this.address);

            case 2:
              walletBalance = _context38.sent;
              return _context38.abrupt("return", walletBalance);

            case 4:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }()
  /**
   * Check the balance of the project wallet in a particular
   * ERC20 token contract
   *
   * @returns - The balance of the project in the native token of the chain
   */
  ;

  _proto.balanceOfToken =
  /*#__PURE__*/
  function () {
    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39(tokenAddress) {
      var erc20;
      return runtime_1.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);
              _context39.t0 = getCurrencyValue;
              _context39.t1 = this.providerOrSigner;
              _context39.t2 = tokenAddress;
              _context39.next = 6;
              return erc20.balanceOf(this.address);

            case 6:
              _context39.t3 = _context39.sent;
              _context39.next = 9;
              return (0, _context39.t0)(_context39.t1, _context39.t2, _context39.t3);

            case 9:
              return _context39.abrupt("return", _context39.sent);

            case 10:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39, this);
    }));

    function balanceOfToken(_x27) {
      return _balanceOfToken.apply(this, arguments);
    }

    return balanceOfToken;
  }();

  return AppModule;
}(ModuleWithRoles);
AppModule.roles = [RolesMap.admin];

/**
 * Access this module by calling {@link ThirdwebSDK.getBundleModule}
 * @beta
 */

var BundleModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(BundleModule, _ModuleWithRoles);

  function BundleModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = BundleModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return BundleModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return NFTCollection__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return BundleModule.moduleType;
  }
  /**
   *
   * Get a single bundle item by tokenId.
   * @param tokenId - the unique token id of the nft
   * @returns A promise that resolves to a `BundleMetadata`.
   */
  ;

  _proto.get =
  /*#__PURE__*/
  function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId, address) {
      var _yield$Promise$all, metadata, creator, supply, ownedByAddress;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = Promise;
              _context.t1 = getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl);
              _context.t2 = this.readOnlyContract.creator(tokenId);
              _context.t3 = this.readOnlyContract.totalSupply(tokenId)["catch"](function () {
                return BigNumber$1.from("0");
              });

              if (!address) {
                _context.next = 10;
                break;
              }

              _context.next = 7;
              return this.balanceOf(address, tokenId);

            case 7:
              _context.t4 = _context.sent.toNumber();
              _context.next = 11;
              break;

            case 10:
              _context.t4 = 0;

            case 11:
              _context.t5 = _context.t4;
              _context.t6 = [_context.t1, _context.t2, _context.t3, _context.t5];
              _context.next = 15;
              return _context.t0.all.call(_context.t0, _context.t6);

            case 15:
              _yield$Promise$all = _context.sent;
              metadata = _yield$Promise$all[0];
              creator = _yield$Promise$all[1];
              supply = _yield$Promise$all[2];
              ownedByAddress = _yield$Promise$all[3];
              return _context.abrupt("return", {
                creator: creator,
                supply: supply,
                metadata: metadata,
                ownedByAddress: ownedByAddress
              });

            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get(_x, _x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }()
  /**
   * Return all items in the bundle.
   * @returns An array of `INFTBundle`.
   */
  ;

  _proto.getAll =
  /*#__PURE__*/
  function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(address) {
      var _this = this;

      var maxId;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context2.sent.toNumber();
              _context2.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this.get(i.toString(), address);
              }));

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getAll(_x3) {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(address, tokenId) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.balanceOf(address, tokenId);

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function balanceOf(_x4, _x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tokenId) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = this.readOnlyContract;
              _context4.next = 3;
              return this.getSignerAddress();

            case 3:
              _context4.t1 = _context4.sent;
              _context4.t2 = tokenId;
              _context4.next = 7;
              return _context4.t0.balanceOf.call(_context4.t0, _context4.t1, _context4.t2);

            case 7:
              return _context4.abrupt("return", _context4.sent);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balance(_x6) {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, operator, assetContract, assetId) {
      var contract, approved, isTokenApproved;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (assetContract) {
                _context5.next = 4;
                break;
              }

              _context5.next = 3;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 3:
              return _context5.abrupt("return", _context5.sent);

            case 4:
              if (assetId) {
                _context5.next = 6;
                break;
              }

              throw new Error("tokenId is required");

            case 6:
              contract = ERC721__factory.connect(assetContract, this.providerOrSigner);
              _context5.t0 = contract;
              _context5.next = 10;
              return this.getSignerAddress();

            case 10:
              _context5.t1 = _context5.sent;
              _context5.t2 = this.address;
              _context5.next = 14;
              return _context5.t0.isApprovedForAll.call(_context5.t0, _context5.t1, _context5.t2);

            case 14:
              approved = _context5.sent;
              _context5.next = 17;
              return contract.getApproved(assetId);

            case 17:
              _context5.t3 = _context5.sent.toLowerCase();
              _context5.t4 = this.address.toLowerCase();
              isTokenApproved = _context5.t3 === _context5.t4;
              return _context5.abrupt("return", approved || isTokenApproved);

            case 21:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function isApproved(_x7, _x8, _x9, _x10) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions
  ;

  _proto.setApproval =
  /*#__PURE__*/
  function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(operator, approved) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context6.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context6.abrupt("return", _context6.sent);

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function setApproval(_x11, _x12) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(to, tokenId, amount) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = this;
              _context7.next = 3;
              return this.getSignerAddress();

            case 3:
              _context7.t1 = _context7.sent;
              _context7.t2 = to;
              _context7.t3 = {
                tokenId: tokenId,
                amount: amount
              };
              _context7.t4 = [0];
              _context7.next = 9;
              return _context7.t0.transferFrom.call(_context7.t0, _context7.t1, _context7.t2, _context7.t3, _context7.t4);

            case 9:
              return _context7.abrupt("return", _context7.sent);

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function transfer(_x13, _x14, _x15) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.create =
  /*#__PURE__*/
  function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(metadata) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.createBatch([metadata]);

            case 2:
              return _context8.abrupt("return", _context8.sent[0]);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function create(_x16) {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  _proto.createBatch = /*#__PURE__*/function () {
    var _createBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(metadatas) {
      var metadataWithSupply;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              metadataWithSupply = metadatas.map(function (m) {
                return {
                  metadata: m,
                  supply: 0
                };
              });
              return _context9.abrupt("return", this.createAndMintBatch(metadataWithSupply));

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function createBatch(_x17) {
      return _createBatch.apply(this, arguments);
    }

    return createBatch;
  }();

  _proto.createAndMint = /*#__PURE__*/function () {
    var _createAndMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(metadataWithSupply) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.createAndMintBatch([metadataWithSupply]);

            case 2:
              return _context10.abrupt("return", _context10.sent[0]);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function createAndMint(_x18) {
      return _createAndMint.apply(this, arguments);
    }

    return createAndMint;
  }();

  _proto.createAndMintBatch = /*#__PURE__*/function () {
    var _createAndMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadataWithSupply) {
      var _this2 = this;

      var uris, supplies, to, receipt, event, tokenIds;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return Promise.all(metadataWithSupply.map(function (a) {
                return a.metadata;
              }).map(function (a) {
                return _this2.sdk.getStorage().uploadMetadata(a);
              }));

            case 2:
              uris = _context11.sent;
              supplies = metadataWithSupply.map(function (a) {
                return a.supply;
              });
              _context11.next = 6;
              return this.getSignerAddress();

            case 6:
              to = _context11.sent;
              _context11.next = 9;
              return this.sendTransaction("createNativeTokens", [to, uris, supplies, [0]]);

            case 9:
              receipt = _context11.sent;
              event = this.parseEventLogs("NativeTokens", receipt == null ? void 0 : receipt.logs);
              tokenIds = event == null ? void 0 : event.tokenIds;
              _context11.next = 14;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this2.get(tokenId.toString());
              }));

            case 14:
              return _context11.abrupt("return", _context11.sent);

            case 15:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function createAndMintBatch(_x19) {
      return _createAndMintBatch.apply(this, arguments);
    }

    return createAndMintBatch;
  }();

  _proto.createWithToken = /*#__PURE__*/function () {
    var _createWithToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(tokenContract, tokenAmount, args) {
      var token, allowance, uri;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              token = ERC20__factory.connect(tokenContract, this.providerOrSigner);
              _context12.t0 = token;
              _context12.next = 4;
              return this.getSignerAddress();

            case 4:
              _context12.t1 = _context12.sent;
              _context12.t2 = this.address;
              _context12.next = 8;
              return _context12.t0.allowance.call(_context12.t0, _context12.t1, _context12.t2);

            case 8:
              allowance = _context12.sent;

              if (!(allowance < tokenAmount)) {
                _context12.next = 12;
                break;
              }

              _context12.next = 12;
              return token.increaseAllowance(this.address, tokenAmount);

            case 12:
              _context12.next = 14;
              return this.sdk.getStorage().uploadMetadata(args.metadata);

            case 14:
              uri = _context12.sent;
              _context12.next = 17;
              return this.sendTransaction("wrapERC20", [tokenContract, tokenAmount, args.supply, uri]);

            case 17:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function createWithToken(_x20, _x21, _x22) {
      return _createWithToken.apply(this, arguments);
    }

    return createWithToken;
  }();

  _proto.createWithErc20 = /*#__PURE__*/function () {
    var _createWithErc = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(tokenContract, tokenAmount, args) {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              return _context13.abrupt("return", this.createWithToken(tokenContract, tokenAmount, args));

            case 1:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function createWithErc20(_x23, _x24, _x25) {
      return _createWithErc.apply(this, arguments);
    }

    return createWithErc20;
  }();

  _proto.createWithNFT = /*#__PURE__*/function () {
    var _createWithNFT = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(tokenContract, tokenId, metadata) {
      var asset, isTokenApproved, uri;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              asset = ERC721__factory.connect(tokenContract, this.providerOrSigner);
              _context14.t0 = asset;
              _context14.next = 4;
              return this.getSignerAddress();

            case 4:
              _context14.t1 = _context14.sent;
              _context14.t2 = this.address;
              _context14.next = 8;
              return _context14.t0.isApprovedForAll.call(_context14.t0, _context14.t1, _context14.t2);

            case 8:
              if (_context14.sent) {
                _context14.next = 17;
                break;
              }

              _context14.next = 11;
              return asset.getApproved(tokenId);

            case 11:
              _context14.t3 = _context14.sent.toLowerCase();
              _context14.t4 = this.address.toLowerCase();
              isTokenApproved = _context14.t3 === _context14.t4;

              if (isTokenApproved) {
                _context14.next = 17;
                break;
              }

              _context14.next = 17;
              return asset.setApprovalForAll(this.address, true);

            case 17:
              _context14.next = 19;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 19:
              uri = _context14.sent;
              _context14.next = 22;
              return this.sendTransaction("wrapERC721", [tokenContract, tokenId, uri]);

            case 22:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function createWithNFT(_x26, _x27, _x28) {
      return _createWithNFT.apply(this, arguments);
    }

    return createWithNFT;
  }();

  _proto.createWithERC721 = /*#__PURE__*/function () {
    var _createWithERC = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(tokenContract, tokenId, metadata) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", this.createWithNFT(tokenContract, tokenId, metadata));

            case 1:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function createWithERC721(_x29, _x30, _x31) {
      return _createWithERC.apply(this, arguments);
    }

    return createWithERC721;
  }();

  _proto.mint = /*#__PURE__*/function () {
    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(args) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.t0 = this;
              _context16.next = 3;
              return this.getSignerAddress();

            case 3:
              _context16.t1 = _context16.sent;
              _context16.t2 = args;
              _context16.next = 7;
              return _context16.t0.mintTo.call(_context16.t0, _context16.t1, _context16.t2);

            case 7:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function mint(_x32) {
      return _mint.apply(this, arguments);
    }

    return mint;
  }();

  _proto.mintTo = /*#__PURE__*/function () {
    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(to, args, data) {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context17.next = 3;
              return this.sendTransaction("mint", [to, args.tokenId, args.amount, data]);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function mintTo(_x33, _x34, _x35) {
      return _mintTo.apply(this, arguments);
    }

    return mintTo;
  }();

  _proto.mintBatch = /*#__PURE__*/function () {
    var _mintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(args) {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.t0 = this;
              _context18.next = 3;
              return this.getSignerAddress();

            case 3:
              _context18.t1 = _context18.sent;
              _context18.t2 = args;
              _context18.next = 7;
              return _context18.t0.mintBatchTo.call(_context18.t0, _context18.t1, _context18.t2);

            case 7:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function mintBatch(_x36) {
      return _mintBatch.apply(this, arguments);
    }

    return mintBatch;
  }();

  _proto.mintBatchTo = /*#__PURE__*/function () {
    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(to, args, data) {
      var ids, amounts;
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context19.next = 5;
              return this.sendTransaction("mintBatch", [to, ids, amounts, data]);

            case 5:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function mintBatchTo(_x37, _x38, _x39) {
      return _mintBatchTo.apply(this, arguments);
    }

    return mintBatchTo;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(args) {
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.t0 = this;
              _context20.next = 3;
              return this.getSignerAddress();

            case 3:
              _context20.t1 = _context20.sent;
              _context20.t2 = args;
              _context20.next = 7;
              return _context20.t0.burnFrom.call(_context20.t0, _context20.t1, _context20.t2);

            case 7:
              return _context20.abrupt("return", _context20.sent);

            case 8:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function burn(_x40) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.burnBatch = /*#__PURE__*/function () {
    var _burnBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(args) {
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.t0 = this;
              _context21.next = 3;
              return this.getSignerAddress();

            case 3:
              _context21.t1 = _context21.sent;
              _context21.t2 = args;
              _context21.next = 7;
              return _context21.t0.burnBatchFrom.call(_context21.t0, _context21.t1, _context21.t2);

            case 7:
              return _context21.abrupt("return", _context21.sent);

            case 8:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function burnBatch(_x41) {
      return _burnBatch.apply(this, arguments);
    }

    return burnBatch;
  }();

  _proto.burnFrom = /*#__PURE__*/function () {
    var _burnFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(account, args) {
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.sendTransaction("burn", [account, args.tokenId, args.amount]);

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function burnFrom(_x42, _x43) {
      return _burnFrom.apply(this, arguments);
    }

    return burnFrom;
  }();

  _proto.burnBatchFrom = /*#__PURE__*/function () {
    var _burnBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(account, args) {
      var ids, amounts;
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context23.next = 4;
              return this.sendTransaction("burnBatch", [account, ids, amounts]);

            case 4:
              return _context23.abrupt("return", _context23.sent);

            case 5:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function burnBatchFrom(_x44, _x45) {
      return _burnBatchFrom.apply(this, arguments);
    }

    return burnBatchFrom;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(from, to, args, data) {
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context24.next = 3;
              return this.sendTransaction("safeTransferFrom", [from, to, args.tokenId, args.amount, data]);

            case 3:
              return _context24.abrupt("return", _context24.sent);

            case 4:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function transferFrom(_x46, _x47, _x48, _x49) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }();

  _proto.transferBatchFrom = /*#__PURE__*/function () {
    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(from, to, args, data) {
      var ids, amounts;
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context25.next = 5;
              return this.sendTransaction("safeBatchTransferFrom", [from, to, ids, amounts, data]);

            case 5:
              return _context25.abrupt("return", _context25.sent);

            case 6:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function transferBatchFrom(_x50, _x51, _x52, _x53) {
      return _transferBatchFrom.apply(this, arguments);
    }

    return transferBatchFrom;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(amount) {
      var _yield$this$getMetada, metadata, encoded, uri;

      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this.getMetadata();

            case 2:
              _yield$this$getMetada = _context26.sent;
              metadata = _yield$this$getMetada.metadata;
              encoded = [];

              if (metadata) {
                _context26.next = 7;
                break;
              }

              throw new Error("No metadata found, this module might be invalid!");

            case 7:
              metadata.seller_fee_basis_points = amount;
              _context26.t0 = this.sdk.getStorage();
              _context26.t1 = _extends({}, metadata);
              _context26.t2 = this.address;
              _context26.next = 13;
              return this.getSignerAddress();

            case 13:
              _context26.t3 = _context26.sent;
              _context26.next = 16;
              return _context26.t0.uploadMetadata.call(_context26.t0, _context26.t1, _context26.t2, _context26.t3);

            case 16:
              uri = _context26.sent;
              encoded.push(this.contract["interface"].encodeFunctionData("setRoyaltyBps", [amount]));
              encoded.push(this.contract["interface"].encodeFunctionData("setContractURI", [uri]));
              _context26.next = 21;
              return this.sendTransaction("multicall", [encoded]);

            case 21:
              return _context26.abrupt("return", _context26.sent);

            case 22:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function setRoyaltyBps(_x54) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(metadata) {
      var uri;
      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context27.sent;
              _context27.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context27.abrupt("return", _context27.sent);

            case 6:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function setModuleMetadata(_x55) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(restricted) {
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context28.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
              return _context28.abrupt("return", _context28.sent);

            case 4:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function setRestrictedTransfer(_x56) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }()
  /**
   * `getOwned` is a convenience method for getting all owned tokens
   * for a particular wallet.
   *
   * @param _address - The address to check for token ownership
   * @returns An array of BundleMetadata objects that are owned by the address
   */
  ;

  _proto.getOwned =
  /*#__PURE__*/
  function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(_address) {
      var _this3 = this;

      var address, maxId, balances, ownedBalances;
      return runtime_1.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              if (!_address) {
                _context30.next = 4;
                break;
              }

              _context30.t0 = _address;
              _context30.next = 7;
              break;

            case 4:
              _context30.next = 6;
              return this.getSignerAddress();

            case 6:
              _context30.t0 = _context30.sent;

            case 7:
              address = _context30.t0;
              _context30.next = 10;
              return this.readOnlyContract.nextTokenId();

            case 10:
              maxId = _context30.sent;
              _context30.next = 13;
              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));

            case 13:
              balances = _context30.sent;
              ownedBalances = balances.map(function (b, i) {
                return {
                  tokenId: i,
                  balance: b
                };
              }).filter(function (b) {
                return b.balance.gt(0);
              });
              _context30.next = 17;
              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(b) {
                  return runtime_1.wrap(function _callee29$(_context29) {
                    while (1) {
                      switch (_context29.prev = _context29.next) {
                        case 0:
                          _context29.next = 2;
                          return _this3.get(b.tokenId.toString());

                        case 2:
                          return _context29.abrupt("return", _context29.sent);

                        case 3:
                        case "end":
                          return _context29.stop();
                      }
                    }
                  }, _callee29);
                }));

                return function (_x58) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 17:
              return _context30.abrupt("return", _context30.sent);

            case 18:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30, this);
    }));

    function getOwned(_x57) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }()
  /**
   * Gets the royalty BPS (basis points) of the contract
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyBps =
  /*#__PURE__*/
  function () {
    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31() {
      return runtime_1.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return this.readOnlyContract.royaltyBps();

            case 2:
              return _context31.abrupt("return", _context31.sent);

            case 3:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31, this);
    }));

    function getRoyaltyBps() {
      return _getRoyaltyBps.apply(this, arguments);
    }

    return getRoyaltyBps;
  }()
  /**
   * Gets the address of the royalty recipient
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyRecipientAddress =
  /*#__PURE__*/
  function () {
    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32() {
      var _metadata$metadata;

      var metadata;
      return runtime_1.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this.getMetadata();

            case 2:
              metadata = _context32.sent;

              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {
                _context32.next = 5;
                break;
              }

              return _context32.abrupt("return", metadata.metadata.fee_recipient);

            case 5:
              return _context32.abrupt("return", "");

            case 6:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32, this);
    }));

    function getRoyaltyRecipientAddress() {
      return _getRoyaltyRecipientAddress.apply(this, arguments);
    }

    return getRoyaltyRecipientAddress;
  }();

  return BundleModule;
}(ModuleWithRoles);
BundleModule.moduleType = ModuleType.BUNDLE;
BundleModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

var ClaimConditionPhase = /*#__PURE__*/function () {
  // TODO: Should this be in seconds? Or milliseconds? [seconds, please update]
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  function ClaimConditionPhase(createSnapshotFunc) {
    this._conditionStartTime = Date.now();
    this._currencyAddress = "";
    this._price = 0;
    this._maxQuantity = BigNumber.from(0);
    this._quantityLimitPerTransaction = ethers.constants.MaxUint256;
    this._merkleRootHash = hexZeroPad([0], 32);
    this._merkleCondition = undefined;
    this.createSnapshot = void 0;
    this._waitInSeconds = 0;
    this.createSnapshot = createSnapshotFunc;
  }
  /**
   * Set the price claim condition for the drop.
   *
   * @param price - The price of the currency in wei. Must be >= 0.
   * @param tokenAddress - The address of an ERC20 contract to use as the currency for the claim. By default this is the native currency address which is 0x0000000000000000000000000000000000000000 address.
   */


  var _proto = ClaimConditionPhase.prototype;

  _proto.setPrice = function setPrice(price, tokenAddress) {
    if (tokenAddress === void 0) {
      tokenAddress = AddressZero;
    }

    if (!isAddress$1(tokenAddress)) {
      throw new InvalidAddressError(tokenAddress);
    }

    !(price >= 0) ? process.env.NODE_ENV !== "production" ? invariant(false, "Price cannot be negative") : invariant(false) : void 0;
    this._price = price;
    this._currencyAddress = tokenAddress;
    return this;
  }
  /**
   * Set the start time for the claim condition.
   *
   * @param startTime - The start time for the claim condition. Can be a Date object or a number of seconds since the epoch.
   */
  ;

  _proto.setConditionStartTime = function setConditionStartTime(when) {
    if (typeof when === "number") {
      this._conditionStartTime = Math.floor(when);
    } else {
      var secondsUntil = Math.floor((when.getTime() - Date.now()) / 1000); // if its starting in the past, just set it to now

      this._conditionStartTime = secondsUntil >= 0 ? secondsUntil : 0;
    }

    return this;
  }
  /**
   * Override the maxQuantity for the claim condition after creating the phase.
   *
   * @param maxQuantity - The max quantity NFTs that can be claimed in this phase.
   */
  ;

  _proto.setMaxQuantity = function setMaxQuantity(maxQuantity) {
    this._maxQuantity = maxQuantity;
    return this;
  }
  /**
   * The max quantity of NFTs that can be claimed in a single transaction.
   *
   * @param max - The max quantity NFTs that can be claimed in a single transaction.
   */
  ;

  _proto.setMaxQuantityPerTransaction = function setMaxQuantityPerTransaction(max) {
    var maxQuantity = BigNumber.from(max);
    !maxQuantity.gte(1) ? process.env.NODE_ENV !== "production" ? invariant(false, "Max quantity per transaction must be > 0") : invariant(false) : void 0;
    this._quantityLimitPerTransaction = maxQuantity;
    return this;
  }
  /**
   * Sets a merkle root hash for the claim condition.
   *
   * @param root - The merkle root hash
   */
  ;

  _proto.setMerkleRoot = function setMerkleRoot(root) {
    this._merkleRootHash = root;
    return this;
  }
  /**
   * Sets a snapshot for the claim condition. You can use a snapshot
   * to verify a merkle tree condition.
   *
   * @param root - The merkle root hash
   */
  ;

  _proto.setSnapshot =
  /*#__PURE__*/
  function () {
    var _setSnapshot = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(addresses) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.createSnapshot(addresses);

            case 2:
              this._merkleCondition = _context.sent;
              return _context.abrupt("return", this);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function setSnapshot(_x) {
      return _setSnapshot.apply(this, arguments);
    }

    return setSnapshot;
  }()
  /**
   * @internal
   */
  ;

  _proto.getSnapshot = function getSnapshot() {
    return this._merkleCondition;
  }
  /**
   * Helper method that provides defaults for each claim condition.
   * @internal
   */
  ;

  _proto.buildPublicClaimCondition = function buildPublicClaimCondition() {
    var _this$_merkleConditio;

    return {
      startTimestamp: BigNumber.from(this._conditionStartTime.toString()),
      pricePerToken: this._price,
      currency: this._currencyAddress || AddressZero,
      maxMintSupply: this._maxQuantity,
      waitTimeSecondsLimitPerTransaction: this._waitInSeconds,
      // TODO: I don't understand this default value
      quantityLimitPerTransaction: this._quantityLimitPerTransaction,
      currentMintSupply: 0,
      merkleRoot: (_this$_merkleConditio = this._merkleCondition) != null && _this$_merkleConditio.merkleRoot ? this._merkleCondition.merkleRoot : this._merkleRootHash
    };
  }
  /**
   * Wait time enforced after calling `claim` before the next `claim` can be called.
   *
   * @param waitInSeconds - The wait time in seconds.
   */
  ;

  _proto.setWaitTimeBetweenClaims = function setWaitTimeBetweenClaims(waitInSeconds) {
    this._waitInSeconds = waitInSeconds;
    return this;
  };

  return ClaimConditionPhase;
}();

var ClaimConditionFactory = /*#__PURE__*/function () {
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  function ClaimConditionFactory(createSnapshotFunc) {
    this.phases = [];
    this.createSnapshot = void 0;
    this.createSnapshot = createSnapshotFunc;
  }
  /**
   * Used internally when creating a drop module/updating
   * the claim conditions of a drop module.
   *
   * @internal
   *
   * @returns - The claim conditions that will be used when validating a users claim transaction.
   */


  var _proto = ClaimConditionFactory.prototype;

  _proto.buildConditions = function buildConditions() {
    var publicClaimConditions = this.phases.map(function (c) {
      return c.buildPublicClaimCondition();
    }); // TODO: write test to ensure they're sorted by start time, earliest first

    var sorted = publicClaimConditions.sort(function (a, b) {
      if (a.startTimestamp.eq(b.startTimestamp)) {
        return 0;
      } else if (a.startTimestamp.gt(b.startTimestamp)) {
        return 1;
      } else {
        return -1;
      }
    });
    return sorted;
  }
  /**
   * Converts a set of generic `PublicClaimCondition`s into a `ClaimConditionFactory`
   *
   * @param conditions - The conditions to load, should be returned directly from the contract.
   * @returns - The loaded claim condition factory.
   */
  ;

  _proto.fromPublicClaimConditions = function fromPublicClaimConditions(conditions) {
    var phases = [];

    for (var _iterator = _createForOfIteratorHelperLoose(conditions), _step; !(_step = _iterator()).done;) {
      var condition = _step.value;
      var phase = new ClaimConditionPhase(this.createSnapshot); // If there's a price, there must also be an associated currency

      if (condition.currency) {
        phase.setPrice(condition.pricePerToken, condition.currency);
      }

      if (condition.maxMintSupply) {
        phase.setMaxQuantity(condition.maxMintSupply);
      }

      phase.setConditionStartTime(new Date(condition.startTimestamp.toNumber() * 1000));
      phases.push(phase);
    }

    this.phases = phases;
    return this;
  }
  /**
   * Creates a new claim 'phase' with its own set of claim conditions
   *
   * @param startTime - The start time of the phase in epoch seconds or a `Date` object.
   * @param maxQuantity - The max quantity of the phase. By default, this is set to be infinite. In most cases, if your drop only
   has a single phase, you don't need to override this value. If your drop has multiple phases, you should override this value and specify how many tokens are available for each specific phase.
    * @param maxQuantityPerTransaction - The maximum number of claims that can be made in a single transaction. By default, this is set to infinite which means that there is no limit.
   *
   * @returns - The claim condition builder.
   */
  ;

  _proto.newClaimPhase = function newClaimPhase(_ref) {
    var startTime = _ref.startTime,
        _ref$maxQuantity = _ref.maxQuantity,
        maxQuantity = _ref$maxQuantity === void 0 ? ethers.constants.MaxUint256 : _ref$maxQuantity,
        _ref$maxQuantityPerTr = _ref.maxQuantityPerTransaction,
        maxQuantityPerTransaction = _ref$maxQuantityPerTr === void 0 ? ethers.constants.MaxUint256 : _ref$maxQuantityPerTr;
    var condition = new ClaimConditionPhase(this.createSnapshot);
    condition.setConditionStartTime(startTime);
    condition.setMaxQuantity(BigNumber.from(maxQuantity));
    condition.setMaxQuantityPerTransaction(BigNumber.from(maxQuantityPerTransaction));
    this.phases.push(condition);
    return condition;
  }
  /**
   * Removes a claim condition phase from the factory.
   *
   * @param phase - The phase to remove
   */
  ;

  _proto.removeClaimPhase = function removeClaimPhase(index) {
    if (index < 0 || index >= this.phases.length) {
      return;
    }

    var sorted = this.buildConditions();
    var cleared = sorted.splice(index - 1, 1);
    this.fromPublicClaimConditions(cleared);
  }
  /**
   * Helper method fetches all snapshots from a factory.
   *
   * @returns - All snapshots in the condition factory.
   */
  ;

  _proto.allSnapshots = function allSnapshots() {
    return this.phases.filter(function (p) {
      return p.getSnapshot() !== undefined;
    }).map(function (p) {
      return p.getSnapshot();
    });
  };

  return ClaimConditionFactory;
}();

/**
 * The model for a claim proof. Currently we support only an address
 * in the leaf of the merkle tree.
 */

var ClaimProof = function ClaimProof() {
  this.address = "";
  this.proof = [];
};

__decorate([JsonProperty("address", String)], ClaimProof.prototype, "address", void 0);

__decorate([JsonProperty("proof", [String])], ClaimProof.prototype, "proof", void 0);

ClaimProof = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("ClaimProof")], ClaimProof);

var Snapshot = function Snapshot() {
  this.merkleRoot = "";
  this.claims = [];
};

__decorate([JsonProperty("merkleRoot", String)], Snapshot.prototype, "merkleRoot", void 0);

__decorate([JsonProperty("claims", [ClaimProof])], Snapshot.prototype, "claims", void 0);

Snapshot = /*#__PURE__*/__decorate([/*#__PURE__*/JsonObject("Snapshot")], Snapshot);

/**
 * Access this module by calling {@link ThirdwebSDK.getBundleDropModule}
 * @beta
 */

var BundleDropModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(BundleDropModule, _ModuleWithRoles);

  function BundleDropModule() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;
    _this.storage = _this.sdk.getStorage();
    return _this;
  }

  var _proto = BundleDropModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return BundleDropModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return LazyMintERC1155__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return BundleDropModule.moduleType;
  };

  _proto.transformResultToClaimCondition = /*#__PURE__*/function () {
    var _transformResultToClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(pm) {
      var cv;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getCurrencyValue(this.providerOrSigner, pm.currency, pm.pricePerToken);

            case 2:
              cv = _context.sent;
              return _context.abrupt("return", {
                startTimestamp: new Date(BigNumber.from(pm.startTimestamp).toNumber() * 1000),
                maxMintSupply: pm.maxClaimableSupply.toString(),
                currentMintSupply: pm.supplyClaimed.toString(),
                availableSupply: BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed).toString(),
                quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),
                waitTimeSecondsLimitPerTransaction: pm.waitTimeInSecondsBetweenClaims.toString(),
                price: BigNumber.from(pm.pricePerToken),
                pricePerToken: BigNumber.from(pm.pricePerToken),
                currency: pm.currency,
                currencyContract: pm.currency,
                currencyMetadata: cv,
                merkleRoot: pm.merkleRoot
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function transformResultToClaimCondition(_x) {
      return _transformResultToClaimCondition.apply(this, arguments);
    }

    return transformResultToClaimCondition;
  }();

  _proto.getTokenMetadata = /*#__PURE__*/function () {
    var _getTokenMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl);

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getTokenMetadata$1(_x2) {
      return _getTokenMetadata2.apply(this, arguments);
    }

    return getTokenMetadata$1;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(tokenId) {
      var _yield$Promise$all, supply, metadata;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all([this.readOnlyContract.totalSupply(tokenId)["catch"](function () {
                return BigNumber.from(0);
              }), this.getTokenMetadata(tokenId)]);

            case 2:
              _yield$Promise$all = _context3.sent;
              supply = _yield$Promise$all[0];
              metadata = _yield$Promise$all[1];
              return _context3.abrupt("return", {
                supply: supply,
                metadata: metadata
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function get(_x3) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var _this2 = this;

      var maxId;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.nextTokenIdToMint();

            case 2:
              maxId = _context4.sent.toNumber();
              _context4.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this2.get(i.toString());
              }));

            case 5:
              return _context4.abrupt("return", _context4.sent);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }()
  /**
   * `getOwned` is a convenience method for getting all owned tokens
   * for a particular wallet.
   *
   * @param _address - The address to check for token ownership
   * @returns An array of BundleMetadata objects that are owned by the address
   */
  ;

  _proto.getOwned =
  /*#__PURE__*/
  function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_address) {
      var _this3 = this;

      var address, maxId, balances, ownedBalances;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!_address) {
                _context6.next = 4;
                break;
              }

              _context6.t0 = _address;
              _context6.next = 7;
              break;

            case 4:
              _context6.next = 6;
              return this.getSignerAddress();

            case 6:
              _context6.t0 = _context6.sent;

            case 7:
              address = _context6.t0;
              _context6.next = 10;
              return this.readOnlyContract.nextTokenIdToMint();

            case 10:
              maxId = _context6.sent;
              _context6.next = 13;
              return this.readOnlyContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));

            case 13:
              balances = _context6.sent;
              ownedBalances = balances.map(function (b, i) {
                return {
                  tokenId: i,
                  balance: b
                };
              }).filter(function (b) {
                return b.balance.gt(0);
              });
              _context6.next = 17;
              return Promise.all(ownedBalances.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(b) {
                  return runtime_1.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return _this3.get(b.tokenId.toString());

                        case 2:
                          return _context5.abrupt("return", _context5.sent);

                        case 3:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                return function (_x5) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 17:
              return _context6.abrupt("return", _context6.sent);

            case 18:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getOwned(_x4) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }();

  _proto.getActiveClaimCondition = /*#__PURE__*/function () {
    var _getActiveClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(tokenId) {
      var index;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.getIndexOfActiveCondition(tokenId);

            case 2:
              index = _context7.sent;
              _context7.t0 = this;
              _context7.next = 6;
              return this.readOnlyContract.getClaimConditionAtIndex(tokenId, index);

            case 6:
              _context7.t1 = _context7.sent;
              return _context7.abrupt("return", _context7.t0.transformResultToClaimCondition.call(_context7.t0, _context7.t1));

            case 8:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getActiveClaimCondition(_x6) {
      return _getActiveClaimCondition.apply(this, arguments);
    }

    return getActiveClaimCondition;
  }();

  _proto.getAllClaimConditions = /*#__PURE__*/function () {
    var _getAllClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(tokenId) {
      var _this4 = this;

      var claimCondition, count, conditions, i;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.readOnlyContract.claimConditions(tokenId);

            case 2:
              claimCondition = _context8.sent;
              count = claimCondition.totalConditionCount.toNumber();
              conditions = [];
              i = 0;

            case 6:
              if (!(i < count)) {
                _context8.next = 15;
                break;
              }

              _context8.t0 = conditions;
              _context8.next = 10;
              return this.readOnlyContract.getClaimConditionAtIndex(tokenId, i);

            case 10:
              _context8.t1 = _context8.sent;

              _context8.t0.push.call(_context8.t0, _context8.t1);

            case 12:
              i++;
              _context8.next = 6;
              break;

            case 15:
              return _context8.abrupt("return", Promise.all(conditions.map(function (c) {
                return _this4.transformResultToClaimCondition(c);
              })));

            case 16:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getAllClaimConditions(_x7) {
      return _getAllClaimConditions.apply(this, arguments);
    }

    return getAllClaimConditions;
  }();

  _proto.getSaleRecipient = /*#__PURE__*/function () {
    var _getSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(tokenId) {
      var saleRecipient;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.readOnlyContract.saleRecipient(tokenId);

            case 2:
              saleRecipient = _context9.sent;

              if (!(saleRecipient === AddressZero)) {
                _context9.next = 5;
                break;
              }

              return _context9.abrupt("return", this.readOnlyContract.defaultSaleRecipient());

            case 5:
              return _context9.abrupt("return", saleRecipient);

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getSaleRecipient(_x8) {
      return _getSaleRecipient.apply(this, arguments);
    }

    return getSaleRecipient;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(address, tokenId) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.readOnlyContract.balanceOf(address, tokenId);

            case 2:
              return _context10.abrupt("return", _context10.sent);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function balanceOf(_x9, _x10) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(tokenId) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.t0 = this;
              _context11.next = 3;
              return this.getSignerAddress();

            case 3:
              _context11.t1 = _context11.sent;
              _context11.t2 = tokenId;
              _context11.next = 7;
              return _context11.t0.balanceOf.call(_context11.t0, _context11.t1, _context11.t2);

            case 7:
              return _context11.abrupt("return", _context11.sent);

            case 8:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function balance(_x11) {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(address, operator) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function isApproved(_x12, _x13) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions

  /*
   *
   * @deprecated - {@link BundleDropModule.mintBatch}
   */
  ;

  _proto.lazyMintBatch =
  /*#__PURE__*/
  function () {
    var _lazyMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(metadatas) {
      var _this5 = this;

      var tokenIds;
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.createBatch(metadatas);

            case 2:
              tokenIds = _context13.sent;
              _context13.next = 5;
              return Promise.all(tokenIds.map(function (t) {
                return _this5.get(t.toString());
              }));

            case 5:
              return _context13.abrupt("return", _context13.sent);

            case 6:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function lazyMintBatch(_x14) {
      return _lazyMintBatch.apply(this, arguments);
    }

    return lazyMintBatch;
  }();

  _proto.createBatch = /*#__PURE__*/function () {
    var _createBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(metadatas) {
      var startFileNumber, baseUri, receipt, event, startingIndex, endingIndex, tokenIds, i;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.readOnlyContract.nextTokenIdToMint();

            case 2:
              startFileNumber = _context14.sent;
              _context14.next = 5;
              return this.storage.uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());

            case 5:
              baseUri = _context14.sent;
              _context14.next = 8;
              return this.sendTransaction("lazyMint", [metadatas.length, baseUri]);

            case 8:
              receipt = _context14.sent;
              event = this.parseEventLogs("LazyMintedTokens", receipt == null ? void 0 : receipt.logs);
              startingIndex = event[0], endingIndex = event[1];
              tokenIds = [];

              for (i = startingIndex; i.lte(endingIndex); i = i.add(1)) {
                tokenIds.push(i.toString());
              }

              return _context14.abrupt("return", tokenIds);

            case 14:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function createBatch(_x15) {
      return _createBatch.apply(this, arguments);
    }

    return createBatch;
  }();

  _proto.setSaleRecipient = /*#__PURE__*/function () {
    var _setSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(tokenId, recipient) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              return _context15.abrupt("return", this.sendTransaction("setSaleRecipient", [tokenId, recipient]));

            case 1:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function setSaleRecipient(_x16, _x17) {
      return _setSaleRecipient.apply(this, arguments);
    }

    return setSaleRecipient;
  }();

  _proto.setDefaultSaleRecipient = /*#__PURE__*/function () {
    var _setDefaultSaleRecipient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(recipient) {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              return _context16.abrupt("return", this.sendTransaction("setDefaultSaleRecipient", [recipient]));

            case 1:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function setDefaultSaleRecipient(_x18) {
      return _setDefaultSaleRecipient.apply(this, arguments);
    }

    return setDefaultSaleRecipient;
  }();

  _proto.setApproval = /*#__PURE__*/function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(operator, approved) {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context17.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context17.abrupt("return", _context17.sent);

            case 4:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function setApproval(_x19, _x20) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(to, tokenId, amount, data) {
      var from;
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context18.next = 3;
              return this.getSignerAddress();

            case 3:
              from = _context18.sent;
              _context18.next = 6;
              return this.sendTransaction("safeTransferFrom", [from, to, tokenId, amount, data]);

            case 6:
              return _context18.abrupt("return", _context18.sent);

            case 7:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function transfer(_x21, _x22, _x23, _x24) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }()
  /**
   * Sets public claim conditions for the next minting using the
   * claim condition factory.
   *
   * @param factory - The claim condition factory.
   */
  ;

  _proto.setClaimCondition =
  /*#__PURE__*/
  function () {
    var _setClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(tokenId, factory) {
      var conditions, merkleInfo, _yield$this$getMetada, metadata, metadataUri, encoded;

      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              conditions = factory.buildConditions().map(function (c) {
                return {
                  startTimestamp: c.startTimestamp,
                  maxClaimableSupply: c.maxMintSupply,
                  supplyClaimed: 0,
                  quantityLimitPerTransaction: c.quantityLimitPerTransaction,
                  waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,
                  pricePerToken: c.pricePerToken === AddressZero ? NATIVE_TOKEN_ADDRESS : c.pricePerToken,
                  currency: c.currency,
                  merkleRoot: c.merkleRoot
                };
              });
              merkleInfo = {};
              factory.allSnapshots().forEach(function (s) {
                merkleInfo[s.merkleRoot] = s.snapshotUri;
              });
              _context19.next = 5;
              return this.getMetadata();

            case 5:
              _yield$this$getMetada = _context19.sent;
              metadata = _yield$this$getMetada.metadata;
              !metadata ? process.env.NODE_ENV !== "production" ? invariant(false, "Metadata is not set, this should never happen") : invariant(false) : void 0;

              if (factory.allSnapshots().length === 0 && "merkle" in metadata) {
                metadata["merkle"] = {};
              } else {
                metadata["merkle"] = merkleInfo;
              }

              _context19.next = 11;
              return this.storage.upload(JSON.stringify(metadata));

            case 11:
              metadataUri = _context19.sent;
              encoded = [this.contract["interface"].encodeFunctionData("setContractURI", [metadataUri]), this.contract["interface"].encodeFunctionData("setClaimConditions", [tokenId, conditions])];
              _context19.next = 15;
              return this.sendTransaction("multicall", [encoded]);

            case 15:
              return _context19.abrupt("return", _context19.sent);

            case 16:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function setClaimCondition(_x25, _x26) {
      return _setClaimCondition.apply(this, arguments);
    }

    return setClaimCondition;
  }()
  /**
   * Creates a claim condition factory
   *
   * @returns - A new claim condition factory
   */
  ;

  _proto.getClaimConditionFactory = function getClaimConditionFactory() {
    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);
    var factory = new ClaimConditionFactory(createSnapshotFunc);
    return factory;
  }
  /**
   * @deprecated - Use the ClaimConditionFactory instead.
   */
  ;

  _proto.setPublicClaimConditions =
  /*#__PURE__*/
  function () {
    var _setPublicClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(tokenId, conditions) {
      var _conditions;

      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _conditions = conditions.map(function (c) {
                return {
                  startTimestamp: c.startTimestamp || 0,
                  maxClaimableSupply: c.maxClaimableSupply,
                  supplyClaimed: 0,
                  quantityLimitPerTransaction: c.quantityLimitPerTransaction || c.maxClaimableSupply,
                  waitTimeInSecondsBetweenClaims: c.waitTimeInSecondsBetweenClaims || 0,
                  pricePerToken: c.pricePerToken || 0,
                  currency: c.currency || AddressZero,
                  merkleRoot: c.merkleRoot || hexZeroPad([0], 32)
                };
              });
              _context20.next = 3;
              return this.sendTransaction("setClaimConditions", [tokenId, _conditions]);

            case 3:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function setPublicClaimConditions(_x27, _x28) {
      return _setPublicClaimConditions.apply(this, arguments);
    }

    return setPublicClaimConditions;
  }();

  _proto.claim = /*#__PURE__*/function () {
    var _claim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(tokenId, quantity, proofs) {
      var mintCondition, overrides, addressToClaim, _yield$this$getMetada2, metadata, snapshot, jsonConvert, snapshotData, item, erc20, owner, spender, allowance, totalPrice;

      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              if (proofs === void 0) {
                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];
              }

              _context21.next = 3;
              return this.getActiveClaimCondition(tokenId);

            case 3:
              mintCondition = _context21.sent;
              _context21.next = 6;
              return this.getCallOverrides();

            case 6:
              _context21.t0 = _context21.sent;

              if (_context21.t0) {
                _context21.next = 9;
                break;
              }

              _context21.t0 = {};

            case 9:
              overrides = _context21.t0;
              _context21.next = 12;
              return this.getSignerAddress();

            case 12:
              addressToClaim = _context21.sent;
              _context21.next = 15;
              return this.getMetadata();

            case 15:
              _yield$this$getMetada2 = _context21.sent;
              metadata = _yield$this$getMetada2.metadata;

              if (mintCondition.merkleRoot.toString().startsWith(AddressZero)) {
                _context21.next = 27;
                break;
              }

              _context21.next = 20;
              return this.storage.get(metadata == null ? void 0 : metadata.merkle[mintCondition.merkleRoot.toString()]);

            case 20:
              snapshot = _context21.sent;
              jsonConvert = new JsonConvert();
              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);
              item = snapshotData.claims.find(function (c) {
                return c.address === addressToClaim;
              });

              if (!(item === undefined)) {
                _context21.next = 26;
                break;
              }

              throw new Error("No claim found for this address");

            case 26:
              proofs = item.proof;

            case 27:
              if (!mintCondition.pricePerToken.gt(0)) {
                _context21.next = 44;
                break;
              }

              if (!(mintCondition.currency === AddressZero)) {
                _context21.next = 32;
                break;
              }

              overrides["value"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);
              _context21.next = 44;
              break;

            case 32:
              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);
              _context21.next = 35;
              return this.getSignerAddress();

            case 35:
              owner = _context21.sent;
              spender = this.address;
              _context21.next = 39;
              return erc20.allowance(owner, spender);

            case 39:
              allowance = _context21.sent;
              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));

              if (!allowance.lt(totalPrice)) {
                _context21.next = 44;
                break;
              }

              _context21.next = 44;
              return this.sendContractTransaction(erc20, "approve", [spender, allowance.add(totalPrice)]);

            case 44:
              _context21.next = 46;
              return this.sendTransaction("claim", [tokenId, quantity, proofs], overrides);

            case 46:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function claim(_x29, _x30, _x31) {
      return _claim.apply(this, arguments);
    }

    return claim;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(tokenId, amount) {
      var account;
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.getSignerAddress();

            case 2:
              account = _context22.sent;
              _context22.next = 5;
              return this.sendTransaction("burn", [account, tokenId, amount]);

            case 5:
              return _context22.abrupt("return", _context22.sent);

            case 6:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function burn(_x32, _x33) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(from, to, tokenId, amount, data) {
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context23.next = 3;
              return this.sendTransaction("transferFrom", [from, to, tokenId, amount, data]);

            case 3:
              return _context23.abrupt("return", _context23.sent);

            case 4:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function transferFrom(_x34, _x35, _x36, _x37, _x38) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }() // owner functions
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(metadata) {
      var uri;
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return this.storage.uploadMetadata(metadata);

            case 2:
              uri = _context24.sent;
              _context24.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context24.abrupt("return", _context24.sent);

            case 6:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function setModuleMetadata(_x39) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(amount) {
      var _yield$this$getMetada3, metadata, encoded, uri;

      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.getMetadata();

            case 2:
              _yield$this$getMetada3 = _context25.sent;
              metadata = _yield$this$getMetada3.metadata;
              encoded = [];

              if (metadata) {
                _context25.next = 7;
                break;
              }

              throw new Error("No metadata found, this module might be invalid!");

            case 7:
              metadata.seller_fee_basis_points = amount;
              _context25.t0 = this.storage;
              _context25.t1 = _extends({}, metadata);
              _context25.t2 = this.address;
              _context25.next = 13;
              return this.getSignerAddress();

            case 13:
              _context25.t3 = _context25.sent;
              _context25.next = 16;
              return _context25.t0.uploadMetadata.call(_context25.t0, _context25.t1, _context25.t2, _context25.t3);

            case 16:
              uri = _context25.sent;
              encoded.push(this.contract["interface"].encodeFunctionData("setRoyaltyBps", [amount]));
              encoded.push(this.contract["interface"].encodeFunctionData("setContractURI", [uri]));
              _context25.next = 21;
              return this.sendTransaction("multicall", [encoded]);

            case 21:
              return _context25.abrupt("return", _context25.sent);

            case 22:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function setRoyaltyBps(_x40) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(restricted) {
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.next = 2;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 2:
              return _context26.abrupt("return", _context26.sent);

            case 3:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function setRestrictedTransfer(_x41) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }()
  /**
   * Gets the royalty BPS (basis points) of the contract
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyBps =
  /*#__PURE__*/
  function () {
    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27() {
      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              _context27.next = 2;
              return this.readOnlyContract.royaltyBps();

            case 2:
              return _context27.abrupt("return", _context27.sent);

            case 3:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function getRoyaltyBps() {
      return _getRoyaltyBps.apply(this, arguments);
    }

    return getRoyaltyBps;
  }()
  /**
   * Gets the address of the royalty recipient
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyRecipientAddress =
  /*#__PURE__*/
  function () {
    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28() {
      var _metadata$metadata;

      var metadata;
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return this.getMetadata();

            case 2:
              metadata = _context28.sent;

              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {
                _context28.next = 5;
                break;
              }

              return _context28.abrupt("return", metadata.metadata.fee_recipient);

            case 5:
              return _context28.abrupt("return", "");

            case 6:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function getRoyaltyRecipientAddress() {
      return _getRoyaltyRecipientAddress.apply(this, arguments);
    }

    return getRoyaltyRecipientAddress;
  }();

  _proto.getClaimConditionsFactory = function getClaimConditionsFactory() {
    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);
    var factory = new ClaimConditionFactory(createSnapshotFunc);
    return factory;
  }
  /**
   * Returns the total supply of a specific token
   *
   * @param tokenId - The token ID to get the total supply of
   */
  ;

  _proto.totalSupply =
  /*#__PURE__*/
  function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(tokenId) {
      return runtime_1.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              _context29.next = 2;
              return this.readOnlyContract.totalSupply(tokenId);

            case 2:
              return _context29.abrupt("return", _context29.sent);

            case 3:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29, this);
    }));

    function totalSupply(_x42) {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }()
  /**
   * Pulls the list of all addresses that have claimed a particular token
   *
   * @beta - This can be very slow for large numbers of token holders
   *
   * @param tokenId - The token id to get the claimers of
   * @returns - A unique list of addresses that claimed the token
   */
  ;

  _proto.getAllClaimerAddresses =
  /*#__PURE__*/
  function () {
    var _getAllClaimerAddresses = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(tokenId) {
      var a;
      return runtime_1.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              _context30.next = 2;
              return this.contract.queryFilter(this.contract.filters.ClaimedTokens(null, BigNumber.from(tokenId)));

            case 2:
              a = _context30.sent;
              return _context30.abrupt("return", Array.from(new Set(a.map(function (b) {
                return b.args.claimer;
              }))));

            case 4:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30, this);
    }));

    function getAllClaimerAddresses(_x43) {
      return _getAllClaimerAddresses.apply(this, arguments);
    }

    return getAllClaimerAddresses;
  }()
  /*
   * Checks to see if the current signer can claim the specified number of tokens.
   *
   * @param tokenId - The id of the token to check.
   * @param quantity - The quantity of tokens to check.
   * @returns - True if the current signer can claim the specified number of tokens, false otherwise.
   */
  ;

  _proto.canClaim =
  /*#__PURE__*/
  function () {
    var _canClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(tokenId, quantity) {
      var mintCondition, proofs, overrides, erc20, owner, spender, allowance, totalPrice;
      return runtime_1.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.prev = 0;
              _context31.next = 3;
              return this.getActiveClaimCondition(tokenId);

            case 3:
              mintCondition = _context31.sent;
              _context31.next = 6;
              return this.getClaimerProofs(mintCondition.merkleRoot.toString());

            case 6:
              proofs = _context31.sent;
              _context31.next = 9;
              return this.getCallOverrides();

            case 9:
              _context31.t0 = _context31.sent;

              if (_context31.t0) {
                _context31.next = 12;
                break;
              }

              _context31.t0 = {};

            case 12:
              overrides = _context31.t0;

              if (!mintCondition.pricePerToken.gt(0)) {
                _context31.next = 28;
                break;
              }

              if (!(mintCondition.currency === AddressZero)) {
                _context31.next = 18;
                break;
              }

              overrides["value"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);
              _context31.next = 28;
              break;

            case 18:
              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);
              _context31.next = 21;
              return this.getSignerAddress();

            case 21:
              owner = _context31.sent;
              spender = this.address;
              _context31.next = 25;
              return erc20.allowance(owner, spender);

            case 25:
              allowance = _context31.sent;
              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));

              if (allowance.lt(totalPrice)) ;

            case 28:
              _context31.next = 30;
              return this.readOnlyContract.callStatic.claim(tokenId, quantity, proofs, overrides);

            case 30:
              return _context31.abrupt("return", true);

            case 33:
              _context31.prev = 33;
              _context31.t1 = _context31["catch"](0);
              return _context31.abrupt("return", false);

            case 36:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31, this, [[0, 33]]);
    }));

    function canClaim(_x44, _x45) {
      return _canClaim.apply(this, arguments);
    }

    return canClaim;
  }()
  /**
   * Fetches the proof for the current signer for a particular wallet.
   *
   * @param merkleRoot - The merkle root of the condition to check.
   * @returns - The proof for the current signer for the specified condition.
   */
  ;

  _proto.getClaimerProofs =
  /*#__PURE__*/
  function () {
    var _getClaimerProofs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(merkleRoot) {
      var addressToClaim, _yield$this$getMetada4, metadata, snapshot, jsonConvert, snapshotData, item;

      return runtime_1.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this.getSignerAddress();

            case 2:
              addressToClaim = _context32.sent;
              _context32.next = 5;
              return this.getMetadata();

            case 5:
              _yield$this$getMetada4 = _context32.sent;
              metadata = _yield$this$getMetada4.metadata;
              _context32.next = 9;
              return this.storage.get(metadata == null ? void 0 : metadata.merkle[merkleRoot]);

            case 9:
              snapshot = _context32.sent;
              jsonConvert = new JsonConvert();
              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);
              item = snapshotData.claims.find(function (c) {
                return c.address === addressToClaim;
              });

              if (!(item === undefined)) {
                _context32.next = 15;
                break;
              }

              return _context32.abrupt("return", []);

            case 15:
              return _context32.abrupt("return", item.proof);

            case 16:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32, this);
    }));

    function getClaimerProofs(_x46) {
      return _getClaimerProofs.apply(this, arguments);
    }

    return getClaimerProofs;
  }();

  return BundleDropModule;
}(ModuleWithRoles);
BundleDropModule.moduleType = ModuleType.BUNDLE_DROP;
BundleDropModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}
 * @alpha
 */

var DatastoreModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(DatastoreModule, _ModuleWithRoles);

  function DatastoreModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = DatastoreModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return DatastoreModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return DataStore__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return DatastoreModule.moduleType;
  };

  _proto.getUint = /*#__PURE__*/function () {
    var _getUint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key) {
      var keyHash;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              keyHash = ethers.utils.id(key.toString());
              _context.next = 3;
              return this.readOnlyContract.getUint(keyHash);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getUint(_x) {
      return _getUint.apply(this, arguments);
    }

    return getUint;
  }() // write functions
  ;

  _proto.setUint =
  /*#__PURE__*/
  function () {
    var _setUint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(key, value) {
      var keyHash;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              keyHash = ethers.utils.id(key.toString());
              _context2.next = 3;
              return this.sendTransaction("setUint", [keyHash, value]);

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function setUint(_x2, _x3) {
      return _setUint.apply(this, arguments);
    }

    return setUint;
  }();

  return DatastoreModule;
}(ModuleWithRoles);
DatastoreModule.moduleType = ModuleType.DATASTORE;
DatastoreModule.roles = [RolesMap.admin, RolesMap.editor];

var DEFAULT_QUERY_ALL_COUNT = 100;

/**
 * Access this module by calling {@link ThirdwebSDK.getDropModule}
 * @beta
 */

var DropModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(DropModule, _ModuleWithRoles);

  function DropModule() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _ModuleWithRoles.call.apply(_ModuleWithRoles, [this].concat(args)) || this;
    _this.storage = _this.sdk.getStorage();
    return _this;
  }

  var _proto = DropModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return DropModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return LazyNFT__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return DropModule.moduleType;
  };

  _proto.getTokenMetadata = /*#__PURE__*/function () {
    var _getTokenMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getTokenMetadata(this.readOnlyContract, tokenId, this.ipfsGatewayUrl);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getTokenMetadata$1(_x) {
      return _getTokenMetadata2.apply(this, arguments);
    }

    return getTokenMetadata$1;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tokenId) {
      var _yield$Promise$all, owner, metadata;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return Promise.all([this.ownerOf(tokenId)["catch"](function () {
                return AddressZero;
              }), this.getTokenMetadata(tokenId)]);

            case 2:
              _yield$Promise$all = _context2.sent;
              owner = _yield$Promise$all[0];
              metadata = _yield$Promise$all[1];
              return _context2.abrupt("return", {
                owner: owner,
                metadata: metadata
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function get(_x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(queryParams) {
      var _this2 = this;

      var start, count, maxId;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
              _context3.t0 = Math;
              _context3.next = 5;
              return this.readOnlyContract.nextTokenId();

            case 5:
              _context3.t1 = _context3.sent.toNumber();
              _context3.t2 = start + count;
              maxId = _context3.t0.min.call(_context3.t0, _context3.t1, _context3.t2);
              _context3.next = 10;
              return Promise.all(Array.from(Array(maxId - start).keys()).map(function (i) {
                return _this2.get((start + i).toString());
              }));

            case 10:
              return _context3.abrupt("return", _context3.sent);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAll(_x3) {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getAllUnclaimed = /*#__PURE__*/function () {
    var _getAllUnclaimed = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(queryParams) {
      var _this3 = this;

      var start, count, maxId, unmintedId;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
              _context4.t0 = BigNumber;
              _context4.t1 = Math;
              _context4.next = 6;
              return this.readOnlyContract.nextTokenId();

            case 6:
              _context4.t2 = _context4.sent.toNumber();
              _context4.t3 = start + count;
              _context4.t4 = _context4.t1.min.call(_context4.t1, _context4.t2, _context4.t3);
              maxId = _context4.t0.from.call(_context4.t0, _context4.t4);
              _context4.next = 12;
              return this.readOnlyContract.nextMintTokenId();

            case 12:
              unmintedId = _context4.sent;
              _context4.next = 15;
              return Promise.all(Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map(function (i) {
                return _this3.getTokenMetadata(unmintedId.add(i).toString());
              }));

            case 15:
              return _context4.abrupt("return", _context4.sent.map(function (metadata) {
                return {
                  owner: AddressZero,
                  metadata: metadata
                };
              }));

            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAllUnclaimed(_x4) {
      return _getAllUnclaimed.apply(this, arguments);
    }

    return getAllUnclaimed;
  }();

  _proto.getAllClaimed = /*#__PURE__*/function () {
    var _getAllClaimed = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(queryParams) {
      var _this4 = this;

      var start, count, maxId;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              start = BigNumber.from((queryParams == null ? void 0 : queryParams.start) || 0).toNumber();
              count = BigNumber.from((queryParams == null ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();
              _context5.t0 = Math;
              _context5.next = 5;
              return this.readOnlyContract.nextMintTokenId();

            case 5:
              _context5.t1 = _context5.sent.toNumber();
              _context5.t2 = start + count;
              maxId = _context5.t0.min.call(_context5.t0, _context5.t1, _context5.t2);
              _context5.next = 10;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this4.get(i.toString());
              }));

            case 10:
              return _context5.abrupt("return", _context5.sent);

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getAllClaimed(_x5) {
      return _getAllClaimed.apply(this, arguments);
    }

    return getAllClaimed;
  }();

  _proto.ownerOf = /*#__PURE__*/function () {
    var _ownerOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.readOnlyContract.ownerOf(tokenId);

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function ownerOf(_x6) {
      return _ownerOf.apply(this, arguments);
    }

    return ownerOf;
  }();

  _proto.getOwned = /*#__PURE__*/function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_address) {
      var _this5 = this;

      var address, balance, indices, tokenIds;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!_address) {
                _context7.next = 4;
                break;
              }

              _context7.t0 = _address;
              _context7.next = 7;
              break;

            case 4:
              _context7.next = 6;
              return this.getSignerAddress();

            case 6:
              _context7.t0 = _context7.sent;

            case 7:
              address = _context7.t0;
              _context7.next = 10;
              return this.readOnlyContract.balanceOf(address);

            case 10:
              balance = _context7.sent;
              indices = Array.from(Array(balance.toNumber()).keys());
              _context7.next = 14;
              return Promise.all(indices.map(function (i) {
                return _this5.readOnlyContract.tokenOfOwnerByIndex(address, i);
              }));

            case 14:
              tokenIds = _context7.sent;
              _context7.next = 17;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this5.get(tokenId.toString());
              }));

            case 17:
              return _context7.abrupt("return", _context7.sent);

            case 18:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getOwned(_x7) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }();

  _proto.transformResultToClaimCondition = /*#__PURE__*/function () {
    var _transformResultToClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(pm) {
      var cv;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return getCurrencyValue(this.providerOrSigner, pm.currency, pm.pricePerToken);

            case 2:
              cv = _context8.sent;
              return _context8.abrupt("return", {
                startTimestamp: new Date(BigNumber.from(pm.startTimestamp).toNumber() * 1000),
                maxMintSupply: pm.maxMintSupply.toString(),
                currentMintSupply: pm.currentMintSupply.toString(),
                availableSupply: BigNumber.from(pm.maxMintSupply).sub(pm.currentMintSupply).toString(),
                quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),
                waitTimeSecondsLimitPerTransaction: pm.waitTimeSecondsLimitPerTransaction.toString(),
                price: BigNumber.from(pm.pricePerToken),
                pricePerToken: BigNumber.from(pm.pricePerToken),
                currency: pm.currency,
                currencyContract: pm.currency,
                currencyMetadata: cv,
                merkleRoot: pm.merkleRoot
              });

            case 4:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function transformResultToClaimCondition(_x8) {
      return _transformResultToClaimCondition.apply(this, arguments);
    }

    return transformResultToClaimCondition;
  }()
  /**
   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead
   */
  ;

  _proto.getActiveMintCondition =
  /*#__PURE__*/
  function () {
    var _getActiveMintCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      var index;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.readOnlyContract.getLastStartedMintConditionIndex();

            case 2:
              index = _context9.sent;
              _context9.next = 5;
              return this.readOnlyContract.mintConditions(index);

            case 5:
              return _context9.abrupt("return", _context9.sent);

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getActiveMintCondition() {
      return _getActiveMintCondition.apply(this, arguments);
    }

    return getActiveMintCondition;
  }();

  _proto.getActiveClaimCondition = /*#__PURE__*/function () {
    var _getActiveClaimCondition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10() {
      var index, mc;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.readOnlyContract.getLastStartedMintConditionIndex();

            case 2:
              index = _context10.sent;
              _context10.next = 5;
              return this.readOnlyContract.mintConditions(index);

            case 5:
              mc = _context10.sent;
              _context10.next = 8;
              return this.transformResultToClaimCondition(mc);

            case 8:
              return _context10.abrupt("return", _context10.sent);

            case 9:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function getActiveClaimCondition() {
      return _getActiveClaimCondition.apply(this, arguments);
    }

    return getActiveClaimCondition;
  }()
  /**
   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead
   */
  ;

  _proto.getAllMintConditions =
  /*#__PURE__*/
  function () {
    var _getAllMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
      var conditions, i;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              conditions = [];
              i = 0;

            case 2:
              _context11.prev = 2;
              _context11.t0 = conditions;
              _context11.next = 6;
              return this.readOnlyContract.mintConditions(i);

            case 6:
              _context11.t1 = _context11.sent;

              _context11.t0.push.call(_context11.t0, _context11.t1);

              _context11.next = 13;
              break;

            case 10:
              _context11.prev = 10;
              _context11.t2 = _context11["catch"](2);
              return _context11.abrupt("break", 16);

            case 13:
              i++;
              _context11.next = 2;
              break;

            case 16:
              return _context11.abrupt("return", conditions);

            case 17:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this, [[2, 10]]);
    }));

    function getAllMintConditions() {
      return _getAllMintConditions.apply(this, arguments);
    }

    return getAllMintConditions;
  }();

  _proto.getAllClaimConditions = /*#__PURE__*/function () {
    var _getAllClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
      var conditions, i, mc;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              conditions = [];
              i = 0;

            case 2:
              _context12.prev = 2;
              _context12.next = 5;
              return this.readOnlyContract.mintConditions(i);

            case 5:
              mc = _context12.sent;
              _context12.t0 = conditions;
              _context12.next = 9;
              return this.transformResultToClaimCondition(mc);

            case 9:
              _context12.t1 = _context12.sent;

              _context12.t0.push.call(_context12.t0, _context12.t1);

              _context12.next = 16;
              break;

            case 13:
              _context12.prev = 13;
              _context12.t2 = _context12["catch"](2);
              return _context12.abrupt("break", 19);

            case 16:
              i++;
              _context12.next = 2;
              break;

            case 19:
              return _context12.abrupt("return", conditions);

            case 20:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this, [[2, 13]]);
    }));

    function getAllClaimConditions() {
      return _getAllClaimConditions.apply(this, arguments);
    }

    return getAllClaimConditions;
  }();

  _proto.totalSupply = /*#__PURE__*/function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              return _context13.abrupt("return", _context13.sent);

            case 3:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function totalSupply() {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }();

  _proto.maxTotalSupply = /*#__PURE__*/function () {
    var _maxTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.readOnlyContract.maxTotalSupply();

            case 2:
              return _context14.abrupt("return", _context14.sent);

            case 3:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function maxTotalSupply() {
      return _maxTotalSupply.apply(this, arguments);
    }

    return maxTotalSupply;
  }();

  _proto.totalUnclaimedSupply = /*#__PURE__*/function () {
    var _totalUnclaimedSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              _context15.t0 = _context15.sent;
              _context15.next = 5;
              return this.totalClaimedSupply();

            case 5:
              _context15.t1 = _context15.sent;
              return _context15.abrupt("return", _context15.t0.sub.call(_context15.t0, _context15.t1));

            case 7:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function totalUnclaimedSupply() {
      return _totalUnclaimedSupply.apply(this, arguments);
    }

    return totalUnclaimedSupply;
  }();

  _proto.totalClaimedSupply = /*#__PURE__*/function () {
    var _totalClaimedSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.readOnlyContract.nextMintTokenId();

            case 2:
              return _context16.abrupt("return", _context16.sent);

            case 3:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function totalClaimedSupply() {
      return _totalClaimedSupply.apply(this, arguments);
    }

    return totalClaimedSupply;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(address) {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.readOnlyContract.balanceOf(address);

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function balanceOf(_x9) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.t0 = this;
              _context18.next = 3;
              return this.getSignerAddress();

            case 3:
              _context18.t1 = _context18.sent;
              _context18.next = 6;
              return _context18.t0.balanceOf.call(_context18.t0, _context18.t1);

            case 6:
              return _context18.abrupt("return", _context18.sent);

            case 7:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(address, operator) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context19.abrupt("return", _context19.sent);

            case 3:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function isApproved(_x10, _x11) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions
  ;

  _proto.setApproval =
  /*#__PURE__*/
  function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(operator, approved) {
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context20.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context20.abrupt("return", _context20.sent);

            case 4:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function setApproval(_x12, _x13) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(to, tokenId) {
      var from;
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.getSignerAddress();

            case 2:
              from = _context21.sent;
              _context21.next = 5;
              return this.sendTransaction("safeTransferFrom(address,address,uint256)", [from, to, tokenId]);

            case 5:
              return _context21.abrupt("return", _context21.sent);

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function transfer(_x14, _x15) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }()
  /**
   * @deprecated - The function has been deprecated. Use `mintBatch` instead.
   */
  ;

  _proto.lazyMint =
  /*#__PURE__*/
  function () {
    var _lazyMint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(metadata) {
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.lazyMintBatch([metadata]);

            case 2:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function lazyMint(_x16) {
      return _lazyMint.apply(this, arguments);
    }

    return lazyMint;
  }();

  _proto.pinToIpfs = /*#__PURE__*/function () {
    var _pinToIpfs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(files) {
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.storage.uploadBatch(files, this.address);

            case 2:
              return _context23.abrupt("return", _context23.sent);

            case 3:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function pinToIpfs(_x17) {
      return _pinToIpfs.apply(this, arguments);
    }

    return pinToIpfs;
  }()
  /**
   * @deprecated - The function has been deprecated. Use `mintBatch` instead.
   */
  ;

  _proto.lazyMintBatch =
  /*#__PURE__*/
  function () {
    var _lazyMintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(metadatas) {
      var _this6 = this;

      var uris;
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              _context24.next = 2;
              return Promise.all(metadatas.map(function (m) {
                return _this6.storage.uploadMetadata(m);
              }));

            case 2:
              uris = _context24.sent;
              _context24.next = 5;
              return this.sendTransaction("lazyMintBatch", [uris]);

            case 5:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24, this);
    }));

    function lazyMintBatch(_x18) {
      return _lazyMintBatch.apply(this, arguments);
    }

    return lazyMintBatch;
  }()
  /**
   * @deprecated - The function has been deprecated. Use `mintBatch` instead.
   */
  ;

  _proto.lazyMintAmount =
  /*#__PURE__*/
  function () {
    var _lazyMintAmount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(amount) {
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              _context25.next = 2;
              return this.sendTransaction("lazyMintAmount", [amount]);

            case 2:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25, this);
    }));

    function lazyMintAmount(_x19) {
      return _lazyMintAmount.apply(this, arguments);
    }

    return lazyMintAmount;
  }()
  /**
   * @deprecated - Use {@link DropModule.setClaimConditions} instead
   */
  ;

  _proto.setMintConditions =
  /*#__PURE__*/
  function () {
    var _setMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(factory) {
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              return _context26.abrupt("return", this.setClaimConditions(factory));

            case 1:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26, this);
    }));

    function setMintConditions(_x20) {
      return _setMintConditions.apply(this, arguments);
    }

    return setMintConditions;
  }()
  /**
   * Sets public mint conditions for the next minting using the
   * claim condition factory.
   *
   * @param factory - The claim condition factory.
   */
  ;

  _proto.setClaimConditions =
  /*#__PURE__*/
  function () {
    var _setClaimConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27(factory) {
      var conditions, merkleInfo, _yield$this$getMetada, metadata, metatdataUri, encoded;

      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              conditions = factory.buildConditions();
              merkleInfo = {};
              factory.allSnapshots().forEach(function (s) {
                merkleInfo[s.merkleRoot] = s.snapshotUri;
              });
              _context27.next = 5;
              return this.getMetadata();

            case 5:
              _yield$this$getMetada = _context27.sent;
              metadata = _yield$this$getMetada.metadata;
              !metadata ? process.env.NODE_ENV !== "production" ? invariant(false, "Metadata is not set, this should never happen") : invariant(false) : void 0;

              if (factory.allSnapshots().length === 0 && "merkle" in metadata) {
                metadata["merkle"] = {};
              } else {
                metadata["merkle"] = merkleInfo;
              }

              _context27.next = 11;
              return this.storage.upload(JSON.stringify(metadata));

            case 11:
              metatdataUri = _context27.sent;
              encoded = [this.contract["interface"].encodeFunctionData("setContractURI", [metatdataUri]), this.contract["interface"].encodeFunctionData("setPublicMintConditions", [conditions])];
              _context27.next = 15;
              return this.sendTransaction("multicall", [encoded]);

            case 15:
              return _context27.abrupt("return", _context27.sent);

            case 16:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27, this);
    }));

    function setClaimConditions(_x21) {
      return _setClaimConditions.apply(this, arguments);
    }

    return setClaimConditions;
  }()
  /**
   * Creates a claim condition factory
   *
   * @returns - A new claim condition factory
   */
  ;

  _proto.getClaimConditionsFactory = function getClaimConditionsFactory() {
    var createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);
    var factory = new ClaimConditionFactory(createSnapshotFunc);
    return factory;
  }
  /**
   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.
   */
  ;

  _proto.getMintConditionsFactory = function getMintConditionsFactory() {
    return this.getClaimConditionsFactory();
  }
  /**
   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.
   */
  ;

  _proto.setPublicMintConditions =
  /*#__PURE__*/
  function () {
    var _setPublicMintConditions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28(conditions) {
      var _conditions;

      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              _conditions = conditions.map(function (c) {
                return {
                  startTimestamp: c.startTimestampInSeconds || 0,
                  maxMintSupply: c.maxMintSupply,
                  currentMintSupply: 0,
                  quantityLimitPerTransaction: c.quantityLimitPerTransaction || c.maxMintSupply,
                  waitTimeSecondsLimitPerTransaction: c.waitTimeSecondsLimitPerTransaction || 0,
                  pricePerToken: c.pricePerToken || 0,
                  currency: c.currency || AddressZero,
                  merkleRoot: c.merkleRoot || hexZeroPad([0], 32)
                };
              });
              _context28.next = 3;
              return this.sendTransaction("setPublicMintConditions", [_conditions]);

            case 3:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28, this);
    }));

    function setPublicMintConditions(_x22) {
      return _setPublicMintConditions.apply(this, arguments);
    }

    return setPublicMintConditions;
  }();

  _proto.canClaim = /*#__PURE__*/function () {
    var _canClaim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29(quantity, proofs) {
      var mintCondition, overrides, erc20, owner, spender, allowance, totalPrice;
      return runtime_1.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              if (proofs === void 0) {
                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];
              }

              _context29.prev = 1;
              _context29.next = 4;
              return this.getActiveClaimCondition();

            case 4:
              mintCondition = _context29.sent;
              _context29.next = 7;
              return this.getCallOverrides();

            case 7:
              _context29.t0 = _context29.sent;

              if (_context29.t0) {
                _context29.next = 10;
                break;
              }

              _context29.t0 = {};

            case 10:
              overrides = _context29.t0;

              if (!mintCondition.pricePerToken.gt(0)) {
                _context29.next = 26;
                break;
              }

              if (!(mintCondition.currency === AddressZero)) {
                _context29.next = 16;
                break;
              }

              overrides["value"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);
              _context29.next = 26;
              break;

            case 16:
              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);
              _context29.next = 19;
              return this.getSignerAddress();

            case 19:
              owner = _context29.sent;
              spender = this.address;
              _context29.next = 23;
              return erc20.allowance(owner, spender);

            case 23:
              allowance = _context29.sent;
              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));

              if (allowance.lt(totalPrice)) ;

            case 26:
              _context29.next = 28;
              return this.readOnlyContract.callStatic.claim(quantity, proofs, overrides);

            case 28:
              return _context29.abrupt("return", true);

            case 31:
              _context29.prev = 31;
              _context29.t1 = _context29["catch"](1);
              return _context29.abrupt("return", false);

            case 34:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29, this, [[1, 31]]);
    }));

    function canClaim(_x23, _x24) {
      return _canClaim.apply(this, arguments);
    }

    return canClaim;
  }();

  _proto.claim = /*#__PURE__*/function () {
    var _claim = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31(quantity, proofs) {
      var _this7 = this;

      var mintCondition, _yield$this$getMetada2, metadata, addressToClaim, snapshot, jsonConvert, snapshotData, item, overrides, erc20, owner, spender, allowance, totalPrice, receipt, event, startingIndex, endingIndex, tokenIds, i;

      return runtime_1.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              if (proofs === void 0) {
                proofs = [/*#__PURE__*/hexZeroPad([0], 32)];
              }

              _context31.next = 3;
              return this.getActiveClaimCondition();

            case 3:
              mintCondition = _context31.sent;
              _context31.next = 6;
              return this.getMetadata();

            case 6:
              _yield$this$getMetada2 = _context31.sent;
              metadata = _yield$this$getMetada2.metadata;
              _context31.next = 10;
              return this.getSignerAddress();

            case 10:
              addressToClaim = _context31.sent;

              if (mintCondition.merkleRoot.toString().startsWith(AddressZero)) {
                _context31.next = 21;
                break;
              }

              _context31.next = 14;
              return this.storage.get(metadata == null ? void 0 : metadata.merkle[mintCondition.merkleRoot.toString()]);

            case 14:
              snapshot = _context31.sent;
              jsonConvert = new JsonConvert();
              snapshotData = jsonConvert.deserializeObject(JSON.parse(snapshot), Snapshot);
              item = snapshotData.claims.find(function (c) {
                return c.address === addressToClaim;
              });

              if (!(item === undefined)) {
                _context31.next = 20;
                break;
              }

              throw new Error("No claim found for this address");

            case 20:
              proofs = item.proof;

            case 21:
              _context31.next = 23;
              return this.getCallOverrides();

            case 23:
              _context31.t0 = _context31.sent;

              if (_context31.t0) {
                _context31.next = 26;
                break;
              }

              _context31.t0 = {};

            case 26:
              overrides = _context31.t0;

              if (!mintCondition.pricePerToken.gt(0)) {
                _context31.next = 44;
                break;
              }

              if (!(mintCondition.currency === AddressZero)) {
                _context31.next = 32;
                break;
              }

              overrides["value"] = BigNumber.from(mintCondition.pricePerToken).mul(quantity);
              _context31.next = 44;
              break;

            case 32:
              erc20 = ERC20__factory.connect(mintCondition.currency, this.providerOrSigner);
              _context31.next = 35;
              return this.getSignerAddress();

            case 35:
              owner = _context31.sent;
              spender = this.address;
              _context31.next = 39;
              return erc20.allowance(owner, spender);

            case 39:
              allowance = _context31.sent;
              totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(BigNumber.from(quantity));

              if (!allowance.lt(totalPrice)) {
                _context31.next = 44;
                break;
              }

              _context31.next = 44;
              return this.sendContractTransaction(erc20, "approve", [spender, allowance.add(totalPrice)]);

            case 44:
              _context31.next = 46;
              return this.sendTransaction("claim", [quantity, proofs], overrides);

            case 46:
              receipt = _context31.sent;
              event = this.parseEventLogs("Claimed", receipt == null ? void 0 : receipt.logs);
              startingIndex = event.startTokenId;
              endingIndex = startingIndex.add(quantity);
              tokenIds = [];

              for (i = startingIndex; i.lt(endingIndex); i = i.add(1)) {
                tokenIds.push(BigNumber.from(i.toString()));
              }

              _context31.next = 54;
              return Promise.all(tokenIds.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30(t) {
                  return runtime_1.wrap(function _callee30$(_context30) {
                    while (1) {
                      switch (_context30.prev = _context30.next) {
                        case 0:
                          _context30.next = 2;
                          return _this7.get(t.toString());

                        case 2:
                          return _context30.abrupt("return", _context30.sent);

                        case 3:
                        case "end":
                          return _context30.stop();
                      }
                    }
                  }, _callee30);
                }));

                return function (_x27) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 54:
              return _context31.abrupt("return", _context31.sent);

            case 55:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31, this);
    }));

    function claim(_x25, _x26) {
      return _claim.apply(this, arguments);
    }

    return claim;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(tokenId) {
      return runtime_1.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              _context32.next = 2;
              return this.sendTransaction("burn", [tokenId]);

            case 2:
              return _context32.abrupt("return", _context32.sent);

            case 3:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32, this);
    }));

    function burn(_x28) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee33(from, to, tokenId) {
      return runtime_1.wrap(function _callee33$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              _context33.next = 2;
              return this.sendTransaction("transferFrom", [from, to, tokenId]);

            case 2:
              return _context33.abrupt("return", _context33.sent);

            case 3:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee33, this);
    }));

    function transferFrom(_x29, _x30, _x31) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }() // owner functions
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee34(metadata) {
      var uri;
      return runtime_1.wrap(function _callee34$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return this.storage.uploadMetadata(metadata);

            case 2:
              uri = _context34.sent;
              _context34.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context34.abrupt("return", _context34.sent);

            case 6:
            case "end":
              return _context34.stop();
          }
        }
      }, _callee34, this);
    }));

    function setModuleMetadata(_x32) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee35(amount) {
      var _yield$this$getMetada3, metadata, encoded, uri;

      return runtime_1.wrap(function _callee35$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              _context35.next = 2;
              return this.getMetadata();

            case 2:
              _yield$this$getMetada3 = _context35.sent;
              metadata = _yield$this$getMetada3.metadata;
              encoded = [];

              if (metadata) {
                _context35.next = 7;
                break;
              }

              throw new Error("No metadata found, this module might be invalid!");

            case 7:
              metadata.seller_fee_basis_points = amount;
              _context35.t0 = this.storage;
              _context35.t1 = _extends({}, metadata);
              _context35.t2 = this.address;
              _context35.next = 13;
              return this.getSignerAddress();

            case 13:
              _context35.t3 = _context35.sent;
              _context35.next = 16;
              return _context35.t0.uploadMetadata.call(_context35.t0, _context35.t1, _context35.t2, _context35.t3);

            case 16:
              uri = _context35.sent;
              encoded.push(this.contract["interface"].encodeFunctionData("setRoyaltyBps", [amount]));
              encoded.push(this.contract["interface"].encodeFunctionData("setContractURI", [uri]));
              _context35.next = 21;
              return this.sendTransaction("multicall", [encoded]);

            case 21:
              return _context35.abrupt("return", _context35.sent);

            case 22:
            case "end":
              return _context35.stop();
          }
        }
      }, _callee35, this);
    }));

    function setRoyaltyBps(_x33) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setBaseTokenUri = /*#__PURE__*/function () {
    var _setBaseTokenUri = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee36(uri) {
      return runtime_1.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              _context36.next = 2;
              return this.sendTransaction("setBaseTokenURI", [uri]);

            case 2:
              return _context36.abrupt("return", _context36.sent);

            case 3:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36, this);
    }));

    function setBaseTokenUri(_x34) {
      return _setBaseTokenUri.apply(this, arguments);
    }

    return setBaseTokenUri;
  }();

  _proto.setMaxTotalSupply = /*#__PURE__*/function () {
    var _setMaxTotalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee37(amount) {
      return runtime_1.wrap(function _callee37$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              _context37.next = 2;
              return this.sendTransaction("setMaxTotalSupply", [amount]);

            case 2:
              return _context37.abrupt("return", _context37.sent);

            case 3:
            case "end":
              return _context37.stop();
          }
        }
      }, _callee37, this);
    }));

    function setMaxTotalSupply(_x35) {
      return _setMaxTotalSupply.apply(this, arguments);
    }

    return setMaxTotalSupply;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee38(restricted) {
      return runtime_1.wrap(function _callee38$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              _context38.next = 2;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 2:
              return _context38.abrupt("return", _context38.sent);

            case 3:
            case "end":
              return _context38.stop();
          }
        }
      }, _callee38, this);
    }));

    function setRestrictedTransfer(_x36) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }()
  /**
   * Gets the royalty BPS (basis points) of the contract
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyBps =
  /*#__PURE__*/
  function () {
    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee39() {
      return runtime_1.wrap(function _callee39$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              _context39.next = 2;
              return this.readOnlyContract.royaltyBps();

            case 2:
              return _context39.abrupt("return", _context39.sent);

            case 3:
            case "end":
              return _context39.stop();
          }
        }
      }, _callee39, this);
    }));

    function getRoyaltyBps() {
      return _getRoyaltyBps.apply(this, arguments);
    }

    return getRoyaltyBps;
  }()
  /**
   * Gets the address of the royalty recipient
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyRecipientAddress =
  /*#__PURE__*/
  function () {
    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee40() {
      var _metadata$metadata;

      var metadata;
      return runtime_1.wrap(function _callee40$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              _context40.next = 2;
              return this.getMetadata();

            case 2:
              metadata = _context40.sent;

              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {
                _context40.next = 5;
                break;
              }

              return _context40.abrupt("return", metadata.metadata.fee_recipient);

            case 5:
              return _context40.abrupt("return", "");

            case 6:
            case "end":
              return _context40.stop();
          }
        }
      }, _callee40, this);
    }));

    function getRoyaltyRecipientAddress() {
      return _getRoyaltyRecipientAddress.apply(this, arguments);
    }

    return getRoyaltyRecipientAddress;
  }();

  return DropModule;
}(ModuleWithRoles);
DropModule.moduleType = ModuleType.DROP;
DropModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getMarketModule}
 * @public
 */

var MarketModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(MarketModule, _ModuleWithRoles);

  function MarketModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = MarketModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return MarketModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return Market__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return MarketModule.moduleType;
  };

  _proto.transformResultToListing = /*#__PURE__*/function () {
    var _transformResultToListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(listing) {
      var currency, metadata;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              currency = null;
              _context.prev = 1;
              _context.next = 4;
              return getCurrencyValue(this.providerOrSigner, listing.currency, listing.pricePerToken);

            case 4:
              currency = _context.sent;
              _context.next = 9;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](1);

            case 9:
              metadata = undefined;
              _context.prev = 10;
              _context.next = 13;
              return getMetadataWithoutContract(this.providerOrSigner, listing.assetContract, listing.tokenId.toString(), this.ipfsGatewayUrl);

            case 13:
              metadata = _context.sent;
              _context.next = 18;
              break;

            case 16:
              _context.prev = 16;
              _context.t1 = _context["catch"](10);

            case 18:
              return _context.abrupt("return", {
                id: listing.listingId.toString(),
                seller: listing.seller,
                tokenId: listing.tokenId.toString(),
                tokenContract: listing.assetContract,
                tokenMetadata: metadata,
                quantity: listing.quantity,
                price: listing.pricePerToken,
                currencyContract: listing.currency,
                currencyMetadata: currency,
                saleStart: listing.saleStart.gt(0) ? new Date(listing.saleStart.toNumber() * 1000) : null,
                saleEnd: listing.saleEnd.gt(0) && listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1) ? new Date(listing.saleEnd.toNumber() * 1000) : null
              });

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[1, 7], [10, 16]]);
    }));

    function transformResultToListing(_x) {
      return _transformResultToListing.apply(this, arguments);
    }

    return transformResultToListing;
  }()
  /**
   * @deprecated Use {@link MarketModule.get} instead.
   */
  ;

  _proto.getListing =
  /*#__PURE__*/
  function () {
    var _getListing = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(listingId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.get(listingId);

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getListing(_x2) {
      return _getListing.apply(this, arguments);
    }

    return getListing;
  }()
  /**
   * @deprecated Use {@link MarketModule.getAll} instead.
   */
  ;

  _proto.getAllListings =
  /*#__PURE__*/
  function () {
    var _getAllListings = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(filter) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getAll(filter);

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAllListings(_x3) {
      return _getAllListings.apply(this, arguments);
    }

    return getAllListings;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(listingId) {
      var listing;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.listings(listingId);

            case 2:
              listing = _context4.sent;
              _context4.next = 5;
              return this.transformResultToListing(listing);

            case 5:
              return _context4.abrupt("return", _context4.sent);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function get(_x4) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(filter) {
      var _this = this;

      var listings;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              listings = [];

              if (filter) {
                _context5.next = 9;
                break;
              }

              _context5.t0 = listings;
              _context5.next = 5;
              return this.readOnlyContract.getAllListings();

            case 5:
              _context5.t1 = _context5.sent;
              listings = _context5.t0.concat.call(_context5.t0, _context5.t1);
              _context5.next = 38;
              break;

            case 9:
              if (!(filter.tokenContract && filter.tokenId)) {
                _context5.next = 17;
                break;
              }

              _context5.t2 = listings;
              _context5.next = 13;
              return this.readOnlyContract.getListingsByAsset(filter.tokenContract, filter.tokenId);

            case 13:
              _context5.t3 = _context5.sent;
              listings = _context5.t2.concat.call(_context5.t2, _context5.t3);
              _context5.next = 38;
              break;

            case 17:
              if (!filter.seller) {
                _context5.next = 25;
                break;
              }

              _context5.t4 = listings;
              _context5.next = 21;
              return this.readOnlyContract.getListingsBySeller(filter.seller);

            case 21:
              _context5.t5 = _context5.sent;
              listings = _context5.t4.concat.call(_context5.t4, _context5.t5);
              _context5.next = 38;
              break;

            case 25:
              if (!filter.tokenContract) {
                _context5.next = 33;
                break;
              }

              _context5.t6 = listings;
              _context5.next = 29;
              return this.readOnlyContract.getListingsByAssetContract(filter.tokenContract);

            case 29:
              _context5.t7 = _context5.sent;
              listings = _context5.t6.concat.call(_context5.t6, _context5.t7);
              _context5.next = 38;
              break;

            case 33:
              _context5.t8 = listings;
              _context5.next = 36;
              return this.readOnlyContract.getAllListings();

            case 36:
              _context5.t9 = _context5.sent;
              listings = _context5.t8.concat.call(_context5.t8, _context5.t9);

            case 38:
              listings = listings.filter(function (l) {
                if (l.quantity.eq(0)) {
                  return false;
                }

                if (filter) {
                  var filterSeller = (filter == null ? void 0 : filter.seller) || "";
                  var filterTokenContract = (filter == null ? void 0 : filter.tokenContract) || "";
                  var filterTokenId = (filter == null ? void 0 : filter.tokenId) || "";

                  if (filterSeller && filterSeller.toLowerCase() !== l.seller.toLowerCase()) {
                    return false;
                  }

                  if (filterTokenContract && filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()) {
                    return false;
                  }

                  if (filterTokenId && filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()) {
                    return false;
                  }
                }

                return true;
              }).map(function (l) {
                return _this.transformResultToListing(l);
              });
              _context5.next = 41;
              return Promise.all(listings);

            case 41:
              return _context5.abrupt("return", _context5.sent);

            case 42:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getAll(_x5) {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getMarketFeeBps = /*#__PURE__*/function () {
    var _getMarketFeeBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.readOnlyContract.marketFeeBps();

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getMarketFeeBps() {
      return _getMarketFeeBps.apply(this, arguments);
    }

    return getMarketFeeBps;
  }() // write functions
  ;

  _proto.list =
  /*#__PURE__*/
  function () {
    var _list = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(assetContract, tokenId, currencyContract, price, quantity, tokensPerBuyer, secondsUntilStart, secondsUntilEnd) {
      var from, erc165, isERC721, asset, approved, isTokenApproved, _asset, _approved, receipt, event, listing;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (tokensPerBuyer === void 0) {
                tokensPerBuyer = 0;
              }

              if (secondsUntilStart === void 0) {
                secondsUntilStart = 0;
              }

              if (secondsUntilEnd === void 0) {
                secondsUntilEnd = 0;
              }

              _context7.next = 5;
              return this.getSignerAddress();

            case 5:
              from = _context7.sent;
              erc165 = ERC165__factory.connect(assetContract, this.providerOrSigner); // check for token approval

              _context7.next = 9;
              return erc165.supportsInterface(InterfaceId_IERC721);

            case 9:
              isERC721 = _context7.sent;

              if (!isERC721) {
                _context7.next = 26;
                break;
              }

              asset = ERC721__factory.connect(assetContract, this.providerOrSigner);
              _context7.next = 14;
              return asset.isApprovedForAll(from, this.address);

            case 14:
              approved = _context7.sent;

              if (approved) {
                _context7.next = 24;
                break;
              }

              _context7.next = 18;
              return asset.getApproved(tokenId);

            case 18:
              _context7.t0 = _context7.sent.toLowerCase();
              _context7.t1 = this.address.toLowerCase();
              isTokenApproved = _context7.t0 === _context7.t1;

              if (isTokenApproved) {
                _context7.next = 24;
                break;
              }

              _context7.next = 24;
              return this.sendContractTransaction(asset, "setApprovalForAll", [this.address, true]);

            case 24:
              _context7.next = 33;
              break;

            case 26:
              _asset = ERC1155__factory.connect(assetContract, this.providerOrSigner);
              _context7.next = 29;
              return _asset.isApprovedForAll(from, this.address);

            case 29:
              _approved = _context7.sent;

              if (_approved) {
                _context7.next = 33;
                break;
              }

              _context7.next = 33;
              return this.sendContractTransaction(_asset, "setApprovalForAll", [this.address, true]);

            case 33:
              _context7.next = 35;
              return this.sendTransaction("list", [assetContract, tokenId, currencyContract, price, quantity, tokensPerBuyer, secondsUntilStart, secondsUntilEnd]);

            case 35:
              receipt = _context7.sent;
              event = this.parseEventLogs("NewListing", receipt == null ? void 0 : receipt.logs);
              listing = event == null ? void 0 : event.listing;
              _context7.next = 40;
              return this.transformResultToListing(listing);

            case 40:
              return _context7.abrupt("return", _context7.sent);

            case 41:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function list(_x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13) {
      return _list.apply(this, arguments);
    }

    return list;
  }();

  _proto.unlistAll = /*#__PURE__*/function () {
    var _unlistAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(listingId) {
      var maxQuantity;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.get(listingId);

            case 2:
              maxQuantity = _context8.sent.quantity;
              _context8.next = 5;
              return this.unlist(listingId, maxQuantity);

            case 5:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function unlistAll(_x14) {
      return _unlistAll.apply(this, arguments);
    }

    return unlistAll;
  }();

  _proto.unlist = /*#__PURE__*/function () {
    var _unlist = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(listingId, quantity) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.sendTransaction("unlist", [listingId, quantity]);

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function unlist(_x15, _x16) {
      return _unlist.apply(this, arguments);
    }

    return unlist;
  }();

  _proto.buy = /*#__PURE__*/function () {
    var _buy = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(listingId, quantity) {
      var listing, owner, spender, totalPrice, erc20, allowance, receipt, event;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.get(listingId);

            case 2:
              listing = _context10.sent;
              _context10.next = 5;
              return this.getSignerAddress();

            case 5:
              owner = _context10.sent;
              spender = this.address;
              totalPrice = listing.price.mul(BigNumber.from(quantity));

              if (!(listing.currencyContract && listing.currencyContract !== AddressZero)) {
                _context10.next = 16;
                break;
              }

              erc20 = ERC20__factory.connect(listing.currencyContract, this.providerOrSigner);
              _context10.next = 12;
              return erc20.allowance(owner, spender);

            case 12:
              allowance = _context10.sent;

              if (!allowance.lt(totalPrice)) {
                _context10.next = 16;
                break;
              }

              _context10.next = 16;
              return this.sendContractTransaction(erc20, "approve", [spender, allowance.add(totalPrice)]);

            case 16:
              _context10.next = 18;
              return this.sendTransaction("buy", [listingId, quantity]);

            case 18:
              receipt = _context10.sent;
              event = this.parseEventLogs("NewSale", receipt == null ? void 0 : receipt.logs);
              _context10.next = 22;
              return this.transformResultToListing(event == null ? void 0 : event.listing);

            case 22:
              return _context10.abrupt("return", _context10.sent);

            case 23:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function buy(_x17, _x18) {
      return _buy.apply(this, arguments);
    }

    return buy;
  }() // owner functions
  ;

  _proto.setModuleMetadata =
  /*#__PURE__*/
  function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadata) {
      var uri;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context11.sent;
              _context11.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context11.abrupt("return", _context11.sent);

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function setModuleMetadata(_x19) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setMarketFeeBps = /*#__PURE__*/function () {
    var _setMarketFeeBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(fee) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.sendTransaction("setMarketFeeBps", [fee]);

            case 2:
              return _context12.abrupt("return", _context12.sent);

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function setMarketFeeBps(_x20) {
      return _setMarketFeeBps.apply(this, arguments);
    }

    return setMarketFeeBps;
  }();

  return MarketModule;
}(ModuleWithRoles);
MarketModule.moduleType = ModuleType.MARKET;
MarketModule.roles = [RolesMap.admin, RolesMap.lister, RolesMap.pauser];

/**
 * Access this module by calling {@link ThirdwebSDK.getNFTModule}
 * @public
 */

var NFTModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(NFTModule, _ModuleWithRoles);

  function NFTModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = NFTModule.prototype;

  _proto.getModuleRoles = function getModuleRoles() {
    return NFTModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return NFT__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return NFTModule.moduleType;
  }
  /**
   * Fetches an NFT from storage with the resolved metadata.
   *
   * @param tokenId - The id of the token to fetch.
   * @returns - The NFT metadata.
   */
  ;

  _proto.get =
  /*#__PURE__*/
  function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tokenId) {
      var storage, uri, metadata;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              storage = this.sdk.getStorage();
              _context.next = 3;
              return this.readOnlyContract.tokenURI(tokenId);

            case 3:
              uri = _context.sent;
              _context.t0 = JSON;
              _context.next = 7;
              return storage.get(uri);

            case 7:
              _context.t1 = _context.sent;
              metadata = _context.t0.parse.call(_context.t0, _context.t1);
              return _context.abrupt("return", _extends({}, metadata, {
                id: tokenId,
                uri: uri,
                image: storage.resolveFullUrl(metadata.image)
              }));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get(_x) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var _this = this;

      var maxId;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context2.sent.toNumber();
              _context2.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this.get(i.toString());
              }));

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getWithOwner = /*#__PURE__*/function () {
    var _getWithOwner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(tokenId) {
      var _yield$Promise$all, owner, metadata;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all([this.ownerOf(tokenId), this.get(tokenId)]);

            case 2:
              _yield$Promise$all = _context3.sent;
              owner = _yield$Promise$all[0];
              metadata = _yield$Promise$all[1];
              return _context3.abrupt("return", {
                owner: owner,
                metadata: metadata
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getWithOwner(_x2) {
      return _getWithOwner.apply(this, arguments);
    }

    return getWithOwner;
  }();

  _proto.getAllWithOwner = /*#__PURE__*/function () {
    var _getAllWithOwner = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var _this2 = this;

      var maxId;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context4.sent.toNumber();
              _context4.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this2.getWithOwner(i.toString());
              }));

            case 5:
              return _context4.abrupt("return", _context4.sent);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAllWithOwner() {
      return _getAllWithOwner.apply(this, arguments);
    }

    return getAllWithOwner;
  }()
  /**
   * Checks the owner of a particular NFT
   *
   * @param tokenId - ID of the NFT to get the owner of
   * @returns the owner of the token, or a zero address if the
   * token has been burned
   */
  ;

  _proto.ownerOf =
  /*#__PURE__*/
  function () {
    var _ownerOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(tokenId) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              _context5.next = 3;
              return this.readOnlyContract.ownerOf(tokenId);

            case 3:
              return _context5.abrupt("return", _context5.sent);

            case 6:
              _context5.prev = 6;
              _context5.t0 = _context5["catch"](0);
              return _context5.abrupt("return", AddressZero);

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 6]]);
    }));

    function ownerOf(_x3) {
      return _ownerOf.apply(this, arguments);
    }

    return ownerOf;
  }();

  _proto.getOwned = /*#__PURE__*/function () {
    var _getOwned = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_address) {
      var _this3 = this;

      var address, balance, indices, tokenIds;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!_address) {
                _context6.next = 4;
                break;
              }

              _context6.t0 = _address;
              _context6.next = 7;
              break;

            case 4:
              _context6.next = 6;
              return this.getSignerAddress();

            case 6:
              _context6.t0 = _context6.sent;

            case 7:
              address = _context6.t0;
              _context6.next = 10;
              return this.readOnlyContract.balanceOf(address);

            case 10:
              balance = _context6.sent;
              indices = Array.from(Array(balance.toNumber()).keys());
              _context6.next = 14;
              return Promise.all(indices.map(function (i) {
                return _this3.readOnlyContract.tokenOfOwnerByIndex(address, i);
              }));

            case 14:
              tokenIds = _context6.sent;
              _context6.next = 17;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this3.get(tokenId.toString());
              }));

            case 17:
              return _context6.abrupt("return", _context6.sent);

            case 18:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getOwned(_x4) {
      return _getOwned.apply(this, arguments);
    }

    return getOwned;
  }();

  _proto.totalSupply = /*#__PURE__*/function () {
    var _totalSupply = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.totalSupply();

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function totalSupply() {
      return _totalSupply.apply(this, arguments);
    }

    return totalSupply;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(address) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.readOnlyContract.balanceOf(address);

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function balanceOf(_x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.t0 = this;
              _context9.next = 3;
              return this.getSignerAddress();

            case 3:
              _context9.t1 = _context9.sent;
              _context9.next = 6;
              return _context9.t0.balanceOf.call(_context9.t0, _context9.t1);

            case 6:
              return _context9.abrupt("return", _context9.sent);

            case 7:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(address, operator) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context10.abrupt("return", _context10.sent);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function isApproved(_x6, _x7) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }() // write functions
  ;

  _proto.setApproval =
  /*#__PURE__*/
  function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(operator, approved) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context11.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
              return _context11.abrupt("return", _context11.sent);

            case 4:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function setApproval(_x8, _x9) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(to, tokenId) {
      var from;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.getSignerAddress();

            case 2:
              from = _context12.sent;
              _context12.next = 5;
              return this.sendTransaction("safeTransferFrom(address,address,uint256)", [from, to, tokenId]);

            case 5:
              return _context12.abrupt("return", _context12.sent);

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function transfer(_x10, _x11) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.mint =
  /*#__PURE__*/
  function () {
    var _mint = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(metadata) {
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.t0 = this;
              _context13.next = 3;
              return this.getSignerAddress();

            case 3:
              _context13.t1 = _context13.sent;
              _context13.t2 = metadata;
              _context13.next = 7;
              return _context13.t0.mintTo.call(_context13.t0, _context13.t1, _context13.t2);

            case 7:
              return _context13.abrupt("return", _context13.sent);

            case 8:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function mint(_x12) {
      return _mint.apply(this, arguments);
    }

    return mint;
  }();

  _proto.mintTo = /*#__PURE__*/function () {
    var _mintTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(to, metadata) {
      var uri, receipt, event, tokenId;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context14.sent;
              _context14.next = 5;
              return this.sendTransaction("mintNFT", [to, uri]);

            case 5:
              receipt = _context14.sent;
              event = this.parseEventLogs("Minted", receipt == null ? void 0 : receipt.logs);
              tokenId = event == null ? void 0 : event.tokenId;
              _context14.next = 10;
              return this.get(tokenId.toString());

            case 10:
              return _context14.abrupt("return", _context14.sent);

            case 11:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function mintTo(_x13, _x14) {
      return _mintTo.apply(this, arguments);
    }

    return mintTo;
  }();

  _proto.mintBatch = /*#__PURE__*/function () {
    var _mintBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(metadatas) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.t0 = this;
              _context15.next = 3;
              return this.getSignerAddress();

            case 3:
              _context15.t1 = _context15.sent;
              _context15.t2 = metadatas;
              _context15.next = 7;
              return _context15.t0.mintBatchTo.call(_context15.t0, _context15.t1, _context15.t2);

            case 7:
              return _context15.abrupt("return", _context15.sent);

            case 8:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function mintBatch(_x15) {
      return _mintBatch.apply(this, arguments);
    }

    return mintBatch;
  }();

  _proto.mintBatchTo = /*#__PURE__*/function () {
    var _mintBatchTo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(to, metadatas) {
      var _this4 = this;

      var uris, receipt, event, tokenIds;
      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return Promise.all(metadatas.map(function (m) {
                return _this4.sdk.getStorage().uploadMetadata(m);
              }));

            case 2:
              uris = _context16.sent;
              _context16.next = 5;
              return this.sendTransaction("mintNFTBatch", [to, uris]);

            case 5:
              receipt = _context16.sent;
              event = this.parseEventLogs("MintedBatch", receipt == null ? void 0 : receipt.logs);
              tokenIds = event.tokenIds;
              _context16.next = 10;
              return Promise.all(tokenIds.map(function (tokenId) {
                return _this4.get(tokenId.toString());
              }));

            case 10:
              return _context16.abrupt("return", _context16.sent);

            case 11:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function mintBatchTo(_x16, _x17) {
      return _mintBatchTo.apply(this, arguments);
    }

    return mintBatchTo;
  }();

  _proto.burn = /*#__PURE__*/function () {
    var _burn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(tokenId) {
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.sendTransaction("burn", [tokenId]);

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function burn(_x18) {
      return _burn.apply(this, arguments);
    }

    return burn;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(from, to, tokenId) {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              _context18.next = 2;
              return this.sendTransaction("transferFrom", [from, to, tokenId]);

            case 2:
              return _context18.abrupt("return", _context18.sent);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function transferFrom(_x19, _x20, _x21) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }() // owner functions
  ;

  _proto.setRestrictedTransfer =
  /*#__PURE__*/
  function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(restricted) {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context19.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
              return _context19.abrupt("return", _context19.sent);

            case 4:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function setRestrictedTransfer(_x22) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(amount) {
      var _yield$this$getMetada, metadata, encoded, uri;

      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.getMetadata();

            case 2:
              _yield$this$getMetada = _context20.sent;
              metadata = _yield$this$getMetada.metadata;
              encoded = [];

              if (metadata) {
                _context20.next = 7;
                break;
              }

              throw new Error("No metadata found, this module might be invalid!");

            case 7:
              metadata.seller_fee_basis_points = amount;
              _context20.t0 = this.sdk.getStorage();
              _context20.t1 = _extends({}, metadata);
              _context20.t2 = this.address;
              _context20.next = 13;
              return this.getSignerAddress();

            case 13:
              _context20.t3 = _context20.sent;
              _context20.next = 16;
              return _context20.t0.uploadMetadata.call(_context20.t0, _context20.t1, _context20.t2, _context20.t3);

            case 16:
              uri = _context20.sent;
              encoded.push(this.contract["interface"].encodeFunctionData("setRoyaltyBps", [amount]));
              encoded.push(this.contract["interface"].encodeFunctionData("setContractURI", [uri]));
              _context20.next = 21;
              return this.sendTransaction("multicall", [encoded]);

            case 21:
              return _context20.abrupt("return", _context20.sent);

            case 22:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function setRoyaltyBps(_x23) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(metadata) {
      var uri;
      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              _context21.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context21.sent;
              _context21.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context21.abrupt("return", _context21.sent);

            case 6:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21, this);
    }));

    function setModuleMetadata(_x24) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }()
  /**
   * Gets the royalty BPS (basis points) of the contract
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyBps =
  /*#__PURE__*/
  function () {
    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22() {
      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.readOnlyContract.royaltyBps();

            case 2:
              return _context22.abrupt("return", _context22.sent);

            case 3:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, this);
    }));

    function getRoyaltyBps() {
      return _getRoyaltyBps.apply(this, arguments);
    }

    return getRoyaltyBps;
  }()
  /**
   * Gets the address of the royalty recipient
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyRecipientAddress =
  /*#__PURE__*/
  function () {
    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23() {
      var _metadata$metadata;

      var metadata;
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return this.getMetadata();

            case 2:
              metadata = _context23.sent;

              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {
                _context23.next = 5;
                break;
              }

              return _context23.abrupt("return", metadata.metadata.fee_recipient);

            case 5:
              return _context23.abrupt("return", "");

            case 6:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23, this);
    }));

    function getRoyaltyRecipientAddress() {
      return _getRoyaltyRecipientAddress.apply(this, arguments);
    }

    return getRoyaltyRecipientAddress;
  }();

  return NFTModule;
}(ModuleWithRoles);
NFTModule.moduleType = ModuleType.NFT;
NFTModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 * Access this module by calling {@link ThirdwebSDK.getPackModule}
 * @beta
 */

var PackModule = /*#__PURE__*/function (_ModuleWithRoles) {
  _inheritsLoose(PackModule, _ModuleWithRoles);

  function PackModule() {
    return _ModuleWithRoles.apply(this, arguments) || this;
  }

  var _proto = PackModule.prototype;

  /**
   * @override
   * @internal
   */
  _proto.getModuleRoles = function getModuleRoles() {
    return PackModule.roles;
  }
  /**
   * @internal
   */
  ;

  _proto.connectContract = function connectContract() {
    return Pack__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return PackModule.moduleType;
  };

  _proto.open = /*#__PURE__*/function () {
    var _open = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(packId) {
      var _this = this;

      var receipt, event, requestId, opener, fulfillEvent, rewardIds;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.sendTransaction("openPack", [packId]);

            case 2:
              receipt = _context.sent;
              event = this.parseEventLogs("PackOpenRequest", receipt == null ? void 0 : receipt.logs);
              requestId = event.requestId;
              opener = event.opener;
              _context.next = 8;
              return new Promise(function (resolve) {
                _this.readOnlyContract.once( // eslint-disable-next-line new-cap
                _this.readOnlyContract.filters.PackOpenFulfilled(null, opener), function (_packId, _opener, _requestId, rewardContract, rewardIds) {
                  if (requestId === _requestId) {
                    resolve({
                      packId: _packId,
                      opener: _opener,
                      requestId: requestId,
                      rewardContract: rewardContract,
                      rewardIds: rewardIds
                    });
                  }
                });
              });

            case 8:
              fulfillEvent = _context.sent;
              rewardIds = fulfillEvent.rewardIds;
              _context.next = 12;
              return Promise.all(rewardIds.map(function (rewardId) {
                return getMetadataWithoutContract(_this.providerOrSigner, _this.address, rewardId.toString(), _this.ipfsGatewayUrl);
              }));

            case 12:
              return _context.abrupt("return", _context.sent);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function open(_x) {
      return _open.apply(this, arguments);
    }

    return open;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(packId) {
      var _yield$Promise$all, meta, state, supply, entity;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return Promise.all([getMetadataWithoutContract(this.providerOrSigner, this.address, packId, this.ipfsGatewayUrl), this.readOnlyContract.getPack(packId), this.readOnlyContract.totalSupply(packId)["catch"](function () {
                return BigNumber.from("0");
              })]);

            case 2:
              _yield$Promise$all = _context2.sent;
              meta = _yield$Promise$all[0];
              state = _yield$Promise$all[1];
              supply = _yield$Promise$all[2];
              entity = {
                id: packId,
                metadata: meta,
                creator: state.creator,
                currentSupply: supply,
                openStart: state.openStart.gt(0) ? new Date(state.openStart.toNumber() * 1000) : null
              };
              return _context2.abrupt("return", entity);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function get(_x2) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAll = /*#__PURE__*/function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var _this2 = this;

      var maxId;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.nextTokenId();

            case 2:
              maxId = _context3.sent.toNumber();
              _context3.next = 5;
              return Promise.all(Array.from(Array(maxId).keys()).map(function (i) {
                return _this2.get(i.toString());
              }));

            case 5:
              return _context3.abrupt("return", _context3.sent);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }();

  _proto.getNFTs = /*#__PURE__*/function () {
    var _getNFTs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(packId) {
      var _this3 = this;

      var packReward, rewards;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.getPackWithRewards(packId);

            case 2:
              packReward = _context4.sent;

              if (packReward.source) {
                _context4.next = 5;
                break;
              }

              throw new NotFoundError();

            case 5:
              _context4.next = 7;
              return Promise.all(packReward.tokenIds.map(function (tokenId) {
                return getMetadataWithoutContract(_this3.providerOrSigner, packReward.source, tokenId.toString(), _this3.ipfsGatewayUrl);
              }));

            case 7:
              rewards = _context4.sent;
              return _context4.abrupt("return", rewards.map(function (reward, i) {
                return {
                  supply: packReward.amountsPacked[i],
                  metadata: reward
                };
              }));

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getNFTs(_x3) {
      return _getNFTs.apply(this, arguments);
    }

    return getNFTs;
  }() // passthrough to the contract
  ;

  _proto.balanceOf =
  /*#__PURE__*/
  function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(address, tokenId) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.readOnlyContract.balanceOf(address, tokenId);

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOf(_x4, _x5) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tokenId) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = this;
              _context6.next = 3;
              return this.getSignerAddress();

            case 3:
              _context6.t1 = _context6.sent;
              _context6.t2 = tokenId;
              _context6.next = 7;
              return _context6.t0.balanceOf.call(_context6.t0, _context6.t1, _context6.t2);

            case 7:
              return _context6.abrupt("return", _context6.sent);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function balance(_x6) {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.isApproved = /*#__PURE__*/function () {
    var _isApproved = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(address, operator) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.readOnlyContract.isApprovedForAll(address, operator);

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function isApproved(_x7, _x8) {
      return _isApproved.apply(this, arguments);
    }

    return isApproved;
  }();

  _proto.setApproval = /*#__PURE__*/function () {
    var _setApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(operator, approved) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (approved === void 0) {
                approved = true;
              }

              _context8.next = 3;
              return this.sendTransaction("setApprovalForAll", [operator, approved]);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function setApproval(_x9, _x10) {
      return _setApproval.apply(this, arguments);
    }

    return setApproval;
  }();

  _proto.transfer = /*#__PURE__*/function () {
    var _transfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(to, tokenId, amount) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.t0 = this;
              _context9.next = 3;
              return this.getSignerAddress();

            case 3:
              _context9.t1 = _context9.sent;
              _context9.t2 = to;
              _context9.t3 = tokenId;
              _context9.t4 = amount;
              _context9.t5 = [0];
              _context9.t6 = [_context9.t1, _context9.t2, _context9.t3, _context9.t4, _context9.t5];
              _context9.next = 11;
              return _context9.t0.sendTransaction.call(_context9.t0, "safeTransferFrom", _context9.t6);

            case 11:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function transfer(_x11, _x12, _x13) {
      return _transfer.apply(this, arguments);
    }

    return transfer;
  }() // owner functions
  ;

  _proto.create =
  /*#__PURE__*/
  function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(args) {
      var _receipt$events, _event$args;

      var asset, from, ids, amounts, uri, packParams, tx, receipt, event, packId;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              asset = ERC1155__factory.connect(args.assetContract, this.providerOrSigner);
              _context10.next = 3;
              return this.getSignerAddress();

            case 3:
              from = _context10.sent;
              ids = args.assets.map(function (a) {
                return a.tokenId;
              });
              amounts = args.assets.map(function (a) {
                return a.amount;
              });
              _context10.next = 8;
              return this.sdk.getStorage().uploadMetadata(args.metadata);

            case 8:
              uri = _context10.sent;
              packParams = ethers.utils.defaultAbiCoder.encode(["string", "uint256", "uint256"], [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1]); // TODO: make it gasless

              _context10.t0 = asset;
              _context10.t1 = from;
              _context10.t2 = this.address;
              _context10.t3 = ids;
              _context10.t4 = amounts;
              _context10.t5 = packParams;
              _context10.next = 18;
              return this.getCallOverrides();

            case 18:
              _context10.t6 = _context10.sent;
              _context10.next = 21;
              return _context10.t0.safeBatchTransferFrom.call(_context10.t0, _context10.t1, _context10.t2, _context10.t3, _context10.t4, _context10.t5, _context10.t6);

            case 21:
              tx = _context10.sent;
              _context10.next = 24;
              return tx.wait();

            case 24:
              receipt = _context10.sent;
              event = receipt == null ? void 0 : (_receipt$events = receipt.events) == null ? void 0 : _receipt$events.find(function (e) {
                return e.event === "PackCreated";
              });
              packId = event == null ? void 0 : (_event$args = event.args) == null ? void 0 : _event$args.packId;
              _context10.next = 29;
              return this.get(packId);

            case 29:
              return _context10.abrupt("return", _context10.sent);

            case 30:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function create(_x14) {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  _proto.transferFrom = /*#__PURE__*/function () {
    var _transferFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(from, to, args, data) {
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              _context11.next = 3;
              return this.sendTransaction("safeTransferFrom", [from, to, args.tokenId, args.amount, data]);

            case 3:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function transferFrom(_x15, _x16, _x17, _x18) {
      return _transferFrom.apply(this, arguments);
    }

    return transferFrom;
  }();

  _proto.transferBatchFrom = /*#__PURE__*/function () {
    var _transferBatchFrom = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(from, to, args, data) {
      var ids, amounts;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (data === void 0) {
                data = [0];
              }

              ids = args.map(function (a) {
                return a.tokenId;
              });
              amounts = args.map(function (a) {
                return a.amount;
              });
              _context12.next = 5;
              return this.sendTransaction("safeBatchTransferFrom", [from, to, ids, amounts, data]);

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function transferBatchFrom(_x19, _x20, _x21, _x22) {
      return _transferBatchFrom.apply(this, arguments);
    }

    return transferBatchFrom;
  }() // owner functions
  ;

  _proto.getLinkBalance =
  /*#__PURE__*/
  function () {
    var _getLinkBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      var chainId, chainlink, erc20;
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.getChainID();

            case 2:
              chainId = _context13.sent;
              chainlink = ChainlinkVrf[chainId];
              erc20 = ERC20__factory.connect(chainlink.linkTokenAddress, this.providerOrSigner);
              _context13.t0 = getCurrencyValue;
              _context13.t1 = this.providerOrSigner;
              _context13.t2 = chainlink.linkTokenAddress;
              _context13.next = 10;
              return erc20.balanceOf(this.address);

            case 10:
              _context13.t3 = _context13.sent;
              _context13.next = 13;
              return (0, _context13.t0)(_context13.t1, _context13.t2, _context13.t3);

            case 13:
              return _context13.abrupt("return", _context13.sent);

            case 14:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function getLinkBalance() {
      return _getLinkBalance.apply(this, arguments);
    }

    return getLinkBalance;
  }();

  _proto.depositLink = /*#__PURE__*/function () {
    var _depositLink = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(amount) {
      var chainId, chainlink, erc20, tx;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.next = 2;
              return this.getChainID();

            case 2:
              chainId = _context14.sent;
              chainlink = ChainlinkVrf[chainId];
              erc20 = ERC20__factory.connect(chainlink.linkTokenAddress, this.providerOrSigner); // TODO: make it gasless

              _context14.t0 = erc20;
              _context14.t1 = this.address;
              _context14.t2 = amount;
              _context14.next = 10;
              return this.getCallOverrides();

            case 10:
              _context14.t3 = _context14.sent;
              _context14.next = 13;
              return _context14.t0.transfer.call(_context14.t0, _context14.t1, _context14.t2, _context14.t3);

            case 13:
              tx = _context14.sent;
              _context14.next = 16;
              return tx.wait();

            case 16:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function depositLink(_x23) {
      return _depositLink.apply(this, arguments);
    }

    return depositLink;
  }();

  _proto.withdrawLink = /*#__PURE__*/function () {
    var _withdrawLink = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(to, amount) {
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.sendTransaction("transferLink", [to, amount]);

            case 2:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function withdrawLink(_x24, _x25) {
      return _withdrawLink.apply(this, arguments);
    }

    return withdrawLink;
  }();

  _proto.setRoyaltyBps = /*#__PURE__*/function () {
    var _setRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(amount) {
      var _yield$this$getMetada, metadata, encoded, uri;

      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.getMetadata();

            case 2:
              _yield$this$getMetada = _context16.sent;
              metadata = _yield$this$getMetada.metadata;
              encoded = [];

              if (metadata) {
                _context16.next = 7;
                break;
              }

              throw new Error("No metadata found, this module might be invalid!");

            case 7:
              metadata.seller_fee_basis_points = amount;
              _context16.t0 = this.sdk.getStorage();
              _context16.t1 = _extends({}, metadata);
              _context16.t2 = this.address;
              _context16.next = 13;
              return this.getSignerAddress();

            case 13:
              _context16.t3 = _context16.sent;
              _context16.next = 16;
              return _context16.t0.uploadMetadata.call(_context16.t0, _context16.t1, _context16.t2, _context16.t3);

            case 16:
              uri = _context16.sent;
              encoded.push(this.contract["interface"].encodeFunctionData("setRoyaltyBps", [amount]));
              encoded.push(this.contract["interface"].encodeFunctionData("setContractURI", [uri]));
              _context16.next = 21;
              return this.sendTransaction("multicall", [encoded]);

            case 21:
              return _context16.abrupt("return", _context16.sent);

            case 22:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function setRoyaltyBps(_x26) {
      return _setRoyaltyBps.apply(this, arguments);
    }

    return setRoyaltyBps;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(metadata) {
      var uri;
      return runtime_1.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context17.sent;
              _context17.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    function setModuleMetadata(_x27) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }();

  _proto.setRestrictedTransfer = /*#__PURE__*/function () {
    var _setRestrictedTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(restricted) {
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              if (restricted === void 0) {
                restricted = false;
              }

              _context18.next = 3;
              return this.sendTransaction("setRestrictedTransfer", [restricted]);

            case 3:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this);
    }));

    function setRestrictedTransfer(_x28) {
      return _setRestrictedTransfer.apply(this, arguments);
    }

    return setRestrictedTransfer;
  }()
  /**
   * Gets the royalty BPS (basis points) of the contract
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyBps =
  /*#__PURE__*/
  function () {
    var _getRoyaltyBps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19() {
      return runtime_1.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.readOnlyContract.royaltyBps();

            case 2:
              return _context19.abrupt("return", _context19.sent);

            case 3:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    function getRoyaltyBps() {
      return _getRoyaltyBps.apply(this, arguments);
    }

    return getRoyaltyBps;
  }()
  /**
   * Gets the address of the royalty recipient
   *
   * @returns - The royalty BPS
   */
  ;

  _proto.getRoyaltyRecipientAddress =
  /*#__PURE__*/
  function () {
    var _getRoyaltyRecipientAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20() {
      var _metadata$metadata;

      var metadata;
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              _context20.next = 2;
              return this.getMetadata();

            case 2:
              metadata = _context20.sent;

              if (!(((_metadata$metadata = metadata.metadata) == null ? void 0 : _metadata$metadata.fee_recipient) !== undefined)) {
                _context20.next = 5;
                break;
              }

              return _context20.abrupt("return", metadata.metadata.fee_recipient);

            case 5:
              return _context20.abrupt("return", "");

            case 6:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20, this);
    }));

    function getRoyaltyRecipientAddress() {
      return _getRoyaltyRecipientAddress.apply(this, arguments);
    }

    return getRoyaltyRecipientAddress;
  }();

  return PackModule;
}(ModuleWithRoles);
PackModule.moduleType = ModuleType.PACK;
PackModule.roles = [RolesMap.admin, RolesMap.minter, RolesMap.pauser, RolesMap.transfer];

/**
 *
 * Access this module by calling {@link ThirdwebSDK.getSplitsModule}
 * @alpha
 */

var SplitsModule = /*#__PURE__*/function (_Module) {
  _inheritsLoose(SplitsModule, _Module);

  function SplitsModule() {
    return _Module.apply(this, arguments) || this;
  }

  var _proto = SplitsModule.prototype;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return Royalty__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return SplitsModule.moduleType;
  };

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getCurrencyMetadata(this.providerOrSigner, this.address);

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get() {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.getAllRecipients = /*#__PURE__*/function () {
    var _getAllRecipients = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var recipients, index, recipientAddress;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              recipients = [];
              index = BigNumber.from(0); // eslint-disable-next-line no-constant-condition

            case 2:

              _context2.prev = 3;
              _context2.next = 6;
              return this.readOnlyContract.payee(index);

            case 6:
              recipientAddress = _context2.sent;
              _context2.t0 = recipients;
              _context2.next = 10;
              return this.getRecipientSplitPercentage(recipientAddress);

            case 10:
              _context2.t1 = _context2.sent;

              _context2.t0.push.call(_context2.t0, _context2.t1);

              index = index.add(1);
              _context2.next = 22;
              break;

            case 15:
              _context2.prev = 15;
              _context2.t2 = _context2["catch"](3);

              if (!("method" in _context2.t2 && _context2.t2["method"].toLowerCase().includes("payee(uint256)"))) {
                _context2.next = 21;
                break;
              }

              return _context2.abrupt("break", 24);

            case 21:
              throw _context2.t2;

            case 22:
              _context2.next = 2;
              break;

            case 24:
              return _context2.abrupt("return", recipients);

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[3, 15]]);
    }));

    function getAllRecipients() {
      return _getAllRecipients.apply(this, arguments);
    }

    return getAllRecipients;
  }();

  _proto.getRecipientSplitPercentage = /*#__PURE__*/function () {
    var _getRecipientSplitPercentage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(address) {
      var _yield$Promise$all, totalShares, walletsShares;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all([this.readOnlyContract.totalShares(), this.readOnlyContract.shares(address)]);

            case 2:
              _yield$Promise$all = _context3.sent;
              totalShares = _yield$Promise$all[0];
              walletsShares = _yield$Promise$all[1];
              return _context3.abrupt("return", {
                address: address,
                splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5
              });

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getRecipientSplitPercentage(_x) {
      return _getRecipientSplitPercentage.apply(this, arguments);
    }

    return getRecipientSplitPercentage;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(address) {
      var walletBalance, totalReleased, totalReceived;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.readOnlyContract.provider.getBalance(this.address);

            case 2:
              walletBalance = _context4.sent;
              _context4.next = 5;
              return this.readOnlyContract["totalReleased()"]();

            case 5:
              totalReleased = _context4.sent;
              totalReceived = walletBalance.add(totalReleased);
              _context4.t0 = this;
              _context4.t1 = address;
              _context4.t2 = totalReceived;
              _context4.next = 12;
              return this.readOnlyContract["released(address)"](address);

            case 12:
              _context4.t3 = _context4.sent;
              return _context4.abrupt("return", _context4.t0._pendingPayment.call(_context4.t0, _context4.t1, _context4.t2, _context4.t3));

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balanceOf(_x2) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.balanceOfToken = /*#__PURE__*/function () {
    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(walletAddress, tokenAddress) {
      var erc20, walletBalance, totalReleased, totalReceived, value;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);
              _context5.next = 3;
              return erc20.balanceOf(this.address);

            case 3:
              walletBalance = _context5.sent;
              _context5.next = 6;
              return this.readOnlyContract["totalReleased(address)"](tokenAddress);

            case 6:
              totalReleased = _context5.sent;
              totalReceived = walletBalance.add(totalReleased);
              _context5.t0 = this;
              _context5.t1 = walletAddress;
              _context5.t2 = totalReceived;
              _context5.next = 13;
              return this.readOnlyContract["released(address,address)"](tokenAddress, walletAddress);

            case 13:
              _context5.t3 = _context5.sent;
              _context5.next = 16;
              return _context5.t0._pendingPayment.call(_context5.t0, _context5.t1, _context5.t2, _context5.t3);

            case 16:
              value = _context5.sent;
              _context5.next = 19;
              return getCurrencyValue(this.providerOrSigner, tokenAddress, value);

            case 19:
              return _context5.abrupt("return", _context5.sent);

            case 20:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOfToken(_x3, _x4) {
      return _balanceOfToken.apply(this, arguments);
    }

    return balanceOfToken;
  }();

  _proto.withdraw = /*#__PURE__*/function () {
    var _withdraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(address) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.sendTransaction("release(address)", [address]);

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function withdraw(_x5) {
      return _withdraw.apply(this, arguments);
    }

    return withdraw;
  }();

  _proto._pendingPayment = /*#__PURE__*/function () {
    var _pendingPayment2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(address, totalReceived, alreadyReleased) {
      var addressReceived, totalRoyaltyAvailable;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = totalReceived;
              _context7.next = 3;
              return this.readOnlyContract.shares(address);

            case 3:
              _context7.t1 = _context7.sent;
              addressReceived = _context7.t0.mul.call(_context7.t0, _context7.t1);
              _context7.t2 = addressReceived;
              _context7.next = 8;
              return this.readOnlyContract.totalShares();

            case 8:
              _context7.t3 = _context7.sent;
              totalRoyaltyAvailable = _context7.t2.div.call(_context7.t2, _context7.t3);
              return _context7.abrupt("return", totalRoyaltyAvailable.sub(alreadyReleased));

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function _pendingPayment(_x6, _x7, _x8) {
      return _pendingPayment2.apply(this, arguments);
    }

    return _pendingPayment;
  }();

  _proto.withdrawToken = /*#__PURE__*/function () {
    var _withdrawToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(walletAddress, tokenAddress) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.sendTransaction("release(address,address)", [tokenAddress, walletAddress]);

            case 2:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function withdrawToken(_x9, _x10) {
      return _withdrawToken.apply(this, arguments);
    }

    return withdrawToken;
  }();

  _proto.distribute = /*#__PURE__*/function () {
    var _distribute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.sendTransaction("distribute()", []);

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function distribute() {
      return _distribute.apply(this, arguments);
    }

    return distribute;
  }();

  _proto.distributeToken = /*#__PURE__*/function () {
    var _distributeToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(tokenAddress) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.sendTransaction("distribute(address)", [tokenAddress]);

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function distributeToken(_x11) {
      return _distributeToken.apply(this, arguments);
    }

    return distributeToken;
  }();

  return SplitsModule;
}(Module);
SplitsModule.moduleType = ModuleType.SPLITS;

var ClaimConditionType;

(function (ClaimConditionType) {
  ClaimConditionType[ClaimConditionType["StartTime"] = 0] = "StartTime";
  ClaimConditionType[ClaimConditionType["LimitPerWallet"] = 1] = "LimitPerWallet";
  ClaimConditionType[ClaimConditionType["MerkleRoot"] = 2] = "MerkleRoot";
  ClaimConditionType[ClaimConditionType["WaitTimeBetweenClaims"] = 3] = "WaitTimeBetweenClaims";
})(ClaimConditionType || (ClaimConditionType = {}));

var ProposalState;

(function (ProposalState) {
  ProposalState[ProposalState["Pending"] = 0] = "Pending";
  ProposalState[ProposalState["Active"] = 1] = "Active";
  ProposalState[ProposalState["Canceled"] = 2] = "Canceled";
  ProposalState[ProposalState["Defeated"] = 3] = "Defeated";
  ProposalState[ProposalState["Succeeded"] = 4] = "Succeeded";
  ProposalState[ProposalState["Queued"] = 5] = "Queued";
  ProposalState[ProposalState["Expired"] = 6] = "Expired";
  ProposalState[ProposalState["Executed"] = 7] = "Executed";
})(ProposalState || (ProposalState = {}));

var VoteType;

(function (VoteType) {
  VoteType[VoteType["Against"] = 0] = "Against";
  VoteType[VoteType["For"] = 1] = "For";
  VoteType[VoteType["Abstain"] = 2] = "Abstain";
})(VoteType || (VoteType = {}));

/**
 * Access this module by calling {@link ThirdwebSDK.getVoteModule}
 *
 * @alpha
 * @public
 */

var VoteModule = /*#__PURE__*/function (_Module) {
  _inheritsLoose(VoteModule, _Module);

  function VoteModule() {
    return _Module.apply(this, arguments) || this;
  }

  var _proto = VoteModule.prototype;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return VotingGovernor__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getModuleType = function getModuleType() {
    return VoteModule.moduleType;
  };

  _proto.settings = /*#__PURE__*/function () {
    var _settings = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var _yield$Promise$all, votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold, votingTokenMetadata;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Promise.all([this.readOnlyContract.votingDelay(), this.readOnlyContract.votingPeriod(), this.readOnlyContract.token(), this.readOnlyContract.quorumNumerator(), this.readOnlyContract.proposalThreshold()]);

            case 2:
              _yield$Promise$all = _context.sent;
              votingDelay = _yield$Promise$all[0];
              votingPeriod = _yield$Promise$all[1];
              votingTokenAddress = _yield$Promise$all[2];
              votingQuorumFraction = _yield$Promise$all[3];
              proposalTokenThreshold = _yield$Promise$all[4];
              _context.next = 10;
              return getCurrencyMetadata(this.providerOrSigner, votingTokenAddress);

            case 10:
              votingTokenMetadata = _context.sent;
              return _context.abrupt("return", {
                votingDelay: votingDelay.toString(),
                votingPeriod: votingPeriod.toString(),
                votingTokenAddress: votingTokenAddress,
                votingTokenMetadata: votingTokenMetadata,
                votingQuorumFraction: votingQuorumFraction.toString(),
                proposalTokenThreshold: proposalTokenThreshold.toString()
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function settings() {
      return _settings.apply(this, arguments);
    }

    return settings;
  }()
  /**
   * Get a proposal by id.
   *
   * @param proposalId - The proposal id to get.
   * @returns - The proposal.
   */
  ;

  _proto.get =
  /*#__PURE__*/
  function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(proposalId) {
      var all, proposals;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.ensureExists(proposalId);

            case 2:
              _context2.next = 4;
              return this.getAll();

            case 4:
              all = _context2.sent;
              proposals = all.filter(function (p) {
                return p.proposalId.toLowerCase() === proposalId.toLowerCase();
              });

              if (!(proposals.length === 0)) {
                _context2.next = 8;
                break;
              }

              throw new Error("proposal not found");

            case 8:
              return _context2.abrupt("return", proposals[0]);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function get(_x) {
      return _get.apply(this, arguments);
    }

    return get;
  }()
  /**
   * Returns all the proposals in the contract.
   *
   * @returns - All the proposals in the contract.
   */
  ;

  _proto.getAll =
  /*#__PURE__*/
  function () {
    var _getAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var _this = this;

      var proposals, results, states, votes, i, p, s, v, e, j;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.readOnlyContract.queryFilter(this.contract.filters.ProposalCreated());

            case 2:
              proposals = _context3.sent;
              results = [];
              _context3.next = 6;
              return Promise.all(proposals.map(function (p) {
                return _this.readOnlyContract.state(p.args.proposalId);
              }));

            case 6:
              states = _context3.sent;
              _context3.next = 9;
              return Promise.all(proposals.map(function (p) {
                return _this.readOnlyContract.proposalVotes(p.args.proposalId);
              }));

            case 9:
              votes = _context3.sent;

              for (i = 0; i < proposals.length; i++) {
                p = proposals[i].args;
                s = states[i];
                v = [{
                  type: VoteType.Against,
                  label: "Against",
                  count: votes[i].againstVotes
                }, {
                  type: VoteType.For,
                  label: "For",
                  count: votes[i].forVotes
                }, {
                  type: VoteType.Abstain,
                  label: "Abstain",
                  count: votes[i].abstainVotes
                }];
                e = [];

                for (j = 0; j < p.targets.length; j++) {
                  e.push({
                    to: p.targets[j],
                    value: p.values[j] || 0,
                    data: p.calldatas[j]
                  });
                }

                results.push({
                  proposalId: p.proposalId.toString(),
                  proposer: p.proposer,
                  description: p.description,
                  startBlock: p.startBlock,
                  endBlock: p.endBlock,
                  state: s,
                  votes: v,
                  executions: e.map(function (exec) {
                    return {
                      toAddress: exec.to,
                      nativeTokenValue: exec.value,
                      transactionData: exec.data
                    };
                  })
                });
              }

              return _context3.abrupt("return", results);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getAll() {
      return _getAll.apply(this, arguments);
    }

    return getAll;
  }()
  /**
   * Create a new proposal.
   *
   * @param description - The description of the proposal.
   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.
   * @returns - The id of the created proposal.
   */
  ;

  _proto.propose =
  /*#__PURE__*/
  function () {
    var _propose = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(description, executions) {
      var tos, values, datas, receipt, event;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              tos = executions.map(function (p) {
                return p.toAddress;
              });
              values = executions.map(function (p) {
                return p.nativeTokenValue;
              });
              datas = executions.map(function (p) {
                return p.transactionData;
              });
              _context4.next = 5;
              return this.sendTransaction("propose", [tos, values, datas, description]);

            case 5:
              receipt = _context4.sent;
              event = this.parseEventLogs("ProposalCreated", receipt == null ? void 0 : receipt.logs);
              return _context4.abrupt("return", event.proposalId);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function propose(_x2, _x3) {
      return _propose.apply(this, arguments);
    }

    return propose;
  }()
  /**
   * Vote on a proposal.
   *
   * @param proposalId - The proposal to cast a vote on.
   * @param voteType - The position the voter is taking on their vote.
   * @param reason - (optional) The reason for the vote.
   */
  ;

  _proto.vote =
  /*#__PURE__*/
  function () {
    var _vote = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(proposalId, voteType, reason) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (reason === void 0) {
                reason = "";
              }

              _context5.next = 3;
              return this.ensureExists(proposalId);

            case 3:
              _context5.next = 5;
              return this.sendTransaction("castVoteWithReason", [proposalId, voteType, reason]);

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function vote(_x4, _x5, _x6) {
      return _vote.apply(this, arguments);
    }

    return vote;
  }()
  /**
   * Checks if an account has voted on a proposal
   *
   * @param proposalId - The unique identifier of a proposal .
   * @param account - (optional) wallet account address. Defaults to connected signer.
   * @returns - True if the account has already voted on the proposal.
   */
  ;

  _proto.hasVoted =
  /*#__PURE__*/
  function () {
    var _hasVoted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(proposalId, account) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (account) {
                _context6.next = 4;
                break;
              }

              _context6.next = 3;
              return this.getSignerAddress();

            case 3:
              account = _context6.sent;

            case 4:
              return _context6.abrupt("return", this.readOnlyContract.hasVoted(proposalId, account));

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function hasVoted(_x7, _x8) {
      return _hasVoted.apply(this, arguments);
    }

    return hasVoted;
  }()
  /**
   * Once the voting period has ended, call this method to execute the executables in the proposal.
   *
   * @param proposalId - The proposal id to execute.
   */
  ;

  _proto.execute =
  /*#__PURE__*/
  function () {
    var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(proposalId) {
      var proposal, tos, values, datas, descriptionHash;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.ensureExists(proposalId);

            case 2:
              _context7.next = 4;
              return this.get(proposalId);

            case 4:
              proposal = _context7.sent;
              tos = proposal.executions.map(function (p) {
                return p.toAddress;
              });
              values = proposal.executions.map(function (p) {
                return p.nativeTokenValue;
              });
              datas = proposal.executions.map(function (p) {
                return p.transactionData;
              });
              descriptionHash = ethers.utils.id(proposal.description);
              _context7.next = 11;
              return this.sendTransaction("execute", [tos, values, datas, descriptionHash]);

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function execute(_x9) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }()
  /**
   * Check to see if a proposal can be executed.
   *
   * @param proposalId - The proposal ID to check.
   * @returns - True if the proposal can be executed, false otherwise.
   */
  ;

  _proto.canExecute =
  /*#__PURE__*/
  function () {
    var _canExecute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(proposalId) {
      var proposal, tos, values, datas, descriptionHash;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.ensureExists(proposalId);

            case 2:
              _context8.next = 4;
              return this.get(proposalId);

            case 4:
              proposal = _context8.sent;
              tos = proposal.executions.map(function (p) {
                return p.toAddress;
              });
              values = proposal.executions.map(function (p) {
                return p.nativeTokenValue;
              });
              datas = proposal.executions.map(function (p) {
                return p.transactionData;
              });
              descriptionHash = ethers.utils.id(proposal.description);
              _context8.prev = 9;
              _context8.next = 12;
              return this.readOnlyContract.callStatic.execute(tos, values, datas, descriptionHash);

            case 12:
              return _context8.abrupt("return", true);

            case 15:
              _context8.prev = 15;
              _context8.t0 = _context8["catch"](9);
              return _context8.abrupt("return", false);

            case 18:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[9, 15]]);
    }));

    function canExecute(_x10) {
      return _canExecute.apply(this, arguments);
    }

    return canExecute;
  }()
  /**
   * Check the balance of the project wallet in the native token of the chain
   *
   * @returns - The balance of the project in the native token of the chain
   */
  ;

  _proto.balance =
  /*#__PURE__*/
  function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      var balance;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.readOnlyContract.provider.getBalance(this.address);

            case 2:
              balance = _context9.sent;
              return _context9.abrupt("return", {
                name: "",
                symbol: "",
                decimals: 18,
                value: balance.toString(),
                displayValue: ethers.utils.formatUnits(balance, 18)
              });

            case 4:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }()
  /**
   * Check the balance of the project wallet in a particular
   * ERC20 token contract
   *
   * @returns - The balance of the project in the native token of the chain
   */
  ;

  _proto.balanceOfToken =
  /*#__PURE__*/
  function () {
    var _balanceOfToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(tokenAddress) {
      var erc20;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              erc20 = ERC20__factory.connect(tokenAddress, this.readOnlyContract.provider);
              _context10.t0 = getCurrencyValue;
              _context10.t1 = this.providerOrSigner;
              _context10.t2 = tokenAddress;
              _context10.next = 6;
              return erc20.balanceOf(this.address);

            case 6:
              _context10.t3 = _context10.sent;
              _context10.next = 9;
              return (0, _context10.t0)(_context10.t1, _context10.t2, _context10.t3);

            case 9:
              return _context10.abrupt("return", _context10.sent);

            case 10:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function balanceOfToken(_x11) {
      return _balanceOfToken.apply(this, arguments);
    }

    return balanceOfToken;
  }();

  _proto.setModuleMetadata = /*#__PURE__*/function () {
    var _setModuleMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(metadata) {
      var uri;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.sdk.getStorage().uploadMetadata(metadata);

            case 2:
              uri = _context11.sent;
              _context11.next = 5;
              return this.sendTransaction("setContractURI", [uri]);

            case 5:
              return _context11.abrupt("return", _context11.sent);

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function setModuleMetadata(_x12) {
      return _setModuleMetadata.apply(this, arguments);
    }

    return setModuleMetadata;
  }()
  /**
   * Find a proposal by its id.
   *
   * @internal
   * @param proposalId - Proposal to check for
   */
  ;

  _proto.ensureExists =
  /*#__PURE__*/
  function () {
    var _ensureExists = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(proposalId) {
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.readOnlyContract.state(proposalId);

            case 2:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function ensureExists(_x13) {
      return _ensureExists.apply(this, arguments);
    }

    return ensureExists;
  }();

  return VoteModule;
}(Module);
VoteModule.moduleType = ModuleType.VOTE;

if (!globalThis.FormData) {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  globalThis.FormData = /*#__PURE__*/require("form-data");
}

var thirdwebIpfsServerUrl = "https://upload.nftlabs.co";
var pinataIpfsUrl = "https://api.pinata.cloud/pinning/pinFileToIPFS"; // const thirdwebIpfsServerUrl = "http://localhost:3002";

var IpfsStorage = /*#__PURE__*/function () {
  function IpfsStorage(gatewayUrl) {
    this.gatewayUrl = void 0;
    this.gatewayUrl = gatewayUrl.replace(/\/$/, "") + "/";
  }

  var _proto = IpfsStorage.prototype;

  _proto.upload = /*#__PURE__*/function () {
    var _upload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, contractAddress, signerAddress) {
      var headers, formData, res, body;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              headers = {
                "X-App-Name": "CONSOLE-TS-SDK-" + contractAddress,
                "X-Public-Address": signerAddress || ""
              };
              formData = new FormData();
              formData.append("file", data);
              _context.prev = 3;
              _context.next = 6;
              return fetch(thirdwebIpfsServerUrl + "/upload", {
                method: "POST",
                body: formData,
                headers: headers
              });

            case 6:
              res = _context.sent;

              if (!(res.status !== 200)) {
                _context.next = 9;
                break;
              }

              throw new Error("Failed to upload to IPFS [status code = " + res.status + "]");

            case 9:
              _context.next = 11;
              return res.json();

            case 11:
              body = _context.sent;
              return _context.abrupt("return", body.IpfsUri);

            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](3);
              throw new UploadError("Failed to upload to IPFS: " + _context.t0);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 15]]);
    }));

    function upload(_x, _x2, _x3) {
      return _upload.apply(this, arguments);
    }

    return upload;
  }();

  _proto.uploadBatch = /*#__PURE__*/function () {
    var _uploadBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(files, contractAddress, fileStartNumber) {
      var token, metadata, data, res, body;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (fileStartNumber === void 0) {
                fileStartNumber = 0;
              }

              _context2.next = 3;
              return this.getUploadToken(contractAddress || "");

            case 3:
              token = _context2.sent;
              metadata = {
                name: "CONSOLE-TS-SDK-" + contractAddress
              };
              data = new FormData();
              files.forEach(function (file, i) {
                var filepath = "files/" + (fileStartNumber + i);

                if (typeof window === "undefined") {
                  data.append("file", file, {
                    filepath: filepath
                  });
                } else {
                  // browser does blob things, filepath is parsed differently on browser vs node.
                  // pls pinata?
                  data.append("file", new Blob([file]), filepath);
                }
              });
              data.append("pinataMetadata", JSON.stringify(metadata));
              _context2.next = 10;
              return fetch(pinataIpfsUrl, {
                method: "POST",
                headers: {
                  Authorization: "Bearer " + token
                },
                body: data
              });

            case 10:
              res = _context2.sent;
              _context2.next = 13;
              return res.json();

            case 13:
              body = _context2.sent;

              if (res.ok) {
                _context2.next = 16;
                break;
              }

              throw new UploadError("Failed to upload files to IPFS");

            case 16:
              return _context2.abrupt("return", "ipfs://" + body.IpfsHash + "/");

            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function uploadBatch(_x4, _x5, _x6) {
      return _uploadBatch.apply(this, arguments);
    }

    return uploadBatch;
  }();

  _proto.getUploadToken = /*#__PURE__*/function () {
    var _getUploadToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(contractAddress) {
      var headers, res, body;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              headers = {
                "X-App-Name": "CONSOLE-TS-SDK-" + contractAddress
              };
              _context3.next = 3;
              return fetch(thirdwebIpfsServerUrl + "/grant", {
                method: "GET",
                headers: headers
              });

            case 3:
              res = _context3.sent;

              if (res.ok) {
                _context3.next = 6;
                break;
              }

              throw new FetchError("Failed to get upload token");

            case 6:
              _context3.next = 8;
              return res.text();

            case 8:
              body = _context3.sent;
              return _context3.abrupt("return", body);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function getUploadToken(_x7) {
      return _getUploadToken.apply(this, arguments);
    }

    return getUploadToken;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(hash) {
      var uri, result;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              uri = hash;

              if (hash) {
                uri = this.resolveFullUrl(hash);
              }

              _context4.prev = 2;
              _context4.next = 5;
              return fetch(uri);

            case 5:
              result = _context4.sent;

              if (!(result.status !== 200)) {
                _context4.next = 8;
                break;
              }

              throw new Error("Status code (!= 200) =" + result.status);

            case 8:
              _context4.next = 10;
              return result.text();

            case 10:
              return _context4.abrupt("return", _context4.sent);

            case 13:
              _context4.prev = 13;
              _context4.t0 = _context4["catch"](2);
              throw new FetchError("Failed to fetch IPFS file: " + uri, _context4.t0);

            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[2, 13]]);
    }));

    function get(_x8) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.uploadFileHandler = /*#__PURE__*/function () {
    var _uploadFileHandler = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(object) {
      var keys, key, val, shouldUpload;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              keys = Object.keys(object);
              _context5.t0 = runtime_1.keys(keys);

            case 2:
              if ((_context5.t1 = _context5.t0()).done) {
                _context5.next = 18;
                break;
              }

              key = _context5.t1.value;
              val = object[keys[key]];
              shouldUpload = val instanceof File || val instanceof Buffer;

              if (!shouldUpload) {
                _context5.next = 10;
                break;
              }

              _context5.next = 9;
              return this.upload(object[keys[key]]);

            case 9:
              object[keys[key]] = _context5.sent;

            case 10:
              if (!(shouldUpload && typeof object[keys[key]] !== "string")) {
                _context5.next = 12;
                break;
              }

              throw new Error("Upload to IPFS failed");

            case 12:
              if (!(typeof val === "object")) {
                _context5.next = 16;
                break;
              }

              _context5.next = 15;
              return this.uploadFileHandler(object[keys[key]]);

            case 15:
              object[keys[key]] = _context5.sent;

            case 16:
              _context5.next = 2;
              break;

            case 18:
              return _context5.abrupt("return", object);

            case 19:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function uploadFileHandler(_x9) {
      return _uploadFileHandler.apply(this, arguments);
    }

    return uploadFileHandler;
  }();

  _proto.uploadMetadata = /*#__PURE__*/function () {
    var _uploadMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(metadata, contractAddress, signerAddress) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(typeof metadata === "string")) {
                _context6.next = 2;
                break;
              }

              return _context6.abrupt("return", metadata);

            case 2:
              _context6.next = 4;
              return this.uploadFileHandler(metadata);

            case 4:
              metadata = _context6.sent;
              _context6.next = 7;
              return this.upload(JSON.stringify(metadata), contractAddress, signerAddress);

            case 7:
              return _context6.abrupt("return", _context6.sent);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function uploadMetadata(_x10, _x11, _x12) {
      return _uploadMetadata.apply(this, arguments);
    }

    return uploadMetadata;
  }()
  /**
   * @internal
   */
  ;

  _proto.uploadMetadataBatch =
  /*#__PURE__*/
  function () {
    var _uploadMetadataBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(metadatas, contractAddress, startFileNumber) {
      var _this = this;

      var finalMetadata;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return Promise.all(metadatas.map(function (m) {
                if (typeof m === "string") {
                  return m;
                } else {
                  return _this.uploadFileHandler(m);
                }
              }));

            case 2:
              finalMetadata = _context7.sent;
              _context7.next = 5;
              return this.uploadBatch(finalMetadata.map(function (m) {
                return JSON.stringify(m);
              }), contractAddress, startFileNumber);

            case 5:
              return _context7.abrupt("return", _context7.sent);

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function uploadMetadataBatch(_x13, _x14, _x15) {
      return _uploadMetadataBatch.apply(this, arguments);
    }

    return uploadMetadataBatch;
  }()
  /**
   * Resolves the full url for a file using the configured gateway
   *
   * @param ipfsHash - the ipfs:// uri
   * @returns - The fully formed IPFS url with the gateway url
   * @internal
   */
  ;

  _proto.resolveFullUrl = function resolveFullUrl(ipfsHash) {
    return ipfsHash && ipfsHash.toLowerCase().includes("ipfs://") ? ipfsHash.replace("ipfs://", this.gatewayUrl) : ipfsHash;
  };

  return IpfsStorage;
}();

/**
 * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.
 * @internal
 */

var RegistryModule = /*#__PURE__*/function (_Module) {
  _inheritsLoose(RegistryModule, _Module);

  function RegistryModule() {
    return _Module.apply(this, arguments) || this;
  }

  var _proto = RegistryModule.prototype;

  /**
   * @internal
   */
  _proto.connectContract = function connectContract() {
    return Registry__factory.connect(this.address, this.providerOrSigner);
  }
  /**
   * @internal
   */
  ;

  _proto.getProtocolContracts =
  /*#__PURE__*/
  function () {
    var _getProtocolContracts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var _this = this;

      var deployer, maxVersion, versions, addresses, metadatas;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getSignerAddress();

            case 2:
              deployer = _context.sent;
              _context.next = 5;
              return this.readOnlyContract.getProtocolControlCount(deployer);

            case 5:
              maxVersion = _context.sent;
              versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();
              _context.next = 9;
              return Promise.all(versions.map(function (v) {
                return _this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString());
              }));

            case 9:
              addresses = _context.sent;
              _context.next = 12;
              return Promise.all(addresses.map(function (address) {
                return getContractMetadata(_this.providerOrSigner, address, _this.ipfsGatewayUrl)["catch"](function () {
                  return undefined;
                });
              }));

            case 12:
              metadatas = _context.sent;
              return _context.abrupt("return", versions.map(function (v, i) {
                return {
                  address: addresses[i],
                  version: v,
                  metadata: metadatas[i]
                };
              }));

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getProtocolContracts() {
      return _getProtocolContracts.apply(this, arguments);
    }

    return getProtocolContracts;
  }();

  return RegistryModule;
}(Module);

/**
 * The entrypoint to the SDK.
 * @public
 */

var ThirdwebSDK = /*#__PURE__*/function () {
  function ThirdwebSDK(providerOrNetwork, opts) {
    this.options = void 0;
    this.defaultOptions = {
      ipfsGatewayUrl: "https://cloudflare-ipfs.com/ipfs/",
      registryContractAddress: "",
      maxGasPriceInGwei: 100,
      gasSpeed: "fastest",
      transactionRelayerUrl: "",
      transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),
      transactionRelayerForwarderAddress: FORWARDER_ADDRESS,
      readOnlyRpcUrl: ""
    };
    this.modules = new Map();
    this.providerOrSigner = void 0;
    this._signer = null;
    this._jsonConvert = new JsonConvert();
    this.storage = void 0;
    this._registry = null;
    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);
    this.options = _extends({}, this.defaultOptions, opts);
    this.storage = new IpfsStorage(this.options.ipfsGatewayUrl);
  }

  var _proto = ThirdwebSDK.prototype;

  _proto.updateModuleSigners = function updateModuleSigners() {
    for (var _iterator = _createForOfIteratorHelperLoose(this.modules), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          _module = _step$value[1];

      if (this.isReadOnly()) {
        _module.clearSigner();
      }

      _module.setProviderOrSigner(this.providerOrSigner);
    }
  };

  _proto.getChainID = /*#__PURE__*/function () {
    var _getChainID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var provider, _yield$provider$getNe, chainId;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              provider = Provider.isProvider(this.providerOrSigner) ? this.providerOrSigner : this.providerOrSigner.provider;
              !provider ? process.env.NODE_ENV !== "production" ? invariant(false, "getRegistryAddress() -- No Provider") : invariant(false) : void 0;
              _context.next = 4;
              return provider.getNetwork();

            case 4:
              _yield$provider$getNe = _context.sent;
              chainId = _yield$provider$getNe.chainId;
              return _context.abrupt("return", chainId);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getChainID() {
      return _getChainID.apply(this, arguments);
    }

    return getChainID;
  }();

  _proto.getRegistryAddress = /*#__PURE__*/function () {
    var _getRegistryAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.options.registryContractAddress) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", this.options.registryContractAddress);

            case 2:
              _context2.t0 = getContractAddressByChainId;
              _context2.next = 5;
              return this.getChainID();

            case 5:
              _context2.t1 = _context2.sent;
              return _context2.abrupt("return", (0, _context2.t0)(_context2.t1));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getRegistryAddress() {
      return _getRegistryAddress.apply(this, arguments);
    }

    return getRegistryAddress;
  }()
  /**
   *
   * @param address - The contract address of the given Registry module.
   * @returns The Registry Module.
   * @internal
   */
  ;

  _proto.getRegistryModule =
  /*#__PURE__*/
  function () {
    var _getRegistryModule = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var address;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.getRegistryAddress();

            case 2:
              address = _context3.sent;
              !address ? process.env.NODE_ENV !== "production" ? invariant(false, "getRegistryModule() -- No Address") : invariant(false) : void 0;
              return _context3.abrupt("return", this.registry = this.getOrCreateModule(address, RegistryModule));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getRegistryModule() {
      return _getRegistryModule.apply(this, arguments);
    }

    return getRegistryModule;
  }();

  _proto.getOrCreateModule = function getOrCreateModule(address, _Module) {
    if (this.modules.has(address)) {
      return this.modules.get(address);
    }

    var _newModule = new _Module(this.providerOrSigner, address, this.options, this);

    this.modules.set(address, _newModule);
    return _newModule;
  }
  /**
   * you should not need this unless you are creating new modules
   * @returns the active registry module forwarder address
   * @internal
   */
  ;

  _proto.getForwarderAddress =
  /*#__PURE__*/
  function () {
    var _getForwarderAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.t0 = this.registry;

              if (_context4.t0) {
                _context4.next = 5;
                break;
              }

              _context4.next = 4;
              return this.getRegistryModule();

            case 4:
              _context4.t0 = _context4.sent;

            case 5:
              _context4.next = 7;
              return _context4.t0.readOnlyContract.forwarder();

            case 7:
              return _context4.abrupt("return", _context4.sent);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getForwarderAddress() {
      return _getForwarderAddress.apply(this, arguments);
    }

    return getForwarderAddress;
  }()
  /**
   * Call this to get the current apps.
   * @returns All currently registered apps for the connected wallet
   */
  ;

  _proto.getApps =
  /*#__PURE__*/
  function () {
    var _getApps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = this.registry;

              if (_context5.t0) {
                _context5.next = 5;
                break;
              }

              _context5.next = 4;
              return this.getRegistryModule();

            case 4:
              _context5.t0 = _context5.sent;

            case 5:
              return _context5.abrupt("return", _context5.t0.getProtocolContracts());

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getApps() {
      return _getApps.apply(this, arguments);
    }

    return getApps;
  }()
  /**
   * Call this to create a new app
   * @param metadata - metadata URI or a JSON object
   * @returns The transaction receipt
   */
  ;

  _proto.createApp =
  /*#__PURE__*/
  function () {
    var _createApp = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(metadata) {
      var _this$signer;

      var registryContract, gasPrice, txOpts, uri, txn;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = this.registry;

              if (_context6.t0) {
                _context6.next = 5;
                break;
              }

              _context6.next = 4;
              return this.getRegistryModule();

            case 4:
              _context6.t0 = _context6.sent;

            case 5:
              registryContract = _context6.t0.contract;
              _context6.next = 8;
              return this.getGasPrice();

            case 8:
              gasPrice = _context6.sent;
              txOpts = {}; // could technically be `0` so simple falsy check does not suffice

              if (typeof gasPrice === "number") {
                txOpts.gasPrice = parseUnits(gasPrice.toString(), "gwei");
              }

              _context6.t1 = uploadMetadata;
              _context6.t2 = metadata;
              _context6.t3 = registryContract.address;
              _context6.next = 16;
              return (_this$signer = this.signer) == null ? void 0 : _this$signer.getAddress();

            case 16:
              _context6.t4 = _context6.sent;

              if (_context6.t4) {
                _context6.next = 19;
                break;
              }

              _context6.t4 = undefined;

            case 19:
              _context6.t5 = _context6.t4;
              _context6.next = 22;
              return (0, _context6.t1)(_context6.t2, _context6.t3, _context6.t5);

            case 22:
              uri = _context6.sent;
              _context6.next = 25;
              return registryContract.deployProtocol(uri, txOpts);

            case 25:
              txn = _context6.sent;
              _context6.next = 28;
              return txn.wait();

            case 28:
              return _context6.abrupt("return", _context6.sent);

            case 29:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function createApp(_x) {
      return _createApp.apply(this, arguments);
    }

    return createApp;
  }()
  /**
   *
   * @param speed - what speed to prefer, default: "fastest"
   * @param maxGas - how much gas to use at most, default: 100
   * @returns the optiomal gas price
   */
  ;

  _proto.getGasPrice =
  /*#__PURE__*/
  function () {
    var _getGasPrice = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(speed, maxGasGwei) {
      var _speed, _maxGas;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _speed = speed ? speed : this.options.gasSpeed;
              _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;
              _context7.t0 = getGasPriceForChain;
              _context7.next = 5;
              return this.getChainID();

            case 5:
              _context7.t1 = _context7.sent;
              _context7.t2 = _speed;
              _context7.t3 = _maxGas;
              _context7.next = 10;
              return (0, _context7.t0)(_context7.t1, _context7.t2, _context7.t3);

            case 10:
              return _context7.abrupt("return", _context7.sent);

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getGasPrice(_x2, _x3) {
      return _getGasPrice.apply(this, arguments);
    }

    return getGasPrice;
  }()
  /**
   *
   * @param providerOrSignerOrNetwork - A valid "ethers" Provider, Signer or a Network address to create a Provider with.
   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.
   */
  ;

  _proto.setProviderOrSigner = function setProviderOrSigner(providerOrSignerOrNetwork) {
    if (Provider.isProvider(providerOrSignerOrNetwork) || Signer.isSigner(providerOrSignerOrNetwork)) {
      // sdk instantiated with a provider / signer
      this.providerOrSigner = providerOrSignerOrNetwork;
    } else {
      // sdk instantiated with a network name / network url
      this.providerOrSigner = ethers.getDefaultProvider(providerOrSignerOrNetwork);
    } // if we're setting a signer then also update that


    if (Signer.isSigner(providerOrSignerOrNetwork)) {
      this.signer = providerOrSignerOrNetwork;
    } else {
      this.signer = null;
    }

    this.updateModuleSigners();
    return this.providerOrSigner;
  }
  /**
   *
   * @public
   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid "Signer.")
   */
  ;

  _proto.isReadOnly = function isReadOnly() {
    return !Signer.isSigner(this.signer);
  }
  /**
   * @public
   * @returns The contract metadata for the given contract address.
   */
  ;

  _proto.getContractMetadata =
  /*#__PURE__*/
  function () {
    var _getContractMetadata2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(address) {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.t0 = _extends;
              _context8.t1 = {};
              _context8.next = 4;
              return getContractMetadata(this.providerOrSigner, address, this.options.ipfsGatewayUrl);

            case 4:
              _context8.t2 = _context8.sent;
              _context8.t3 = {
                address: address
              };
              return _context8.abrupt("return", (0, _context8.t0)(_context8.t1, _context8.t2, _context8.t3));

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getContractMetadata$1(_x4) {
      return _getContractMetadata2.apply(this, arguments);
    }

    return getContractMetadata$1;
  }()
  /**
   *
   * @param address - The contract address of the given App module.
   * @returns The App Module.
   */
  ;

  _proto.getAppModule = function getAppModule(address) {
    return this.getOrCreateModule(address, AppModule);
  }
  /**
   *
   * @param address - The contract address of the given NFT module.
   * @returns The NFT Module.
   */
  ;

  _proto.getNFTModule = function getNFTModule(address) {
    return this.getOrCreateModule(address, NFTModule);
  }
  /**
   *
   * @param address - The contract address of the given Collection module.
   * @returns The Bundle Module.
   * @deprecated Use the new {@link ThirdwebSDK.getBundleModule} function instead.
   */
  ;

  _proto.getCollectionModule = function getCollectionModule(address) {
    return this.getBundleModule(address);
  }
  /**
   *
   * @param address - The contract address of the given Bundle module.
   * @returns The Bundle Module.
   */
  ;

  _proto.getBundleModule = function getBundleModule(address) {
    return this.getOrCreateModule(address, BundleModule);
  }
  /**
   *
   * @param address - The contract address of the given Pack module.
   * @returns The Pack Module.
   */
  ;

  _proto.getPackModule = function getPackModule(address) {
    return this.getOrCreateModule(address, PackModule);
  }
  /**
   *
   * @param address - The contract address of the given Currency module.
   * @returns The Currency Module.
   *
   * @deprecated - see {@link TokenModule}
   */
  ;

  _proto.getCurrencyModule = function getCurrencyModule(address) {
    return this.getOrCreateModule(address, CurrencyModule);
  }
  /**
   *
   * @param address - The contract address of the given Token module.
   * @returns The Token Module.
   */
  ;

  _proto.getTokenModule = function getTokenModule(address) {
    return this.getOrCreateModule(address, TokenModule);
  }
  /**
   * @alpha
   *
   * @param address - The contract address of the given Datastore module.
   * @returns The Datastore Module.
   */
  ;

  _proto.getDatastoreModule = function getDatastoreModule(address) {
    return this.getOrCreateModule(address, DatastoreModule);
  }
  /**
   *
   * @param address - The contract address of the given Market module.
   * @returns The Market Module.
   */
  ;

  _proto.getMarketModule = function getMarketModule(address) {
    return this.getOrCreateModule(address, MarketModule);
  }
  /**
   *
   * @param address - The contract address of the given Drop module.
   * @returns The Drop Module.
   */
  ;

  _proto.getDropModule = function getDropModule(address) {
    return this.getOrCreateModule(address, DropModule);
  }
  /**
   * @beta
   *
   * @param address - The contract address of the given BundleDrop module.
   * @returns The Drop Module.
   */
  ;

  _proto.getBundleDropModule = function getBundleDropModule(address) {
    return this.getOrCreateModule(address, BundleDropModule);
  }
  /**
   * @alpha
   *
   * @param address - The contract address of the given Royalty module.
   * @returns The Splits Module.
   */
  ;

  _proto.getSplitsModule = function getSplitsModule(address) {
    return this.getOrCreateModule(address, SplitsModule);
  }
  /**
   * @alpha
   *
   * @param address - The contract address of the given Vote module.
   * @returns The Vote Module.
   */
  ;

  _proto.getVoteModule = function getVoteModule(address) {
    return this.getOrCreateModule(address, VoteModule);
  }
  /**
   * Used for SDK that requires js bridging like Unity SDK.
   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.
   *
   * @internal
   * @param route - sdk execution route
   * @param payload - request arguments for the function
   * @returns
   */
  ;

  _proto.invokeRoute = function invokeRoute(route, payload) {
    var parts = route.split(".");

    if (parts.length > 0 && parts[0] === "thirdweb") {
      if (parts.length === 4) {
        var _this$getModuleByName;

        // thirdweb.module_name.address.function_name
        var moduleName = parts[1];
        var moduleAddress = parts[2];
        var funcName = parts[3];
        return (_this$getModuleByName = this.getModuleByName(moduleName, moduleAddress))[funcName].apply(_this$getModuleByName, payload.arguments || []);
      } else if (parts.length === 3) {
        // reserved for: thirdweb.bridge.function_name
        throw new Error("reserved for thirdweb.bridge.function_name");
      } else if (parts.length === 2) {
        // main sdk functions: thirdweb.function_name
        var _funcName = parts[1];
        return this[_funcName].apply(this, payload.arguments || []);
      }
    }

    throw new Error("uknown route");
  } // used for invoke route for unity sdk.
  ;

  _proto.getModuleByName = function getModuleByName(name, address) {
    if (name === "currency") {
      return this.getCurrencyModule(address);
    } else if (name === "nft") {
      return this.getNFTModule(address);
    } else if (name === "market") {
      return this.getMarketModule(address);
    } else if (name === "bundle" || name === "collection") {
      return this.getCollectionModule(address);
    } else if (name === "drop") {
      return this.getDropModule(address);
    } else if (name === "splits") {
      return this.getSplitsModule(address);
    } else if (name === "pack") {
      return this.getPackModule(address);
    } else if (name === "datastore") {
      return this.getDatastoreModule(address);
    } else if (name === "app" || name === "project") {
      return this.getAppModule(address);
    }

    throw new Error("unsupported module");
  };

  _proto.defaultRelayerSendFunction = /*#__PURE__*/function () {
    var _defaultRelayerSendFunction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(message, signature) {
      var messageType, body, response, resp, result;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              messageType = "forward"; // if has owner property then it's permit :)

              if (message != null && message.owner) {
                messageType = "permit";
              }

              body = JSON.stringify({
                request: message,
                signature: signature,
                type: messageType
              }); // console.log("POST", this.options.transactionRelayerUrl, body);

              _context9.next = 5;
              return fetch(this.options.transactionRelayerUrl, {
                method: "POST",
                body: body
              });

            case 5:
              response = _context9.sent;

              if (!response.ok) {
                _context9.next = 12;
                break;
              }

              _context9.next = 9;
              return response.json();

            case 9:
              resp = _context9.sent;
              result = JSON.parse(resp.result);
              return _context9.abrupt("return", result.txHash);

            case 12:
              throw new Error("relay transaction failed");

            case 13:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function defaultRelayerSendFunction(_x5, _x6) {
      return _defaultRelayerSendFunction.apply(this, arguments);
    }

    return defaultRelayerSendFunction;
  }();

  _proto.createSnapshot = /*#__PURE__*/function () {
    var _createSnapshot = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(leafs) {
      var hasDuplicates, _yield$import, keccak256, hashedLeafs, tree, snapshot, serializedSnapshot, uri;

      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              hasDuplicates = new Set(leafs).size < leafs.length;

              if (!hasDuplicates) {
                _context10.next = 3;
                break;
              }

              throw new DuplicateLeafsError();

            case 3:
              _context10.next = 5;
              return import('keccak256');

            case 5:
              _yield$import = _context10.sent;
              keccak256 = _yield$import["default"];
              hashedLeafs = leafs.map(function (l) {
                return keccak256(l);
              });
              tree = new MerkleTree(hashedLeafs, keccak256, {
                sort: true
              });
              snapshot = {
                merkleRoot: tree.getHexRoot(),
                claims: leafs.map(function (l) {
                  var proof = tree.getHexProof(keccak256(l));
                  return {
                    address: l,
                    proof: proof
                  };
                })
              };
              serializedSnapshot = JSON.stringify(this._jsonConvert.serializeObject(snapshot, Snapshot));
              _context10.next = 13;
              return this.storage.upload(serializedSnapshot);

            case 13:
              uri = _context10.sent;
              return _context10.abrupt("return", {
                merkleRoot: tree.getHexRoot(),
                snapshotUri: uri,
                snapshot: snapshot
              });

            case 15:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function createSnapshot(_x7) {
      return _createSnapshot.apply(this, arguments);
    }

    return createSnapshot;
  }()
  /**
   * Accessor for the storage instance used by the SDK
   *
   * @returns - The Storage instance.
   */
  ;

  _proto.getStorage = function getStorage() {
    return this.storage;
  }
  /**
   * Allows you to override the storage used across the SDK.
   *
   * @param storage - The Storage instance to use.
   */
  ;

  _proto.overrideStorage = function overrideStorage(storage) {
    this.storage = storage;
  };

  _createClass(ThirdwebSDK, [{
    key: "signer",
    get: // default options

    /**
     * The active Signer, you should not need to access this unless you are deploying new modules.
     * @internal
     */
    function get() {
      return this._signer;
    },
    set: function set(value) {
      this._signer = value;
    }
  }, {
    key: "registry",
    get: function get() {
      return this._registry;
    },
    set: function set(value) {
      this._registry = value;
    }
  }]);

  return ThirdwebSDK;
}();
/**
 * Deprecated, please use ThirdwebSDK instead.
 * @public
 * @deprecated use ThirdwebSDK instead
 */

var NFTLabsSDK = ThirdwebSDK;

/**
 * Convenience function to generate a merkle root from a list of strings.
 *
 * @param items - Any list of strings that will be hashed and added to the tree.
 * @returns - A merkle root (in hexadecimal).
 */

function generateRoot(items) {
  var tree = new MerkleTree$1(items, SHA256, {
    hashLeaves: true,
    sortLeaves: true
  });
  return tree.getRoot().toString("hex");
}

/**
 * The {@link https://thirdweb.com | thirdweb} typescript sdk.
 *
 * @remarks
 * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.
 *
 * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )
 *
 *
 * @example
 * To get you started here's how you would instantiate the SDK and fetch some NFTs
 *
 * 1. Install the sdk
 * ```shell
 * npm install @3rdweb/sdk
 * ```
 *
 * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.
 *
 * 3. Write the tiniest amount of code!
 * ```typescript
 *  1 | import { ThirdwebSDK } from "@3rdweb/sdk";
 *  2 | import type { NFTModule, NFTMetadataOwner } from "@3rdweb/sdk";
 *  3 |
 *  5 | const contractAddress = "0x..."; // your contract address from step 2
 *  6 |
 *  7 | const sdk = new ThirdwebSDK();
 *  8 |
 *  9 | const nftModule: NFTModule = sdk.getNftModule(contractAddress);
 * 10 |
 * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();
 * 12 |
 * 13 | console.log(nftListWithOwnerAddress);
 * ```
 * ```
 * Output
 * => [
 *       {
 *          owner: "0x...",
 *          metadata: {
 *            name: "...",
 *            description: "...",
 *            image: "..."
 *          },
 *       },
 *       {
 *          owner: "0x...",
 *          metadata: {
 *            name: "...",
 *            description: "...",
 *            image: "..."
 *          },
 *       },
 *       ...
 *    ]
 * ```
 *
 * @packageDocumentation
 */

if (!globalThis.fetch) {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  globalThis.fetch = fetch$1;
}

export { AppModule, BundleDropModule, BundleModule, ChainlinkVrf, ClaimConditionFactory, ClaimConditionPhase, ClaimProof, CurrencyModule, DEFAULT_BLOCK_TIMES_FALLBACK, DatastoreModule, DropModule, DuplicateLeafsError, FetchError, InterfaceId_IERC1155, InterfaceId_IERC721, InvalidAddressError, MarketModule, ModuleType, NATIVE_TOKEN_ADDRESS, NFTLabsSDK, NFTModule, NotFoundError, PackModule, ProposalState, RolesMap, Snapshot, ThirdwebSDK, TokenModule, UploadError, VoteModule, VoteType, convertModuleTypeToName, convertNameToModuleType, estimateBlockAtTime, generateRoot, getContractMetadata, getCurrencyMetadata, getCurrencyValue, getGasPriceForChain, getMetadataWithoutContract, getRoleHash, getTokenMetadata, getTokenUri, isContract, replaceIpfsWithGateway, uploadMetadata, uploadToIPFS };
//# sourceMappingURL=sdk.esm.js.map
