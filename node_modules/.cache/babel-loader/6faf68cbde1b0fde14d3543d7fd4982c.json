{"ast":null,"code":"import { MappingOptions, Settings } from \"./json-convert-options\";\nimport { Any } from \"./any\";\nimport { PropertyConvertingMode } from \"./json-convert-enums\";\n/**\n * Decorator of a class that is a custom converter.\n *\n * @param target the class\n */\n\nexport function JsonConverter(target) {\n  target[Settings.MAPPER_PROPERTY] = \"\";\n}\n/**\n * Decorator of a class that comes from a JSON object.\n *\n * @param target the class identifier or the class\n *\n * @returns\n *\n * @throws Error\n */\n\nexport function JsonObject(target) {\n  // target is the constructor or the custom class name\n  var classIdentifier = \"\";\n\n  var decorator = function (target) {\n    target.prototype[Settings.CLASS_IDENTIFIER] = classIdentifier.length > 0 ? classIdentifier : target.name;\n    var mapping = target.prototype[Settings.MAPPING_PROPERTY]; // Make sure we replace the mapping names of all properties of this class\n\n    if (!mapping) return;\n    var unmappedKeys = Object.keys(mapping).filter(function (val) {\n      return val.indexOf(Settings.CLASS_IDENTIFIER + \".\") === 0;\n    });\n\n    for (var _i = 0, unmappedKeys_1 = unmappedKeys; _i < unmappedKeys_1.length; _i++) {\n      var key = unmappedKeys_1[_i];\n      mapping[key.replace(Settings.CLASS_IDENTIFIER, target.prototype[Settings.CLASS_IDENTIFIER])] = mapping[key]; // We must delete the mapping without associated class since it will\n      // cause issues with inheritance of mappings and overrides.\n\n      delete mapping[key];\n    }\n  };\n\n  var type = typeof target;\n\n  switch (type) {\n    // Decorator was @JsonObject(classId)\n    case \"string\":\n      classIdentifier = target;\n      return decorator;\n    // Decorator was @JsonObject\n    // Decorator was @JsonObject()\n    // Decorator was @JsonObject(123)\n\n    case \"function\":\n    case \"undefined\":\n    default:\n      throw new Error(\"Fatal error in JsonConvert. \" + \"It is mandatory to pass a string as parameter in the @JsonObject decorator.\\n\\n\" + \"Use @JsonObject(classId) where classId is a string.\\n\\n\");\n  }\n}\n/**\n * Decorator of a class property that comes from a JSON object.\n *\n * The second param can be either a type or a class of a custom converter.\n *\n * Use the following notation for the type:\n * - Primitive type: String|Number|Boolean\n * - Custom type: YourClassName\n * - Array type: [String|Number|Boolean|YourClassName]\n *\n * If you decide to use a custom converter, make sure this class implements the interface JsonCustomConvert from this package.\n *\n * @param jsonPropertyName optional param (default: classPropertyName) the property name in the expected JSON object\n * @param conversionOption optional param (default: Any), should be either the expected type (String|Boolean|Number|etc) or a custom converter class implementing JsonCustomConvert\n * @param convertingMode optional param (default: PropertyConvertingMode.MAP_NULLABLE), determines how nullable\n * property types should be serialized and deserialized\n *\n * @returns\n *\n * @throws Error\n */\n\nexport function JsonProperty() {\n  var params = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    params[_i] = arguments[_i];\n  }\n\n  return function (target, classPropertyName) {\n    // target is the class\n    var jsonPropertyName = classPropertyName;\n    var conversionOption = Any;\n    var convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n\n    switch (params.length) {\n      case 1:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        jsonPropertyName = params[0];\n        break;\n\n      case 2:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        if (params[1] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n        jsonPropertyName = params[0];\n        conversionOption = params[1];\n        break;\n\n      case 3:\n        if (params[0] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n        if (params[1] === undefined) throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\" + \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n        jsonPropertyName = params[0];\n        conversionOption = params[1];\n\n        if (params[2] === true) {\n          convertingMode = PropertyConvertingMode.IGNORE_NULLABLE;\n        } else if (params[2] === PropertyConvertingMode.IGNORE_NULLABLE || params[2] === PropertyConvertingMode.PASS_NULLABLE || params[2] === PropertyConvertingMode.MAP_NULLABLE) {\n          convertingMode = params[2];\n        } else {\n          convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    if (typeof target[Settings.MAPPING_PROPERTY] === \"undefined\") {\n      target[Settings.MAPPING_PROPERTY] = [];\n    }\n\n    var jsonPropertyMappingOptions = new MappingOptions();\n    jsonPropertyMappingOptions.classPropertyName = classPropertyName;\n    jsonPropertyMappingOptions.jsonPropertyName = jsonPropertyName;\n    jsonPropertyMappingOptions.convertingMode = convertingMode; // Check if conversionOption is a type or a custom converter.\n\n    if (typeof conversionOption !== \"undefined\" && conversionOption !== null && typeof conversionOption[Settings.MAPPER_PROPERTY] !== \"undefined\") {\n      jsonPropertyMappingOptions.customConverter = new conversionOption();\n    } else {\n      jsonPropertyMappingOptions.expectedJsonType = conversionOption;\n    } // Save the mapping info\n\n\n    if (typeof target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] === \"undefined\") {\n      target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] = jsonPropertyMappingOptions;\n    } else {\n      throw new Error(\"Fatal error in JsonConvert. \" + \"It is not allowed to add multiple decorators for the same property.\\n\\n\" + \"\\tClass property: \\n\" + \"\\t\\t\" + classPropertyName + \"\\n\\n\");\n    }\n  };\n}","map":{"version":3,"sources":["../../../../src/json2typescript/json-convert-decorators.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MappingOptions, Settings } from \"./json-convert-options\";\nimport { Any } from \"./any\";\nimport { PropertyConvertingMode } from \"./json-convert-enums\";\n/**\n * Decorator of a class that is a custom converter.\n *\n * @param target the class\n */\nexport function JsonConverter(target) {\n    target[Settings.MAPPER_PROPERTY] = \"\";\n}\n/**\n * Decorator of a class that comes from a JSON object.\n *\n * @param target the class identifier or the class\n *\n * @returns\n *\n * @throws Error\n */\nexport function JsonObject(target) {\n    // target is the constructor or the custom class name\n    var classIdentifier = \"\";\n    var decorator = function (target) {\n        target.prototype[Settings.CLASS_IDENTIFIER] = classIdentifier.length > 0 ? classIdentifier : target.name;\n        var mapping = target.prototype[Settings.MAPPING_PROPERTY];\n        // Make sure we replace the mapping names of all properties of this class\n        if (!mapping)\n            return;\n        var unmappedKeys = Object.keys(mapping)\n            .filter(function (val) { return val.indexOf(Settings.CLASS_IDENTIFIER + \".\") === 0; });\n        for (var _i = 0, unmappedKeys_1 = unmappedKeys; _i < unmappedKeys_1.length; _i++) {\n            var key = unmappedKeys_1[_i];\n            mapping[key.replace(Settings.CLASS_IDENTIFIER, target.prototype[Settings.CLASS_IDENTIFIER])] =\n                mapping[key];\n            // We must delete the mapping without associated class since it will\n            // cause issues with inheritance of mappings and overrides.\n            delete mapping[key];\n        }\n    };\n    var type = typeof target;\n    switch (type) {\n        // Decorator was @JsonObject(classId)\n        case \"string\":\n            classIdentifier = target;\n            return decorator;\n        // Decorator was @JsonObject\n        // Decorator was @JsonObject()\n        // Decorator was @JsonObject(123)\n        case \"function\":\n        case \"undefined\":\n        default:\n            throw new Error(\"Fatal error in JsonConvert. \" +\n                \"It is mandatory to pass a string as parameter in the @JsonObject decorator.\\n\\n\" +\n                \"Use @JsonObject(classId) where classId is a string.\\n\\n\");\n    }\n}\n/**\n * Decorator of a class property that comes from a JSON object.\n *\n * The second param can be either a type or a class of a custom converter.\n *\n * Use the following notation for the type:\n * - Primitive type: String|Number|Boolean\n * - Custom type: YourClassName\n * - Array type: [String|Number|Boolean|YourClassName]\n *\n * If you decide to use a custom converter, make sure this class implements the interface JsonCustomConvert from this package.\n *\n * @param jsonPropertyName optional param (default: classPropertyName) the property name in the expected JSON object\n * @param conversionOption optional param (default: Any), should be either the expected type (String|Boolean|Number|etc) or a custom converter class implementing JsonCustomConvert\n * @param convertingMode optional param (default: PropertyConvertingMode.MAP_NULLABLE), determines how nullable\n * property types should be serialized and deserialized\n *\n * @returns\n *\n * @throws Error\n */\nexport function JsonProperty() {\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n    }\n    return function (target, classPropertyName) {\n        // target is the class\n        var jsonPropertyName = classPropertyName;\n        var conversionOption = Any;\n        var convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n        switch (params.length) {\n            case 1:\n                if (params[0] === undefined)\n                    throw new Error(\"Fatal error in JsonConvert. \" +\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" +\n                        \"\\tClass property: \\n\" +\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\n                        \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n                jsonPropertyName = params[0];\n                break;\n            case 2:\n                if (params[0] === undefined)\n                    throw new Error(\"Fatal error in JsonConvert. \" +\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" +\n                        \"\\tClass property: \\n\" +\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\n                        \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n                if (params[1] === undefined)\n                    throw new Error(\"Fatal error in JsonConvert. \" +\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" +\n                        \"\\tClass property: \\n\" +\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\n                        \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n                jsonPropertyName = params[0];\n                conversionOption = params[1];\n                break;\n            case 3:\n                if (params[0] === undefined)\n                    throw new Error(\"Fatal error in JsonConvert. \" +\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as first parameter in the @JsonProperty decorator.\\n\\n\" +\n                        \"\\tClass property: \\n\" +\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\n                        \"Leave the decorator parameters empty if you do not wish to pass the first parameter.\\n\\n\");\n                if (params[1] === undefined)\n                    throw new Error(\"Fatal error in JsonConvert. \" +\n                        \"It is not allowed to explicitly pass \\\"undefined\\\" as second parameter in the @JsonProperty decorator.\\n\\n\" +\n                        \"\\tClass property: \\n\" +\n                        \"\\t\\t\" + classPropertyName + \"\\n\\n\" +\n                        \"Use \\\"Any\\\" to allow any type. You can import this class from \\\"json2typescript\\\".\\n\\n\");\n                jsonPropertyName = params[0];\n                conversionOption = params[1];\n                if (params[2] === true) {\n                    convertingMode = PropertyConvertingMode.IGNORE_NULLABLE;\n                }\n                else if (params[2] === PropertyConvertingMode.IGNORE_NULLABLE ||\n                    params[2] === PropertyConvertingMode.PASS_NULLABLE ||\n                    params[2] === PropertyConvertingMode.MAP_NULLABLE) {\n                    convertingMode = params[2];\n                }\n                else {\n                    convertingMode = PropertyConvertingMode.MAP_NULLABLE;\n                }\n                break;\n            default:\n                break;\n        }\n        if (typeof (target[Settings.MAPPING_PROPERTY]) === \"undefined\") {\n            target[Settings.MAPPING_PROPERTY] = [];\n        }\n        var jsonPropertyMappingOptions = new MappingOptions();\n        jsonPropertyMappingOptions.classPropertyName = classPropertyName;\n        jsonPropertyMappingOptions.jsonPropertyName = jsonPropertyName;\n        jsonPropertyMappingOptions.convertingMode = convertingMode;\n        // Check if conversionOption is a type or a custom converter.\n        if (typeof (conversionOption) !== \"undefined\" && conversionOption !== null && typeof (conversionOption[Settings.MAPPER_PROPERTY]) !== \"undefined\") {\n            jsonPropertyMappingOptions.customConverter = new conversionOption();\n        }\n        else {\n            jsonPropertyMappingOptions.expectedJsonType = conversionOption;\n        }\n        // Save the mapping info\n        if (typeof (target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName]) === \"undefined\") {\n            target[Settings.MAPPING_PROPERTY][Settings.CLASS_IDENTIFIER + \".\" + classPropertyName] = jsonPropertyMappingOptions;\n        }\n        else {\n            throw new Error(\"Fatal error in JsonConvert. \" +\n                \"It is not allowed to add multiple decorators for the same property.\\n\\n\" +\n                \"\\tClass property: \\n\" +\n                \"\\t\\t\" + classPropertyName + \"\\n\\n\");\n        }\n    };\n}\n//# sourceMappingURL=json-convert-decorators.js.map"]},"metadata":{},"sourceType":"module"}