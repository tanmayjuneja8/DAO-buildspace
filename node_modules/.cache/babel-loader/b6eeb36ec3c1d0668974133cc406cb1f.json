{"ast":null,"code":"var _jsxFileName = \"/Users/tanmayjuneja/Documents/demos/SmartDAO/src/App.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ethers } from \"ethers\"; // import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\"; // We instantiate the sdk on Rinkeby.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\"); // We can grab a reference to our ERC-1155 contract.\n\nconst bundleDropModule = sdk.getBundleDropModule(\"0x0173BaFF4d6B5f258a1b850165017353EE571609\");\nconst tokenModule = sdk.getTokenModule(\"0xc27EA7dD409F459f08eE59566b62d6fc45D64cCa\");\nconst voteModule = sdk.getVoteModule(\"0xa892bb45b97E8d10f7bCA63Da1cb29f59795c9b9\");\n\nconst App = () => {\n  _s();\n\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined;\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [isClaiming, setIsClaiming] = useState(false); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false); // A fancy function to shorten someones wallet address, no need to show the whole thing. \n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }; // Retrieve all our existing proposals from the contract.\n\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // A simple call to voteModule.getAll() to grab the proposals.\n\n\n    try {\n      const proposals = await voteModule.getAll();\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals);\n    } catch (error) {\n      console.log(\"failed to get proposals\", error);\n    }\n  }, [hasClaimedNFT]); // We also need to check if the user already voted.\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n\n\n    if (!proposals.length) {\n      return;\n    } // Check if the user has already voted on the first proposal.\n\n\n    try {\n      const hasVoted = await voteModule.hasVoted(proposals[0].proposalId, address);\n      setHasVoted(hasVoted);\n\n      if (hasVoted) {\n        console.log(\"🥵 User has already voted\");\n      } else {\n        console.log(\"🙂 User has not voted yet\");\n      }\n    } catch (error) {\n      console.error(\"Failed to check if wallet has voted\", error);\n    }\n  }, [hasClaimedNFT, proposals, address]); // This useEffect grabs all the addresses of our members holding our NFT.\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n\n\n    try {\n      const memberAddresses = await bundleDropModule.getAllClaimerAddresses(\"0\");\n      setMemberAddresses(memberAddresses);\n      console.log(\"🚀 Members addresses\", memberAddresses);\n    } catch (error) {\n      console.error(\"failed to get member list\", error);\n    }\n  }, [hasClaimedNFT]); // This useEffect grabs the # of token each member holds.\n\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Grab all the balances.\n\n\n    try {\n      const amounts = await tokenModule.getAllHolderBalances();\n      setMemberTokenAmounts(amounts);\n      console.log(\"👜 Amounts\", amounts);\n    } catch (error) {\n      console.error(\"failed to get token amounts\", error);\n    }\n  }, [hasClaimedNFT]); // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map(address => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits( // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0, 18)\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(async () => {\n    if (!address) {\n      return;\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    const balance = await bundleDropModule.balanceOf(address, \"0\");\n\n    try {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    } catch (error) {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    }\n  }, [address]);\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to SmartDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  } // If the user has already claimed their NFT we want to display the interal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts.\n\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6ADAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations on being a member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Member List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Token Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: memberList.map(member => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shortenAddress(member.address)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: member.tokenAmount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 23\n                  }, this)]\n                }, member.address, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Active Proposals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: async e => {\n              e.preventDefault();\n              e.stopPropagation(); //before we do async things, we want to disable the button to prevent double clicks\n\n              setIsVoting(true); // lets get the votes from the form for the values\n\n              const votes = proposals.map(proposal => {\n                let voteResult = {\n                  proposalId: proposal.proposalId,\n                  //abstain by default\n                  vote: 2\n                };\n                proposal.votes.forEach(vote => {\n                  const elem = document.getElementById(proposal.proposalId + \"-\" + vote.type);\n\n                  if (elem.checked) {\n                    voteResult.vote = vote.type;\n                    return;\n                  }\n                });\n                return voteResult;\n              }); // first we need to make sure the user delegates their token to vote\n\n              try {\n                //we'll check if the wallet still needs to delegate their tokens before they can vote\n                const delegation = await tokenModule.getDelegationOf(address); // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n\n                if (delegation === ethers.constants.AddressZero) {\n                  //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                  await tokenModule.delegateTo(address);\n                } // then we need to vote on the proposals\n\n\n                try {\n                  await Promise.all(votes.map(async vote => {\n                    // before voting we first need to check whether the proposal is open for voting\n                    // we first need to get the latest state of the proposal\n                    const proposal = await voteModule.get(vote.proposalId); // then we check if the proposal is open for voting (state === 1 means it is open)\n\n                    if (proposal.state === 1) {\n                      // if it is open for voting, we'll vote on it\n                      return voteModule.vote(vote.proposalId, vote.vote);\n                    } // if the proposal is not open for voting we just return nothing, letting us continue\n\n\n                    return;\n                  }));\n\n                  try {\n                    // if any of the propsals are ready to be executed we'll need to execute them\n                    // a proposal is ready to be executed if it is in state 4\n                    await Promise.all(votes.map(async vote => {\n                      // we'll first get the latest state of the proposal again, since we may have just voted before\n                      const proposal = await voteModule.get(vote.proposalId); //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n\n                      if (proposal.state === 4) {\n                        return voteModule.execute(vote.proposalId);\n                      }\n                    })); // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n\n                    setHasVoted(true); // and log out a success message\n\n                    console.log(\"successfully voted\");\n                  } catch (err) {\n                    console.error(\"failed to execute votes\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to vote\", err);\n                }\n              } catch (err) {\n                console.error(\"failed to delegate tokens\");\n              } finally {\n                // in *either* case we need to set the isVoting state to false to enable the button again\n                setIsVoting(false);\n              }\n            },\n            children: [proposals.map((proposal, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: proposal.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: proposal.votes.map(vote => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    id: proposal.proposalId + \"-\" + vote.type,\n                    name: proposal.proposalId,\n                    value: vote.type //default the \"abstain\" vote to chedked\n                    ,\n                    defaultChecked: vote.type === 2\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: proposal.proposalId + \"-\" + vote.type,\n                    children: vote.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 25\n                  }, this)]\n                }, vote.type, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 19\n              }, this)]\n            }, proposal.proposalId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: isVoting || hasVoted,\n              type: \"submit\",\n              children: isVoting ? \"Voting...\" : hasVoted ? \"You Already Voted\" : \"Submit Votes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"This will trigger multiple transactions that you will need to sign.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n  ; // Render mint nft screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ASmartDAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => {\n        setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n\n        bundleDropModule.claim(\"0\", 1).catch(err => {\n          console.error(\"failed to claim\", err);\n          setIsClaiming(false);\n        }).finally(() => {\n          // Stop loading state.\n          setIsClaiming(false); // Set claim state.\n\n          setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n          console.log(`Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n        });\n      },\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zSngI9kpmfjcRvQvRKnagr/O7EQ=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tanmayjuneja/Documents/demos/SmartDAO/src/App.jsx"],"names":["useEffect","useMemo","useState","ethers","useWeb3","ThirdwebSDK","sdk","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","shortenAddress","str","substring","length","getAll","proposalId","getAllClaimerAddresses","amounts","getAllHolderBalances","memberList","map","tokenAmount","utils","formatUnits","setProviderOrSigner","balance","balanceOf","gt","member","e","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","elem","document","getElementById","type","checked","delegation","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","err","index","description","label","claim","catch","finally"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\n// import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n// We instantiate the sdk on Rinkeby.\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x0173BaFF4d6B5f258a1b850165017353EE571609\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0xc27EA7dD409F459f08eE59566b62d6fc45D64cCa\",\n);\nconst voteModule = sdk.getVoteModule(\n  \"0xa892bb45b97E8d10f7bCA63Da1cb29f59795c9b9\",\n);\n\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address)\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n\n  // Holds the amount of token each member has in state.\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  // The array holding all of our members addresses.\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  // A fancy function to shorten someones wallet address, no need to show the whole thing. \n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  // Retrieve all our existing proposals from the contract.\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    try {\n      const proposals = await voteModule.getAll();\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals);\n    } catch (error) {\n      console.log(\"failed to get proposals\", error);\n    }\n  }, [hasClaimedNFT]);\n\n  // We also need to check if the user already voted.\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) {\n      return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    try {\n      const hasVoted = await voteModule.hasVoted(proposals[0].proposalId, address);\n      setHasVoted(hasVoted);\n      if (hasVoted) {\n        console.log(\"🥵 User has already voted\");\n      } else {\n        console.log(\"🙂 User has not voted yet\");\n      }\n    } catch (error) {\n      console.error(\"Failed to check if wallet has voted\", error);\n    }\n  }, [hasClaimedNFT, proposals, address]);\n  // This useEffect grabs all the addresses of our members holding our NFT.\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n    try {\n      const memberAddresses = await bundleDropModule.getAllClaimerAddresses(\"0\");\n      setMemberAddresses(memberAddresses);\n      console.log(\"🚀 Members addresses\", memberAddresses);\n    } catch (error) {\n      console.error(\"failed to get member list\", error);\n    }\n  }, [hasClaimedNFT]);\n\n  // This useEffect grabs the # of token each member holds.\n  useEffect(async () => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Grab all the balances.\n    try {\n      const amounts = await tokenModule.getAllHolderBalances();\n      setMemberTokenAmounts(amounts);\n      console.log(\"👜 Amounts\", amounts);\n    } catch (error) {\n      console.error(\"failed to get token amounts\", error);\n    }\n  }, [hasClaimedNFT]);\n\n  // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(async () => {\n    if (!address) {\n      return;\n    }\n\n    // Check if the user has the NFT by using bundleDropModule.balanceOf\n    const balance = await bundleDropModule.balanceOf(address, \"0\");\n\n    try {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\")\n      }\n    } catch (error) {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    }\n  }, [address]);\n\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to SmartDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  // If the user has already claimed their NFT we want to display the interal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts.\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪DAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                //before we do async things, we want to disable the button to prevent double clicks\n                setIsVoting(true);\n\n                // lets get the votes from the form for the values\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    //abstain by default\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                // first we need to make sure the user delegates their token to vote\n                try {\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                  if (delegation === ethers.constants.AddressZero) {\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                    await tokenModule.delegateTo(address);\n                  }\n                  // then we need to vote on the proposals\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        // before voting we first need to check whether the proposal is open for voting\n                        // we first need to get the latest state of the proposal\n                        const proposal = await voteModule.get(vote.proposalId);\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\n                        if (proposal.state === 1) {\n                          // if it is open for voting, we'll vote on it\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        // if the proposal is not open for voting we just return nothing, letting us continue\n                        return;\n                      })\n                    );\n                    try {\n                      // if any of the propsals are ready to be executed we'll need to execute them\n                      // a proposal is ready to be executed if it is in state 4\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                      setHasVoted(true);\n                      // and log out a success message\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  // in *either* case we need to set the isVoting state to false to enable the button again\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          //default the \"abstain\" vote to chedked\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪SmartDAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => {\n          setIsClaiming(true);\n          // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n          bundleDropModule\n            .claim(\"0\", 1)\n            .catch((err) => {\n              console.error(\"failed to claim\", err);\n              setIsClaiming(false);\n            })\n            .finally(() => {\n              // Stop loading state.\n              setIsClaiming(false);\n              // Set claim state.\n              setHasClaimedNFT(true);\n              // Show user their fancy new NFT!\n              console.log(\n                `Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n              );\n            });\n        }}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}